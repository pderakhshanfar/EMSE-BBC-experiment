/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 05:25:15 GMT 2020
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.IdentityManager;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("#'V>K7");
      assertNull(qName0.getPrefix());
      assertEquals("#'V>K7", qName0.toString());
      assertEquals("#'V>K7", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("#'V>K7", qName0.toString());
      assertEquals("#'V>K7", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("#'V>K7", qName0.toString());
      assertEquals("#'V>K7", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("#'V>K7");
      assertEquals("#'V>K7", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, processingInstructionTest0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("#'V>K7", qName0.toString());
      assertEquals("#'V>K7", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("#'V>K7", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(ancestorContext0);
      
      RootContext rootContext1 = ancestorContext0.getRootContext();
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("#'V>K7", qName0.toString());
      assertEquals("#'V>K7", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("#'V>K7", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, processingInstructionTest0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("#'V>K7", qName0.toString());
      assertEquals("#'V>K7", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("#'V>K7", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(attributeContext0);
      
      evalContextArray0[2] = (EvalContext) attributeContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      Integer integer0 = new Integer(13);
      assertEquals(13, (int)integer0);
      assertNotNull(integer0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext(integer0);
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("#'V>K7", qName0.toString());
      assertEquals("#'V>K7", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertSame(rootContext0, rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext0);
      
      evalContextArray0[4] = (EvalContext) initialContext0;
      UnionContext unionContext0 = new UnionContext(rootContext1, evalContextArray0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNull(qName0.getPrefix());
      assertEquals("#'V>K7", qName0.toString());
      assertEquals("#'V>K7", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("#'V>K7", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(5, evalContextArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr1);
      
      expressionArray0[1] = (Expression) coreOperationOr1;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(7, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1), nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals((-1), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("6Rykpe.4xf`]bZ]");
      assertEquals("6Rykpe.4xf`]bZ]", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step2 = new Step(13, processingInstructionTest0, expressionArray0);
      assertEquals("6Rykpe.4xf`]bZ]", processingInstructionTest0.getTarget());
      assertEquals(13, step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(2342, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(2342, step3.getAxis());
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(6, nodeTypeTest0, expressionArray0);
      assertEquals(6, step4.getAxis());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((short)61, processingInstructionTest0, expressionArray0);
      assertEquals(61, step5.getAxis());
      assertEquals("6Rykpe.4xf`]bZ]", processingInstructionTest0.getTarget());
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-545), (NodeTest) null, expressionArray0);
      assertEquals((-545), step6.getAxis());
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-545), nodeTypeTest0, expressionArray0);
      assertEquals((-545), step7.getAxis());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step(6, nodeTypeTest0, expressionArray0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(6, step8.getAxis());
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertEquals(7, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[1]);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, expressionArray0[1]);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant((Number) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[5] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[3], coreOperationGreaterThanOrEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Short short0 = new Short((short)30);
      assertEquals((short)30, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant(short0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant1, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      expressionArray0[1] = (Expression) constant0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) short0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, expressionArray0[0], locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(2, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, short0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      Iterator iterator0 = constant0.iteratePointers(rootContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertNotSame(constant0, constant1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(iterator0);
      
      CoreFunction coreFunction0 = new CoreFunction((short)30, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Iterator iterator1 = coreFunction0.iteratePointers(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals(2, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(iterator1, iterator0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(iterator1);
      
      String string0 = (String)coreFunction0.functionConcat((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("false30", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Short short0 = new Short((short)61);
      assertEquals((short)61, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("false28");
      assertNull(qName0.getPrefix());
      assertEquals("false28", qName0.toString());
      assertEquals("false28", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("false28", qName0.toString());
      assertEquals("false28", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("false28", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-571), nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("false28", qName0.toString());
      assertEquals("false28", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("false28", nodeNameTest0.toString());
      assertEquals((-571), step0.getAxis());
      assertEquals(9, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(565, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("false28", qName0.toString());
      assertEquals("false28", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("false28", nodeNameTest0.toString());
      assertEquals(565, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1513, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("false28", qName0.toString());
      assertEquals("false28", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("false28", nodeNameTest0.toString());
      assertEquals(1513, step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(565, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(565, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      String string0 = coreFunction0.getFunctionName();
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(565, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertEquals("unknownFunction565()", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)97;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6U^nH~3@@*4T");
      assertFalse(boolean0);
      
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte)2;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-16), (byte)97, (byte)0, (byte) (-71), (byte) (-39), (byte)2}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("6U^nH~3@@*4T");
      assertNull(qName0.getPrefix());
      assertEquals("6U^nH~3@@*4T", qName0.toString());
      assertEquals("6U^nH~3@@*4T", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("6U^nH~3@@*4T", qName0.toString());
      assertEquals("6U^nH~3@@*4T", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short)47);
      assertEquals((short)47, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant((Number) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)47, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[2];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      QName qName0 = new QName("false1215", "false1215");
      assertEquals("false1215:false1215", qName0.toString());
      assertEquals("false1215", qName0.getName());
      assertEquals("false1215", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "false1215");
      assertEquals("false1215:false1215", qName0.toString());
      assertEquals("false1215", qName0.getName());
      assertEquals("false1215", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("false1215:false1215", nodeNameTest0.toString());
      assertEquals("false1215", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(23, nodeNameTest0, expressionArray0);
      assertEquals("false1215:false1215", qName0.toString());
      assertEquals("false1215", qName0.getName());
      assertEquals("false1215", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("false1215:false1215", nodeNameTest0.toString());
      assertEquals("false1215", nodeNameTest0.getNamespaceURI());
      assertEquals(23, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-531), nodeNameTest0, expressionArray0);
      assertEquals("false1215:false1215", qName0.toString());
      assertEquals("false1215", qName0.getName());
      assertEquals("false1215", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("false1215:false1215", nodeNameTest0.toString());
      assertEquals("false1215", nodeNameTest0.getNamespaceURI());
      assertEquals((-531), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, expressionArray0[0]);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationMultiply0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(1764, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1764, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreFunction coreFunction0 = new CoreFunction((-59), expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-59), coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("z");
      assertEquals("z", qName0.getName());
      assertEquals("z", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("z", qName0.getName());
      assertEquals("z", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-41), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-41), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-41), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction-41()($z)", string0);
      assertNotNull(string0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "z");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("z");
      assertEquals("z", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("z", qName1.toString());
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, qName1, locale0);
      assertEquals("z", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("z", qName1.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(qName1.equals((Object)qName0));
      assertNotSame(qName1, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, beanPointer0);
      assertEquals("z", qName0.getName());
      assertEquals("z", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("z", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("z", qName1.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(qName0.equals((Object)qName1));
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertEquals("z", qName0.getName());
      assertEquals("z", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("z", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("z", qName1.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      Iterator iterator0 = variableReference0.iterate(rootContext0);
      assertEquals("z", qName0.getName());
      assertEquals("z", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("z", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("z", qName1.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName1, qName0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(iterator0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      assertEquals("z", qName0.getName());
      assertEquals("z", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("z", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("z", qName1.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName1, qName0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: z
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(0, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(0, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1228), nodeTypeTest0, expressionArray0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals((-1228), step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(7, nodeTypeTest0, expressionArray0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(7, step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      assertNotNull(string0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationNegate0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1228), expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1228), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertNotNull(attributeContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeTypeTest0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      SelfContext selfContext0 = new SelfContext(unionContext0, (NodeTest) null);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      coreFunction0.functionKey(selfContext0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(539);
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step((-1833), nodeTypeTest0, expressionArray0);
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertEquals((-1833), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2330), nodeTypeTest0, expressionArray0);
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertEquals((-2330), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeTypeTest0, expressionArray0);
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertEquals(2, step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeTypeTest0, expressionArray0);
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertEquals(2, step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-2892), nodeTypeTest0, (Expression[]) null);
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertEquals((-2892), step4.getAxis());
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(539, nodeTypeTest0, expressionArray0);
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertEquals(539, step5.getAxis());
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-2892), nodeTypeTest0, (Expression[]) null);
      assertEquals((-2892), step6.getAxis());
      assertEquals(539, nodeTypeTest0.getNodeType());
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(7, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2892), expressionArray0);
      assertEquals((-2892), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("N'#/<3*sQ|id].Y");
      assertEquals("N'#/<3*sQ|id].Y", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("N'#/<3*sQ|id].Y", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("N'#/<3*sQ|id].Y", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("N'#/<3*sQ|id].Y", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("N'#/<3*sQ|id].Y", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("N'#/<3*sQ|id].Y", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("c-W0`j.~sB}%+Y");
      assertEquals("c-W0`j.~sB}%+Y", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(27, processingInstructionTest0, expressionArray0);
      assertEquals("c-W0`j.~sB}%+Y", processingInstructionTest0.getTarget());
      assertEquals(27, step0.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1070, processingInstructionTest0, expressionArray0);
      assertEquals(1070, step1.getAxis());
      assertEquals("c-W0`j.~sB}%+Y", processingInstructionTest0.getTarget());
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[4] = (Expression) expressionPath0;
      Double double0 = new Double(27);
      assertEquals(27.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[5] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, constant0);
      assertEquals("N'#/<3*sQ|id].Y", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("N'#/<3*sQ|id].Y", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Short short0 = new Short((short)61);
      assertEquals((short)61, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)61, expressionArray0);
      assertEquals(61, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(61, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("61", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Short short0 = new Short((short)30);
      assertEquals((short)30, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreFunction coreFunction0 = new CoreFunction((-59), expressionArray0);
      assertEquals((-59), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("1_)5L", "1_)5L");
      assertEquals("1_)5L:1_)5L", qName0.toString());
      assertEquals("1_)5L", qName0.getName());
      assertEquals("1_)5L", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("1_)5L:1_)5L", qName0.toString());
      assertEquals("1_)5L", qName0.getName());
      assertEquals("1_)5L", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      assertEquals("1_)5L:1_)5L", qName0.toString());
      assertEquals("1_)5L", qName0.getName());
      assertEquals("1_)5L", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("1_)5L:1_)5L", qName0.toString());
      assertEquals("1_)5L", qName0.getName());
      assertEquals("1_)5L", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction1);
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction1, extensionFunction1);
      assertEquals("1_)5L:1_)5L", qName0.toString());
      assertEquals("1_)5L", qName0.getName());
      assertEquals("1_)5L", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[2]);
      assertEquals("1_)5L:1_)5L", qName0.toString());
      assertEquals("1_)5L", qName0.getName());
      assertEquals("1_)5L", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, coreOperationDivide0);
      assertEquals("1_)5L:1_)5L", qName0.toString());
      assertEquals("1_)5L", qName0.getName());
      assertEquals("1_)5L", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[6] = (Expression) coreOperationAdd0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(993, expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(993, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      String string0 = coreOperationAnd0.toString();
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      coreFunction0.functionNot(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply");
      assertFalse(boolean0);
      
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("28", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertFalse(object2.equals((Object)object0));
      assertEquals(2, expressionArray0.length);
      assertEquals("", object2);
      assertNotNull(object2);
      
      Object object3 = coreFunction0.compute((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNull(object3);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      QName qName0 = new QName("sum");
      assertEquals("sum", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("sum", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("sum", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("sum", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("sum", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("sum", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction1);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction1);
      assertEquals("sum", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("sum", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      Byte byte0 = new Byte((byte)45);
      assertEquals((byte)45, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationUnion0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationEqual0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, extensionFunction1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("sum", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("sum", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, expressionArray0[0]);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[7] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], extensionFunction0);
      assertEquals("sum", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("sum", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[8] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(103, expressionArray0);
      assertEquals(103, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("28");
      assertEquals("28", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertEquals("28", processingInstructionTest0.getTarget());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(parentContext0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-804.4188842773438");
      assertFalse(boolean0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest((QName) null, "org.apache.commons.jxpath.ri.model.NodePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      
      DescendantContext descendantContext0 = new DescendantContext(precedingOrFollowingContext0, false, nodeNameTest1);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", nodeNameTest1.getNamespaceURI());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(descendantContext0);
      
      Object object0 = coreFunction0.compute(descendantContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", nodeNameTest1.getNamespaceURI());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals("", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("u9cc", (String) null);
      assertEquals("u9cc:null", qName0.toString());
      assertEquals("u9cc", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("u9cc:null", qName0.toString());
      assertEquals("u9cc", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      Expression[] expressionArray2 = new Expression[2];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], variableReference0);
      assertEquals("u9cc:null", qName0.toString());
      assertEquals("u9cc", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, coreOperationSubtract0);
      assertEquals("u9cc:null", qName0.toString());
      assertEquals("u9cc", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray2[0] = (Expression) coreOperationMod0;
      expressionArray2[1] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray2);
      assertEquals("u9cc:null", qName0.toString());
      assertEquals("u9cc", qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(2, expressionArray2.length);
      assertNotNull(extensionFunction0);
      
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("u9cc:null", qName0.toString());
      assertEquals("u9cc", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1559);
      assertEquals(1559, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(108, nodeTypeTest0, expressionArray1);
      assertEquals(1559, nodeTypeTest0.getNodeType());
      assertEquals(108, step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1559, nodeTypeTest0, expressionArray2);
      assertEquals(1559, nodeTypeTest0.getNodeType());
      assertEquals(1559, step1.getAxis());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray2.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(108, nodeTypeTest0, expressionArray2);
      assertEquals(1559, nodeTypeTest0.getNodeType());
      assertEquals(108, step2.getAxis());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, expressionArray2.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-4118), nodeTypeTest0, expressionArray0);
      assertEquals(1559, nodeTypeTest0.getNodeType());
      assertEquals((-4118), step3.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(10, nodeTypeTest0, expressionArray1);
      assertEquals(1559, nodeTypeTest0.getNodeType());
      assertEquals(10, step4.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("u9cc");
      assertEquals("u9cc", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step5 = new Step((-704), processingInstructionTest0, expressionArray2);
      assertEquals("u9cc", processingInstructionTest0.getTarget());
      assertEquals((-704), step5.getAxis());
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(2, expressionArray2.length);
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(52, processingInstructionTest0, expressionArray1);
      assertEquals("u9cc", processingInstructionTest0.getTarget());
      assertEquals(52, step6.getAxis());
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(10, nodeTypeTest0, expressionArray1);
      assertEquals(10, step7.getAxis());
      assertEquals(1559, nodeTypeTest0.getNodeType());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray1, stepArray0);
      assertEquals("u9cc:null", qName0.toString());
      assertEquals("u9cc", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals(8, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray2[0], coreOperationSubtract0);
      assertEquals("u9cc:null", qName0.toString());
      assertEquals("u9cc", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(7, expressionArray0.length);
      assertEquals(2, expressionArray2.length);
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant(",g,");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[5] = (Expression) constant0;
      Byte byte0 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2144825871), expressionArray0);
      assertEquals((-2144825871), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals((-2144825871), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertEquals("unknownFunction-2144825871()", string0);
      assertNotNull(string0);
      
      Float float0 = new Float((double) (-2144825871));
      assertEquals((-2.14482586E9F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string1 = coreFunction0.getFunctionName();
      assertEquals((-2144825871), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, expressionArray0.length);
      assertEquals("unknownFunction-2144825871()", string1);
      assertNotNull(string1);
      
      String string2 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-2144825856", string2);
      assertNotNull(string2);
      
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual1);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(coreOperationGreaterThanOrEqual0.equals((Object)coreOperationGreaterThanOrEqual1));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(coreOperationGreaterThanOrEqual0.equals((Object)coreOperationGreaterThanOrEqual1));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(1842, expressionArray0);
      assertEquals(1842, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(1842, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals("unknownFunction1842()", string0);
      assertNotNull(string0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-545), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-545), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-545), coreFunction0.getFunctionCode());
      assertFalse(boolean1 == boolean0);
      assertEquals(1, expressionArray0.length);
      assertTrue(boolean1);
      
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction((short)28, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?Gb5L7tXE ");
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, processingInstructionTest0);
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) namespaceContext0);
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("&c", "32263226");
      assertEquals("&c", qName0.getPrefix());
      assertEquals("32263226", qName0.getName());
      assertEquals("&c:32263226", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals("&c", qName0.getPrefix());
      assertEquals("32263226", qName0.getName());
      assertEquals("&c:32263226", qName0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, nullPointer0);
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&c", qName0.getPrefix());
      assertEquals("32263226", qName0.getName());
      assertEquals("&c:32263226", qName0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&c", qName0.getPrefix());
      assertEquals("32263226", qName0.getName());
      assertEquals("&c:32263226", qName0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&c", qName0.getPrefix());
      assertEquals("32263226", qName0.getName());
      assertEquals("&c:32263226", qName0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getConstantContext(qName0);
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&c", qName0.getPrefix());
      assertEquals("32263226", qName0.getName());
      assertEquals("&c:32263226", qName0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertEquals("?Gb5L7tXE ", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&c", qName0.getPrefix());
      assertEquals("32263226", qName0.getName());
      assertEquals("&c:32263226", qName0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(2, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1585), expressionArray0);
      assertEquals((-1585), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals((-1585), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("28", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1585()(28, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("round");
      assertEquals("round", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(84, processingInstructionTest0, (Expression[]) null);
      assertEquals("round", processingInstructionTest0.getTarget());
      assertEquals(84, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, processingInstructionTest0, (Expression[]) null);
      assertEquals("round", processingInstructionTest0.getTarget());
      assertEquals(7, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2406), processingInstructionTest0, (Expression[]) null);
      assertEquals("round", processingInstructionTest0.getTarget());
      assertEquals((-2406), step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(84, processingInstructionTest0, (Expression[]) null);
      assertEquals("round", processingInstructionTest0.getTarget());
      assertEquals(84, step3.getAxis());
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-897), processingInstructionTest0, expressionArray0);
      assertEquals("round", processingInstructionTest0.getTarget());
      assertEquals((-897), step4.getAxis());
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2406), processingInstructionTest0, (Expression[]) null);
      assertEquals((-2406), step5.getAxis());
      assertEquals("round", processingInstructionTest0.getTarget());
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(15, processingInstructionTest0, (Expression[]) null);
      assertEquals(15, step6.getAxis());
      assertEquals("round", processingInstructionTest0.getTarget());
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-2406), processingInstructionTest0, expressionArray0);
      assertEquals((-2406), step7.getAxis());
      assertEquals("round", processingInstructionTest0.getTarget());
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, (Expression[]) null, stepArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Constant constant0 = new Constant("7]");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(56, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      EvalContext evalContext0 = null;
      String string0 = coreFunction0.toString();
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("unknownFunction56()('7]', '7]', '7]')", string0);
      assertNotNull(string0);
      
      String string1 = (String)coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, expressionArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction56()('7]', '7]', '7]')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "last");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction((-350), (Expression[]) null);
      assertEquals((-350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      QName qName0 = new QName("gqvQc$tL_k~L_z");
      assertEquals("gqvQc$tL_k~L_z", qName0.toString());
      assertEquals("gqvQc$tL_k~L_z", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "last");
      assertEquals("gqvQc$tL_k~L_z", qName0.toString());
      assertEquals("gqvQc$tL_k~L_z", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last", nodeNameTest0.getNamespaceURI());
      assertEquals("gqvQc$tL_k~L_z", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest0, false, false);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("gqvQc$tL_k~L_z", qName0.toString());
      assertEquals("gqvQc$tL_k~L_z", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last", nodeNameTest0.getNamespaceURI());
      assertEquals("gqvQc$tL_k~L_z", nodeNameTest0.toString());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      boolean boolean2 = childContext0.nextNode();
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("gqvQc$tL_k~L_z", qName0.toString());
      assertEquals("gqvQc$tL_k~L_z", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("last", nodeNameTest0.getNamespaceURI());
      assertEquals("gqvQc$tL_k~L_z", nodeNameTest0.toString());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(1, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(childContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer((short)28);
      assertEquals(28, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("28", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "28");
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      String string1 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(string1.equals((Object)string0));
      assertEquals("28", string1);
      assertNotNull(string1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("28", string2);
      assertNotNull(string2);
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(iterator0);
      
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(6, expressionArray0.length);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(28, 28, 28, 28, 28, 28)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, expressionArray0[0]);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-313), nodeTypeTest0, expressionArray0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals((-313), step0.getAxis());
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(793, nodeTypeTest0, expressionArray0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(793, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(32767, nodeTypeTest0, expressionArray0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(32767, step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(793, nodeTypeTest0, expressionArray0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(793, step3.getAxis());
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(3, nodeTypeTest0, expressionArray0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(3, step4.getAxis());
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1), nodeTypeTest0, expressionArray0);
      assertEquals((-1), step5.getAxis());
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[1], coreOperationGreaterThanOrEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreOperationEqual0);
      
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      expressionArray1[5] = (Expression) coreOperationLessThan0;
      Step step6 = new Step(14, nodeTypeTest0, expressionArray1);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(14, step6.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(14, nodeTypeTest0, expressionArray0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(14, step7.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, expressionPath0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(793, expressionArray0);
      assertEquals(793, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertNotNull(attributeContext0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps(attributeContext0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(evalContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, false, nodeTypeTest0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      coreFunction0.functionLast(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((short)28, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(28, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(71, expressionArray0);
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction71()", string0);
      assertNotNull(string0);
      
      String string1 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("28", string1);
      assertNotNull(string1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Step step1 = new Step((short)28, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(28, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      
      EvalContext evalContext0 = null;
      String string2 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("28", string2);
      assertNotNull(string2);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName0 = new QName("\"", "\"");
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      int int0 = 20;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step[] stepArray0 = new Step[9];
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[0] = step1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreOperationMultiply0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("0", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionConcat((EvalContext) null);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("00", object1);
      assertNotNull(object1);
      
      Object object2 = coreOperationSubtract0.compute((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0.0, object2);
      assertNotNull(object2);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationSubtract0);
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(predicateContext0);
      
      Object object3 = coreFunction1.functionContains((EvalContext) null);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object3.equals((Object)boolean0));
      assertFalse(object3.equals((Object)boolean1));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(true, object3);
      assertNotNull(object3);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Short short0 = new Short((short)3226);
      assertEquals((short)3226, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1751, expressionArray0);
      assertEquals(1751, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(1751, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1751()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 3226, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(56, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      String string0 = coreFunction0.toString();
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("unknownFunction56()('', '', '')", string0);
      assertNotNull(string0);
      
      String string1 = (String)coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, expressionArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = coreFunction0.getFunctionName();
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, expressionArray0.length);
      assertEquals("unknownFunction56()", string2);
      assertNotNull(string2);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(boolean0);
      
      String string3 = (String)coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(3, expressionArray0.length);
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("28", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1565), expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1565), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1565), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("28", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1565()(28, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 28)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("2", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((short)28, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(28, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(1644, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1644, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1644, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction1644()", string0);
      assertNotNull(string0);
      
      String string1 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("28", string1);
      assertNotNull(string1);
      
      Step step1 = new Step((short)28, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(28, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1644, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1.0, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Short
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((short)28, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(28, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(71, expressionArray0);
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction71()", string0);
      assertNotNull(string0);
      
      String string1 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("28", string1);
      assertNotNull(string1);
      
      Step step1 = new Step((short)28, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(28, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean1));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(object1.equals((Object)string1));
      assertFalse(object1.equals((Object)string0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals("", object1);
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionStringLength((EvalContext) null);
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2.0, object2);
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((short)28, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(28, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(71, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(71, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction71()", string0);
      assertNotNull(string0);
      
      String string1 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("28", string1);
      assertNotNull(string1);
      
      Step step1 = new Step((short)28, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(28, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Short short0 = new Short((short)28);
      assertEquals((short)28, (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(28)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("\t");
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray0[0]);
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, expressionArray0[0]);
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[3], coreOperationSubtract0);
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("", "");
      assertEquals(":", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertFalse(qName0.equals((Object)qName1));
      assertNotSame(qName0, qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[4], nullPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      
      RootContext rootContext2 = rootContext1.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\t", qName0.getName());
      assertEquals("\t", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext2);
      
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      assertEquals(24, coreFunction2.getFunctionCode());
      assertEquals(6, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionNamespaceURI(rootContext2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)39;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)39}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      Pointer pointer0 = nodeSetContext0.getContextNodePointer();
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNull(pointer0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("#&Z", "");
      assertEquals("#&Z", qName0.getPrefix());
      assertEquals("#&Z:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("#&Z", qName0.getPrefix());
      assertEquals("#&Z:", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray0[1]);
      assertEquals("#&Z", qName0.getPrefix());
      assertEquals("#&Z:", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, coreOperationUnion0);
      assertEquals("#&Z", qName0.getPrefix());
      assertEquals("#&Z:", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(621, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(621, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant("nkQ>ZNE`I.Y?<>");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("nkQ>ZNE`I.Y?<>", "k,;KF");
      assertEquals("nkQ>ZNE`I.Y?<>", qName0.getPrefix());
      assertEquals("k,;KF", qName0.getName());
      assertEquals("nkQ>ZNE`I.Y?<>:k,;KF", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("nkQ>ZNE`I.Y?<>", qName0.getPrefix());
      assertEquals("k,;KF", qName0.getName());
      assertEquals("nkQ>ZNE`I.Y?<>:k,;KF", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals("nkQ>ZNE`I.Y?<>", qName0.getPrefix());
      assertEquals("k,;KF", qName0.getName());
      assertEquals("nkQ>ZNE`I.Y?<>:k,;KF", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, nullPointer0);
      assertEquals("nkQ>ZNE`I.Y?<>", qName0.getPrefix());
      assertEquals("k,;KF", qName0.getName());
      assertEquals("nkQ>ZNE`I.Y?<>:k,;KF", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertEquals("nkQ>ZNE`I.Y?<>", qName0.getPrefix());
      assertEquals("k,;KF", qName0.getName());
      assertEquals("nkQ>ZNE`I.Y?<>:k,;KF", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertEquals("nkQ>ZNE`I.Y?<>", qName0.getPrefix());
      assertEquals("k,;KF", qName0.getName());
      assertEquals("nkQ>ZNE`I.Y?<>:k,;KF", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      
      // Undeclared exception!
      coreFunction0.functionName(rootContext1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      assertEquals("string", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertEquals("string", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      boolean boolean1 = attributeContext0.setPosition(23);
      assertEquals("string", processingInstructionTest0.getTarget());
      assertEquals(1, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = coreFunction0.functionLast(attributeContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals("string", processingInstructionTest0.getTarget());
      assertEquals(1, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(56, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      EvalContext evalContext0 = null;
      String string0 = (String)coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(56, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[1], beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(initialContext0, nodeTypeTest0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()('', '', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(27, expressionArray0);
      assertEquals(27, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-15), expressionArray0);
      assertEquals((-15), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-s#Y;");
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-15), processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals((-15), step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      boolean boolean0 = step0.isContextDependent();
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals((-15), step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(0, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-15));
      assertEquals((-15), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step2 = new Step(24, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(24, step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step2);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-15));
      assertEquals((-15), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      Step step3 = new Step(18, nodeTypeTest1, expressionArray0);
      assertEquals((-15), nodeTypeTest1.getNodeType());
      assertEquals(18, step3.getAxis());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step3);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3200), expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, processingInstructionTest0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction1.computeValue(predicateContext0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNull(object0);
      
      Object object1 = coreFunction1.functionSubstringAfter(predicateContext0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals("", object1);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      QName qName0 = new QName("\"", "\"");
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreOperationMultiply0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("00", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(true, object1);
      assertNotNull(object1);
      
      Object object2 = coreFunction1.functionStartsWith((EvalContext) null);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(true, object2);
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short) (-164));
      assertEquals((short) (-164), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((IdentityManager) null).when(jXPathContextReferenceImpl0).getIdentityManager();
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("LZfKA&F@");
      assertEquals("LZfKA&F@", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("LZfKA&F@", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertEquals("LZfKA&F@", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("LZfKA&F@", qName0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals("LZfKA&F@", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("LZfKA&F@", qName0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals("LZfKA&F@", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("LZfKA&F@", qName0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "", beanPointer0);
      assertEquals("LZfKA&F@", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("LZfKA&F@", qName0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("LZfKA&F@", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("LZfKA&F@", qName0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("id()", string0);
      assertNotNull(string0);
      
      Float float0 = new Float((-805.8894573564));
      assertEquals((-805.88947F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("id()");
      assertNull(qName0.getPrefix());
      assertEquals("id()", qName0.toString());
      assertEquals("id()", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ":c-AUl1%6`e03");
      assertNull(qName0.getPrefix());
      assertEquals("id()", qName0.toString());
      assertEquals("id()", qName0.getName());
      assertEquals("id()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":c-AUl1%6`e03", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2972);
      assertEquals(2972, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(4, nodeTypeTest0, (Expression[]) null);
      assertEquals(2972, nodeTypeTest0.getNodeType());
      assertEquals(4, step0.getAxis());
      assertNotNull(step0);
      
      String string1 = coreFunction0.getFunctionName();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals("id", string1);
      assertNotNull(string1);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      assertNull(qName0.getPrefix());
      assertEquals("id()", qName0.toString());
      assertEquals("id()", qName0.getName());
      assertEquals("id()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":c-AUl1%6`e03", nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals(2972, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(iterator0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Step step1 = new Step((-2534), nodeNameTest0, expressionArray0);
      assertEquals((-2534), step1.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("id()", qName0.toString());
      assertEquals("id()", qName0.getName());
      assertEquals("id()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":c-AUl1%6`e03", nodeNameTest0.getNamespaceURI());
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2534), (Expression[]) null);
      assertEquals((-2534), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short) (-164));
      assertEquals((short) (-164), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("false", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short) (-164));
      assertEquals((short) (-164), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Boolean
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EvalContext evalContext0 = null;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("-805.8894653320312");
      assertNull(qName0.getPrefix());
      assertEquals("-805.8894653320312", qName0.toString());
      assertEquals("-805.8894653320312", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "vc");
      assertNull(qName0.getPrefix());
      assertEquals("-805.8894653320312", qName0.toString());
      assertEquals("-805.8894653320312", qName0.getName());
      assertEquals("vc", nodeNameTest0.getNamespaceURI());
      assertEquals("-805.8894653320312", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("-805.8894653320312", qName0.toString());
      assertEquals("-805.8894653320312", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      expressionArray0[3] = (Expression) constant0;
      Step step0 = new Step(1133, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("-805.8894653320312", qName0.toString());
      assertEquals("-805.8894653320312", qName0.getName());
      assertEquals("vc", nodeNameTest0.getNamespaceURI());
      assertEquals("-805.8894653320312", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1133, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertEquals("unknownFunction-1()", string0);
      assertNotNull(string0);
      
      Step step1 = new Step(34, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("-805.8894653320312", qName0.toString());
      assertEquals("-805.8894653320312", qName0.getName());
      assertEquals("vc", nodeNameTest0.getNamespaceURI());
      assertEquals("-805.8894653320312", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(34, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      EvalContext evalContext1 = null;
      CoreFunction coreFunction1 = new CoreFunction(34, expressionArray0);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(34, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction1.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      QName qName0 = new QName("\"", "\"");
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(13, (Expression[]) null);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4625), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object2);
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationEqual0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      Expression expression0 = coreFunction0.getArg3();
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNull(expression0);
      
      expressionArray0[2] = null;
      QName qName0 = new QName("&{&sB1>'Jc", "c0Q~1?ds4");
      assertEquals("&{&sB1>'Jc:c0Q~1?ds4", qName0.toString());
      assertEquals("c0Q~1?ds4", qName0.getName());
      assertEquals("&{&sB1>'Jc", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("&{&sB1>'Jc:c0Q~1?ds4", qName0.toString());
      assertEquals("c0Q~1?ds4", qName0.getName());
      assertEquals("&{&sB1>'Jc", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      QName qName0 = new QName("\"", "\"");
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreOperationMultiply0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short) (-164));
      assertEquals((short) (-164), (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2267), expressionArray0);
      assertEquals((-2267), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      String string0 = coreFunction0.getFunctionName();
      assertEquals((-2267), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction-2267()", string0);
      assertNotNull(string0);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      Object object0 = coreFunction0.functionBoolean(unionContext0);
      assertEquals((-2267), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionString((EvalContext) null);
      assertEquals((-2267), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(object1.equals((Object)string0));
      assertEquals(1, expressionArray0.length);
      assertEquals("false", object1);
      assertNotNull(object1);
      
      PredicateContext predicateContext0 = new PredicateContext(unionContext0, expressionArray0[0]);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2267()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(2495, expressionArray0);
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(2495, coreFunction0.getFunctionCode());
      assertEquals(10, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(2495, coreFunction0.getFunctionCode());
      assertEquals(10, expressionArray0.length);
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", string0);
      assertNotNull(string0);
      
      Float float0 = new Float((-805.8894573564));
      assertEquals((-805.88947F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)");
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", qName0.getName());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)");
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", qName0.getName());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      Step step0 = new Step(2495, nodeNameTest0, expressionArray1);
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", qName0.getName());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", nodeNameTest0.toString());
      assertEquals(2495, step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step0);
      
      String string1 = coreFunction0.getFunctionName();
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(2495, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(10, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals("unknownFunction2495()", string1);
      assertNotNull(string1);
      
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray0[2] = (Expression) constant0;
      expressionArray2[3] = (Expression) coreFunction0;
      Step step1 = new Step(2495, nodeNameTest0, expressionArray1);
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", qName0.getName());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("unknownFunction2495()(null, null, null, null, null, null, null, null, null, null)", nodeNameTest0.toString());
      assertEquals(2495, step1.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step1);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray2);
      assertEquals("", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionStartsWith((EvalContext) null);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray2);
      assertEquals(false, object1);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(unknownFunction2495()(null, null, -805.8894653320312, null, null, null, null, null, null, null), -805.8894653320312)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      QName qName0 = new QName("\"", "\"");
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreOperationMultiply0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("00", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("", object1);
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionFalse((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object2.equals((Object)boolean0));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(false, object2);
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(27, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = coreFunction1.computeContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4638), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4638), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionFloor((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4638), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4638), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4638), coreFunction0.getFunctionCode());
      assertTrue(object2.equals((Object)object1));
      assertEquals(1, expressionArray0.length);
      assertEquals("", object2);
      assertNotNull(object2);
      
      Object object3 = coreFunction0.functionSum((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4638), coreFunction0.getFunctionCode());
      assertTrue(object3.equals((Object)object0));
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object3);
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4638), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4638), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionFloor((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4638), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4638), coreFunction0.getFunctionCode());
      assertTrue(object1.equals((Object)object0));
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object1);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(boolean0);
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("~m");
      assertEquals("~m", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("~m", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "~m", locale0);
      assertEquals("~m", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("~m", qName0.getName());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, beanPointer0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("~m", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("~m", qName0.getName());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("~m", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("~m", qName0.getName());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("~m", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("~m", qName0.getName());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext1);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("~m", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("~m", qName0.getName());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("last");
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "pukD_Awk12X:AM,");
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("pukD_Awk12X:AM,", nodeNameTest0.getNamespaceURI());
      assertEquals("last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(1071, nodeNameTest0, expressionArray0);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("pukD_Awk12X:AM,", nodeNameTest0.getNamespaceURI());
      assertEquals("last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1071, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(111, nodeNameTest0, expressionArray0);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("pukD_Awk12X:AM,", nodeNameTest0.getNamespaceURI());
      assertEquals("last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(111, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(27, nodeNameTest0, expressionArray0);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("pukD_Awk12X:AM,", nodeNameTest0.getNamespaceURI());
      assertEquals("last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(27, step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(8, nodeNameTest0, expressionArray0);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("pukD_Awk12X:AM,", nodeNameTest0.getNamespaceURI());
      assertEquals("last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(8, step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(27, nodeNameTest0, expressionArray0);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("pukD_Awk12X:AM,", nodeNameTest0.getNamespaceURI());
      assertEquals("last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(27, step4.getAxis());
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, (String) null);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("last", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      
      Step step5 = new Step(23, nodeNameTest1, expressionArray0);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("last", nodeNameTest1.toString());
      assertEquals(23, step5.getAxis());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(534, nodeNameTest1, expressionArray0);
      assertEquals(534, step6.getAxis());
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("last", nodeNameTest1.toString());
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(3, nodeNameTest0, expressionArray0);
      assertEquals("last", qName0.getName());
      assertEquals("last", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(3, step7.getAxis());
      assertEquals("pukD_Awk12X:AM,", nodeNameTest0.getNamespaceURI());
      assertEquals("last", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(8, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(1071, expressionArray0);
      assertEquals(1071, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.VariablePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointer", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-471), processingInstructionTest0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointer", processingInstructionTest0.getTarget());
      assertEquals((-471), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-471), processingInstructionTest0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointer", processingInstructionTest0.getTarget());
      assertEquals((-471), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[3] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-471), expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-471), coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-471), expressionArray0);
      assertEquals((-471), coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(5, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertEquals((-471), coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(object0);
      
      // Undeclared exception!
      coreFunction0.functionSubstring(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("gn=!q*R#4z(!4Sl43 ");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)116;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-12), (byte) (-4), (byte) (-115), (byte)17, (byte)116}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(788.98454225474);
      assertEquals(788.98456F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) float0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertNotNull(variablePointerFactory0);
      
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(254, expressionArray0);
      assertEquals(254, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      assertEquals(254, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4625), expressionArray0);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionNumber((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(Double.NaN, object1);
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionString((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object2);
      assertNotNull(object2);
      
      Object object3 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object3);
      assertNotNull(object3);
      
      String string0 = coreFunction0.toString();
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(string0.equals((Object)object3));
      assertFalse(string0.equals((Object)object0));
      assertFalse(string0.equals((Object)object2));
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction-4625()('null')", string0);
      assertNotNull(string0);
      
      Object object4 = coreFunction0.functionNot((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object4);
      assertNotNull(object4);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("string-length()", string0);
      assertNotNull(string0);
      
      CoreFunction coreFunction1 = new CoreFunction(6144, expressionArray0);
      assertEquals(6144, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(15, expressionArray0);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(15, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("id()", string0);
      assertNotNull(string0);
      
      Float float0 = new Float((-805.8894573564));
      assertEquals((-805.88947F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("id()");
      assertEquals("id()", qName0.toString());
      assertEquals("id()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ":c-AUl1%6`e03");
      assertEquals("id()", qName0.toString());
      assertEquals("id()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("id()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":c-AUl1%6`e03", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2972);
      assertEquals(2972, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(4, nodeTypeTest0, (Expression[]) null);
      assertEquals(2972, nodeTypeTest0.getNodeType());
      assertEquals(4, step0.getAxis());
      assertNotNull(step0);
      
      String string1 = coreFunction0.getFunctionName();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(string1.equals((Object)string0));
      assertEquals("id", string1);
      assertNotNull(string1);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      assertEquals("id()", qName0.toString());
      assertEquals("id()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("id()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":c-AUl1%6`e03", nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals(2972, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(iterator0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Step step1 = new Step((-2534), nodeNameTest0, expressionArray0);
      assertEquals("id()", qName0.toString());
      assertEquals("id()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("id()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":c-AUl1%6`e03", nodeNameTest0.getNamespaceURI());
      assertEquals((-2534), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2534), (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2534), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4625), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertNotNull(object1);
      
      CoreFunction coreFunction1 = new CoreFunction((-4625), expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-4625), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      Object object2 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals("", object2);
      assertNotNull(object2);
      
      Object object3 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-4625), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object3.equals((Object)object0));
      assertTrue(object3.equals((Object)object2));
      assertTrue(object3.equals((Object)object1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("", object3);
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("LK[=^1oG[");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(19, processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(19, step0.getAxis());
      assertEquals(9, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreOperationAdd0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationAdd0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) constant0;
      Step step1 = new Step(3116, processingInstructionTest0, expressionArray1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(3116, step1.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1049, processingInstructionTest0, expressionArray0);
      assertEquals(1049, step2.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(19, processingInstructionTest0, expressionArray0);
      assertEquals(19, step3.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(0, processingInstructionTest0, expressionArray1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, step4.getAxis());
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      QName qName0 = new QName("LK[=^1oG[", ":c{`zdK0xpM:?");
      assertEquals("LK[=^1oG[", qName0.getPrefix());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", qName0.toString());
      assertEquals(":c{`zdK0xpM:?", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Cannot set value for xpath: ");
      assertEquals("LK[=^1oG[", qName0.getPrefix());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", qName0.toString());
      assertEquals(":c{`zdK0xpM:?", qName0.getName());
      assertEquals("Cannot set value for xpath: ", nodeNameTest0.getNamespaceURI());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step5 = new Step(1049, nodeNameTest0, expressionArray1);
      assertEquals("LK[=^1oG[", qName0.getPrefix());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", qName0.toString());
      assertEquals(":c{`zdK0xpM:?", qName0.getName());
      assertEquals("Cannot set value for xpath: ", nodeNameTest0.getNamespaceURI());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1049, step5.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertEquals(5, expressionArray1.length);
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("u");
      assertEquals("u", processingInstructionTest1.getTarget());
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      
      Expression[] expressionArray2 = new Expression[6];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[3] = (Expression) constant0;
      expressionArray2[4] = (Expression) coreOperationAdd0;
      expressionArray2[5] = (Expression) constant0;
      Step step6 = new Step((-50), processingInstructionTest1, expressionArray2);
      assertEquals((-50), step6.getAxis());
      assertEquals("u", processingInstructionTest1.getTarget());
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(6, expressionArray2.length);
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-50), nodeNameTest0, expressionArray0);
      assertEquals((-50), step7.getAxis());
      assertEquals("LK[=^1oG[", qName0.getPrefix());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", qName0.toString());
      assertEquals(":c{`zdK0xpM:?", qName0.getName());
      assertEquals("Cannot set value for xpath: ", nodeNameTest0.getNamespaceURI());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step((-50), processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-50), step8.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step2));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[4], expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(9, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(9, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray2[1], locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(9, stepArray0.length);
      assertEquals(6, expressionArray2.length);
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, coreOperationLessThanOrEqual0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(9, stepArray0.length);
      assertEquals(5, expressionArray1.length);
      assertEquals(6, expressionArray2.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("LK[=^1oG[", qName0.getPrefix());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", qName0.toString());
      assertEquals(":c{`zdK0xpM:?", qName0.getName());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      expressionArray0[6] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray1[4]);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[3], extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("LK[=^1oG[", qName0.getPrefix());
      assertEquals("LK[=^1oG[::c{`zdK0xpM:?", qName0.toString());
      assertEquals(":c{`zdK0xpM:?", qName0.getName());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[8] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(3116, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(3116, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1883), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1883), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Constant constant0 = new Constant("F6`(+{^Fi-Z;F");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, (Step[]) null);
      assertEquals(7, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      Constant constant0 = new Constant("4~n");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[2]);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4625), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionString((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object2);
      assertNotNull(object2);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertFalse(string0.equals((Object)object2));
      assertFalse(string0.equals((Object)object0));
      assertFalse(string0.equals((Object)object1));
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction-4625()('null')", string0);
      assertNotNull(string0);
      
      Object object3 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object3);
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(28, (Expression[]) null);
      assertEquals(28, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertEquals(28, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-3817), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3817), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathTypeConversionException");
      assertEquals("org.apache.commons.jxpath.JXPathTypeConversionException", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-3817), processingInstructionTest0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.JXPathTypeConversionException", processingInstructionTest0.getTarget());
      assertEquals((-3817), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[5], coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3817), coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray0.length);
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[6] = (Expression) coreOperationGreaterThan0;
      Step step1 = new Step((-3817), processingInstructionTest0, expressionArray1);
      assertEquals((-3817), step1.getAxis());
      assertEquals("org.apache.commons.jxpath.JXPathTypeConversionException", processingInstructionTest0.getTarget());
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals("org.apache.commons.jxpath.JXPathTypeConversionException", processingInstructionTest0.getTarget());
      assertNotNull(namespaceContext0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(namespaceContext0, (-1361), processingInstructionTest0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals("org.apache.commons.jxpath.JXPathTypeConversionException", processingInstructionTest0.getTarget());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNull(evalContext0);
      
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      String string0 = coreFunction1.toString();
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("name()", string0);
      assertNotNull(string0);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, expressionArray0[1]);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, expressionArray0[2]);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationNegate0, extensionFunction0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationSubtract1);
      
      expressionArray0[6] = (Expression) coreOperationSubtract1;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction1);
      
      expressionArray0[7] = (Expression) extensionFunction1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, expressionArray0[5]);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(coreOperationSubtract0.equals((Object)coreOperationSubtract1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[8] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1041), expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1041), coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(coreOperationSubtract0.equals((Object)coreOperationSubtract1));
      assertEquals(9, expressionArray0.length);
      assertNotSame(coreOperationSubtract0, coreOperationSubtract1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, expressionArray0[8], locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(9, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreOperationNegate0, beanPointer0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(coreOperationSubtract0.equals((Object)coreOperationSubtract1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(9, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreOperationSubtract0.equals((Object)coreOperationSubtract1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(9, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dw;EbX6k#8Il@fKX");
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = new ChildContext(rootContext0, processingInstructionTest0, true, true);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreOperationSubtract0.equals((Object)coreOperationSubtract1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(9, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(childContext0);
      
      // Undeclared exception!
      coreFunction0.functionFloor(childContext0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("&B|)H;5,");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-2480), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2480), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2480));
      assertEquals((-2480), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals((-2480), nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, false, nodeTypeTest0);
      assertEquals((-2480), nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      QName qName0 = new QName("substring-before");
      assertEquals("substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "&B|)H;5,");
      assertEquals("substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-before", nodeNameTest0.toString());
      assertEquals("&B|)H;5,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ParentContext parentContext0 = new ParentContext(ancestorContext0, nodeNameTest0);
      assertEquals((-2480), nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals("substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-before", nodeNameTest0.toString());
      assertEquals("&B|)H;5,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      Object object0 = coreFunction0.functionNumber(parentContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2480), coreFunction0.getFunctionCode());
      assertEquals((-2480), nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals("substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-before", nodeNameTest0.toString());
      assertEquals("&B|)H;5,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2499, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2499, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(109);
      assertEquals(109, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step[] stepArray0 = new Step[9];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4625), expressionArray0);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      String string0 = coreFunction0.toString();
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(string0.equals((Object)object0));
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction-4625()('null')", string0);
      assertNotNull(string0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, coreOperationNegate0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("r{eNmPVHCeeJP");
      assertNull(qName0.getPrefix());
      assertEquals("r{eNmPVHCeeJP", qName0.getName());
      assertEquals("r{eNmPVHCeeJP", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("r{eNmPVHCeeJP", qName0.getName());
      assertEquals("r{eNmPVHCeeJP", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion1);
      
      expressionArray0[4] = (Expression) coreOperationUnion1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, (Expression) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(coreOperationUnion0.equals((Object)coreOperationUnion1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, coreOperationNotEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(coreOperationUnion0.equals((Object)coreOperationUnion1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(417, expressionArray0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(417, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3362), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3362), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3362), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      String string0 = "round";
      QName qName0 = new QName("org.jdom.Comment", "round");
      assertEquals("org.jdom.Comment", qName0.getPrefix());
      assertEquals("round", qName0.getName());
      assertEquals("org.jdom.Comment:round", qName0.toString());
      assertNotNull(qName0);
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray1[1] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationUnion0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray0.length);
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction0);
      
      expressionArray1[3] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[1], expressionArray1[1]);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(nameAttributeTest0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[0], nameAttributeTest0);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[2], expressionArray1[0]);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray1[5] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray1[2], expressionArray1[1]);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      
      expressionArray1[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray1);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2608, (Expression[]) null);
      assertEquals(2608, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2608, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2608, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.isContextDependent();
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(boolean0);
      
      Object object0 = coreFunction2.functionName((EvalContext) null);
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals("", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(unknownFunction2608()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("\"descendant::\"", "\"descendant::\"");
      assertEquals("\"descendant::\"", qName0.getPrefix());
      assertEquals("\"descendant::\":\"descendant::\"", qName0.toString());
      assertEquals("\"descendant::\"", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("\"descendant::\"", qName0.getPrefix());
      assertEquals("\"descendant::\":\"descendant::\"", qName0.toString());
      assertEquals("\"descendant::\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("\"descendant::\"", qName0.getPrefix());
      assertEquals("\"descendant::\":\"descendant::\"", qName0.toString());
      assertEquals("\"descendant::\"", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction1);
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(83, expressionArray0);
      assertEquals(83, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\"descendant::\"");
      assertEquals("\"descendant::\"", qName0.getPrefix());
      assertEquals("\"descendant::\":\"descendant::\"", qName0.toString());
      assertEquals("\"descendant::\"", qName0.getName());
      assertEquals("\"descendant::\"", nodeNameTest0.getNamespaceURI());
      assertEquals("\"descendant::\":\"descendant::\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertEquals("\"descendant::\"", qName0.getPrefix());
      assertEquals("\"descendant::\":\"descendant::\"", qName0.toString());
      assertEquals("\"descendant::\"", qName0.getName());
      assertEquals("\"descendant::\"", nodeNameTest0.getNamespaceURI());
      assertEquals("\"descendant::\":\"descendant::\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2608, (Expression[]) null);
      assertEquals(2608, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2608, (Expression[]) null);
      assertEquals(2608, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(14, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(unknownFunction2608()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2107), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2107), (Expression[]) null);
      assertEquals((-2107), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertNotNull(variablePointerFactory0);
      
      QName qName0 = new QName("V_)nOCeR#m=dqE/h");
      assertNull(qName0.getPrefix());
      assertEquals("V_)nOCeR#m=dqE/h", qName0.toString());
      assertEquals("V_)nOCeR#m=dqE/h", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNull(qName0.getPrefix());
      assertEquals("V_)nOCeR#m=dqE/h", qName0.toString());
      assertEquals("V_)nOCeR#m=dqE/h", qName0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      NodePointer nodePointer0 = variablePointerFactory0.createNodePointer((NodePointer) nullPointer0, qName0, (Object) "V_)nOCeR#m=dqE/h");
      assertEquals(890, variablePointerFactory0.getOrder());
      assertNull(qName0.getPrefix());
      assertEquals("V_)nOCeR#m=dqE/h", qName0.toString());
      assertEquals("V_)nOCeR#m=dqE/h", qName0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      String string0 = (String)coreFunction1.functionName(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals((-2107), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2107()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("~m");
      assertNull(qName0.getPrefix());
      assertEquals("~m", qName0.getName());
      assertEquals("~m", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "~m", locale0);
      assertNull(qName0.getPrefix());
      assertEquals("~m", qName0.getName());
      assertEquals("~m", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertFalse(beanPointer0.isCollection());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-942), (Expression[]) null);
      assertEquals((-942), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2608, (Expression[]) null);
      assertEquals(2608, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2608, (Expression[]) null);
      assertEquals(2608, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.isContextDependent();
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(2608, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2608()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4625), expressionArray0);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      String string0 = coreFunction0.toString();
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(string0.equals((Object)object0));
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction-4625()('null')", string0);
      assertNotNull(string0);
      
      Object object1 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-4625), expressionArray0);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      String string0 = coreFunction0.toString();
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(string0.equals((Object)object0));
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction-4625()('null')", string0);
      assertNotNull(string0);
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertEquals((-4625), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-2094), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2094), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      QName qName0 = new QName("V<?%h");
      assertEquals("V<?%h", qName0.toString());
      assertEquals("V<?%h", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction1, locale0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals("V<?%h", qName0.toString());
      assertEquals("V<?%h", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreFunction1, beanPointer0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("V<?%h", qName0.toString());
      assertEquals("V<?%h", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("V<?%h", qName0.toString());
      assertEquals("V<?%h", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      QName qName1 = new QName("V<?%h", "");
      assertEquals("V<?%h:", qName1.toString());
      assertEquals("V<?%h", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("V<?%h", qName0.toString());
      assertEquals("V<?%h", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("V<?%h:", qName1.toString());
      assertEquals("V<?%h", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(qName1, qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeTypeTest0, true, true);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2608, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2608, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Constant constant0 = new Constant("F6`(+{^Fi-Z;F");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1110), (Expression[]) null);
      assertEquals((-1110), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(21, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(21, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.isContextDependent();
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(21, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(boolean0);
      
      Object object0 = coreFunction2.computeValue((EvalContext) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(21, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      QName qName0 = new QName("F6`(+{^Fi-Z;F");
      assertEquals("F6`(+{^Fi-Z;F", qName0.toString());
      assertEquals("F6`(+{^Fi-Z;F", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "F6`(+{^Fi-Z;F");
      assertEquals("F6`(+{^Fi-Z;F", qName0.toString());
      assertEquals("F6`(+{^Fi-Z;F", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("F6`(+{^Fi-Z;F", nodeNameTest0.toString());
      assertEquals("F6`(+{^Fi-Z;F", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("F6`(+{^Fi-Z;F", qName0.toString());
      assertEquals("F6`(+{^Fi-Z;F", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("F6`(+{^Fi-Z;F", nodeNameTest0.toString());
      assertEquals("F6`(+{^Fi-Z;F", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 2494;
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      Step[] stepArray0 = new Step[2];
      NodeTest nodeTest0 = null;
      Step step0 = new Step((-600), (NodeTest) null, expressionArray0);
      assertEquals((-600), step0.getAxis());
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1618, (NodeTest) null, expressionArray0);
      assertEquals(1618, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(1618, expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(1618, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg2();
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(1618, coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertSame(coreOperationAdd1, coreOperationAdd0);
      assertNotNull(coreOperationAdd1);
      
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd1, coreOperationAdd1);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(1618, coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], coreOperationUnion0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, expressionArray0[3]);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction((-600), expressionArray0);
      assertEquals((-600), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("substring-after");
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      QName qName1 = new QName("", "");
      assertEquals(":", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      assertEquals(":", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(32768, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(32768, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-942), expressionArray0);
      assertEquals((-942), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(32768, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertTrue(boolean0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4010);
      assertEquals(4010, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(1410, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(1410, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      QName qName0 = new QName(" yw@CcxEgq.wF");
      assertEquals(" yw@CcxEgq.wF", qName0.toString());
      assertEquals(" yw@CcxEgq.wF", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertEquals(" yw@CcxEgq.wF", qName0.toString());
      assertEquals(" yw@CcxEgq.wF", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(" yw@CcxEgq.wF", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      assertEquals(" yw@CcxEgq.wF", qName0.toString());
      assertEquals(" yw@CcxEgq.wF", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(" yw@CcxEgq.wF", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, nodeNameTest0);
      assertEquals(" yw@CcxEgq.wF", qName0.toString());
      assertEquals(" yw@CcxEgq.wF", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(" yw@CcxEgq.wF", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3283);
      assertEquals(3283, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(3283, expressionArray0);
      assertEquals(3283, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(3283, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction0.computeValue(predicateContext0);
      assertEquals(3283, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      QName qName1 = new QName("PYgR.YFkWCANIPv");
      assertNull(qName1.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName1.getName());
      assertEquals("PYgR.YFkWCANIPv", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(variableReference0);
      
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction1.functionLast(namespaceContext0);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(1, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.compute(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3348), expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3348), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      QName qName0 = new QName("\"", "\"");
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"");
      assertEquals("\"", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[6];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, coreOperationMod0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreOperationNegate0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationNegate0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[1], extensionFunction0);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction1);
      
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual1, expressionArray0[3]);
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionStartsWith(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2494()(null)", string0);
      assertNotNull(string0);
      
      CoreFunction coreFunction1 = new CoreFunction(101, expressionArray0);
      assertEquals(101, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(88, expressionArray0);
      assertEquals(88, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 5;
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-942), (Expression[]) null);
      assertEquals((-942), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      Double double0 = new Double((-120.144));
      assertEquals((-120.144), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, constant0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("PYgR.YFkWCANIPv");
      assertNull(qName0.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName0.getName());
      assertEquals("PYgR.YFkWCANIPv", qName0.toString());
      assertNotNull(qName0);
      
      QName qName1 = new QName("PYgR.YFkWCANIPv");
      assertEquals("PYgR.YFkWCANIPv", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName1.toString());
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertEquals("PYgR.YFkWCANIPv", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName1.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(variableReference0);
      
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(1764, processingInstructionTest0, (Expression[]) null);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1764, step0.getAxis());
      assertNotNull(step0);
      
      QName qName0 = new QName("<");
      assertNull(qName0.getPrefix());
      assertEquals("<", qName0.toString());
      assertEquals("<", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNull(qName0.getPrefix());
      assertEquals("<", qName0.toString());
      assertEquals("<", qName0.getName());
      assertEquals("<", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step1 = new Step(10, nodeNameTest0, (Expression[]) null);
      assertNull(qName0.getPrefix());
      assertEquals("<", qName0.toString());
      assertEquals("<", qName0.getName());
      assertEquals("<", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(10, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationOr0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertEquals(19, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(19, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("string", "string");
      assertEquals("string", qName0.getName());
      assertEquals("string", qName0.getPrefix());
      assertEquals("string:string", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      assertEquals("string", qName0.getName());
      assertEquals("string", qName0.getPrefix());
      assertEquals("string:string", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("string:string", nodeNameTest0.toString());
      assertEquals("string", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(3, nodeNameTest0, expressionArray0);
      assertEquals("string", qName0.getName());
      assertEquals("string", qName0.getPrefix());
      assertEquals("string:string", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("string:string", nodeNameTest0.toString());
      assertEquals("string", nodeNameTest0.getNamespaceURI());
      assertEquals(3, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      String string0 = step0.toString();
      assertEquals("string", qName0.getName());
      assertEquals("string", qName0.getPrefix());
      assertEquals("string:string", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("string:string", nodeNameTest0.toString());
      assertEquals("string", nodeNameTest0.getNamespaceURI());
      assertEquals(3, step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertEquals("parent::string:string[null]", string0);
      assertNotNull(string0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 3;
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[0], expressionArray1[0]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray1);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, expressionArray0[1]);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationMod0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[3], expressionArray0[1]);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[4] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1), nodeTypeTest0, expressionArray0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals((-1), step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.computeValue(predicateContext0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = (-1);
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("LI1");
      assertEquals("LI1", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("LI1", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("LI1", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("LI1", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2494()(null)", string0);
      assertNotNull(string0);
      
      Float float0 = new Float((-805.8894573564));
      assertEquals((-805.88947F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("unknownFunction2494()(null)");
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2494()(null)", qName0.getName());
      assertEquals("unknownFunction2494()(null)", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction2494()(null)");
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2494()(null)", qName0.getName());
      assertEquals("unknownFunction2494()(null)", qName0.toString());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      Step step0 = new Step(2494, nodeNameTest0, expressionArray1);
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2494()(null)", qName0.getName());
      assertEquals("unknownFunction2494()(null)", qName0.toString());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2494, step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step0);
      
      String string1 = step0.toString();
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2494()(null)", qName0.getName());
      assertEquals("unknownFunction2494()(null)", qName0.toString());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2494, step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals("UNKNOWN::unknownFunction2494()(null)[unknownFunction2494()(null)][-805.8894653320312]", string1);
      assertNotNull(string1);
      
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) constant0;
      expressionArray2[2] = (Expression) constant0;
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2494()(null)", qName0.getName());
      assertEquals("unknownFunction2494()(null)", qName0.toString());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(childContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeNameTest0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2494()(null)", qName0.getName());
      assertEquals("unknownFunction2494()(null)", qName0.toString());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(attributeContext0);
      
      Iterator iterator0 = constant0.iterate(attributeContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2494()(null)", qName0.getName());
      assertEquals("unknownFunction2494()(null)", qName0.toString());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(iterator0);
      
      expressionArray2[3] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[9];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      Step step1 = new Step(2494, nodeNameTest0, expressionArray1);
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction2494()(null)", qName0.getName());
      assertEquals("unknownFunction2494()(null)", qName0.toString());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction2494()(null)", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2494, step1.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step1);
      
      stepArray0[3] = step1;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      stepArray0[7] = step0;
      stepArray0[8] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray2, stepArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertEquals(4, expressionArray2.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray2);
      assertEquals("", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      int int0 = (-2909);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2909));
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(701, nodeTypeTest0, expressionArray0);
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertEquals(701, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray1);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2937));
      assertEquals((-2937), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = new Step((-2937), nodeTypeTest0, expressionArray1);
      assertEquals((-2937), nodeTypeTest0.getNodeType());
      assertEquals((-2937), step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step0);
      
      Short short0 = new Short((short)1999);
      assertEquals((short)1999, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction((-2937), expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-2937), coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertEquals("substring()", string0);
      assertNotNull(string0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertEquals(0, int0);
      
      coreFunction0.args = expressionArray0;
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("substring()", "substring()");
      assertEquals("substring()", qName0.getName());
      assertEquals("substring()", qName0.getPrefix());
      assertEquals("substring():substring()", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("substring()", qName0.getName());
      assertEquals("substring()", qName0.getPrefix());
      assertEquals("substring():substring()", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = null;
      try {
        jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: substring():substring()
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(115, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(115, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction115()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      String string0 = coreFunction1.toString();
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("concat()", string0);
      assertNotNull(string0);
      
      Object object0 = coreFunction1.functionTrue((EvalContext) null);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2937));
      assertEquals((-2937), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = new Step((-2937), nodeTypeTest0, expressionArray1);
      assertEquals((-2937), nodeTypeTest0.getNodeType());
      assertEquals((-2937), step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step0);
      
      Short short0 = new Short((short)1999);
      assertEquals((short)1999, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Step[] stepArray0 = new Step[4];
      String string0 = step0.toString();
      assertEquals((-2937), nodeTypeTest0.getNodeType());
      assertEquals((-2937), step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals("UNKNOWN::UNKNOWN()[null][null]", string0);
      assertNotNull(string0);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2494()(null)", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName("string", "string");
      assertEquals("string", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("string:string", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(88, expressionArray0);
      assertEquals(88, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("true");
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("true", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(14, nodeNameTest0, expressionArray0);
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("true", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(14, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      
      Short short0 = new Short((short)1999);
      assertEquals((short)1999, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      String string0 = step0.toString();
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("true", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(14, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertEquals("UNKNOWN::true", string0);
      assertNotNull(string0);
      
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("\"", "\"");
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step[] stepArray0 = new Step[6];
      Step step1 = new Step(17, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(17, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      Step step2 = new Step((-3934), nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-3934), step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      stepArray0[3] = step0;
      Step step3 = new Step((-3934), nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-3934), step3.getAxis());
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      
      stepArray0[4] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, (Expression[]) null, stepArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction(49, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(49, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationMultiply0);
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = null;
      QName qName0 = new QName("\"", "\"");
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      int int0 = 20;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step[] stepArray0 = new Step[9];
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[0] = step1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreOperationMultiply0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("0", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionConcat((EvalContext) null);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertFalse(object1.equals((Object)object0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("00", object1);
      assertNotNull(object1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationSubtract0);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(68);
      assertEquals(68, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step[] stepArray0 = new Step[9];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(47, (Expression[]) null);
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(9, expressionArray0.length);
      assertNotNull(nodeSetContext0);
      
      String string0 = nodeSetContext0.toString();
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(9, expressionArray0.length);
      assertEquals("Empty expression context", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      coreFunction1.functionConcat(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Th 'L");
      assertEquals("Th 'L", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(74, processingInstructionTest0, expressionArray0);
      assertEquals("Th 'L", processingInstructionTest0.getTarget());
      assertEquals(74, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(28, processingInstructionTest0, expressionArray0);
      assertEquals("Th 'L", processingInstructionTest0.getTarget());
      assertEquals(28, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray1[1] = (Expression) coreOperationOr0;
      Step step2 = new Step(29, processingInstructionTest0, expressionArray1);
      assertEquals("Th 'L", processingInstructionTest0.getTarget());
      assertEquals(29, step2.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(28);
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step3 = new Step((-1542), nodeTypeTest0, expressionArray0);
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertEquals((-1542), step3.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(29, nodeTypeTest0, expressionArray0);
      assertEquals(29, step4.getAxis());
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(52, processingInstructionTest0, expressionArray0);
      assertEquals("Th 'L", processingInstructionTest0.getTarget());
      assertEquals(52, step5.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      QName qName0 = new QName("Th 'L");
      assertEquals("Th 'L", qName0.toString());
      assertEquals("Th 'L", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("Th 'L", qName0.toString());
      assertEquals("Th 'L", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Th 'L", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray2 = new Expression[6];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, expressionArray1[1]);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray2[0] = (Expression) coreOperationGreaterThan0;
      expressionArray2[1] = (Expression) coreOperationOr0;
      expressionArray2[2] = (Expression) coreOperationAdd0;
      expressionArray2[3] = (Expression) coreOperationAdd0;
      expressionArray2[4] = (Expression) coreOperationOr0;
      expressionArray2[5] = (Expression) coreOperationAdd0;
      Step step6 = new Step(29, nodeNameTest0, expressionArray2);
      assertEquals("Th 'L", qName0.toString());
      assertEquals("Th 'L", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Th 'L", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(29, step6.getAxis());
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertEquals(6, expressionArray2.length);
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(7, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray2[5]);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(7, stepArray0.length);
      assertEquals(6, expressionArray2.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray1 = new Step[6];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step4;
      stepArray1[1] = step1;
      stepArray1[2] = step3;
      stepArray1[3] = step1;
      stepArray1[4] = step4;
      stepArray1[5] = step2;
      LocationPath locationPath1 = new LocationPath(true, stepArray1);
      assertTrue(locationPath1.isAbsolute());
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(6, stepArray1.length);
      assertNotNull(locationPath1);
      
      expressionArray0[1] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(74, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(156, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(156, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "9L$'qPsoP";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9L$'qPsoP");
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(156);
      assertEquals(156, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertEquals(156, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      Object object0 = coreFunction0.functionNull((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(156, coreFunction0.getFunctionCode());
      assertNull(object0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeTypeTest0);
      assertEquals(156, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeTypeTest0);
      assertEquals(156, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        parentContext0.nextSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer(13);
      assertEquals(13, (int)integer0);
      assertNotNull(integer0);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(18, (Expression[]) null);
      assertEquals(18, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction((-3989), (Expression[]) null);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals((-3989), coreFunction3.getFunctionCode());
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertNotNull(coreFunction3);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("namespace-uri");
      assertEquals("namespace-uri", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertEquals("namespace-uri", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, coreFunction2);
      assertEquals(18, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals("namespace-uri", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, processingInstructionTest0);
      assertEquals("namespace-uri", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      Double double0 = new Double((-120.144423001003));
      assertEquals((-120.144423001003), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, constant0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("PYgR.YFkWCANIPv");
      assertEquals("PYgR.YFkWCANIPv", qName0.toString());
      assertEquals("PYgR.YFkWCANIPv", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      QName qName1 = new QName("");
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variableReference0);
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("\"", "\"");
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step[] stepArray0 = new Step[6];
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[0] = step1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreOperationMultiply0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("00", object0);
      assertNotNull(object0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationSubtract0);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(68);
      assertEquals(68, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(30, nodeTypeTest0, expressionArray0);
      assertEquals(68, nodeTypeTest0.getNodeType());
      assertEquals(30, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[9];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2909));
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = new Step((-2909), nodeTypeTest0, expressionArray1);
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertEquals((-2909), step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step0);
      
      Short short0 = new Short((short)1999);
      assertEquals((short)1999, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Step[] stepArray0 = new Step[4];
      String string0 = step0.toString();
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertEquals((-2909), step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals("UNKNOWN::UNKNOWN()[null][null]", string0);
      assertNotNull(string0);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(68);
      assertEquals(68, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(30, nodeTypeTest0, expressionArray0);
      assertEquals(68, nodeTypeTest0.getNodeType());
      assertEquals(30, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[9];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      stepArray0[7] = step0;
      stepArray0[8] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UjXq!K4k5|@");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1), nodeTypeTest0, expressionArray0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals((-1), step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      int int0 = 1;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath1);
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, variableReference0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      QName qName0 = new QName("\"", "\"");
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step[] stepArray0 = new Step[6];
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      Step step2 = new Step((-3934), nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-3934), step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      stepArray0[3] = step0;
      Step step3 = new Step((-3934), nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-3934), step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      
      stepArray0[4] = step3;
      stepArray0[4] = step0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreFunction0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreOperationLessThan0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(predicateContext0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tt{?");
      assertFalse(boolean0);
      
      QName qName0 = new QName((String) null, "");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[3];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray1, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray1);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(namespaceContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      QName qName0 = new QName("\"", "\"");
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step[] stepArray0 = new Step[6];
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      Step step2 = new Step((-3934), nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-3934), step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      stepArray0[3] = step0;
      Step step3 = new Step((-3934), nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-3934), step3.getAxis());
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      
      stepArray0[4] = step3;
      stepArray0[4] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, (Expression[]) null, stepArray0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction(49, (Expression[]) null);
      assertEquals(49, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationMultiply0);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("b|jN,cGOtBj");
      assertEquals("b|jN,cGOtBj", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2909));
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      expressionArray1[0] = (Expression) coreFunction0;
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) coreFunction0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray2);
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(3, expressionArray2.length);
      assertNotNull(extensionFunction0);
      
      expressionArray1[1] = (Expression) extensionFunction0;
      Step step0 = new Step(465, nodeTypeTest0, expressionArray1);
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertEquals(465, step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray2, stepArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(5, expressionArray0.length);
      assertEquals(3, expressionArray2.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction(449, expressionArray2);
      assertEquals(449, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(3, expressionArray2.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UjXq!K4k5|@");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(2, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(28);
      assertEquals(28, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      int int0 = 55;
      Step step1 = new Step(55, nodeTypeTest1, expressionArray0);
      assertEquals(28, nodeTypeTest1.getNodeType());
      assertEquals(55, step1.getAxis());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      
      CoreFunction coreFunction0 = new CoreFunction((-272), expressionArray0);
      assertEquals((-272), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      assertEquals((-272), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      assertEquals((-272), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      assertEquals((-272), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fM0m%K]%c", "");
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2225, expressionArray0);
      assertEquals(2225, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-1481), expressionArray0);
      assertEquals((-1481), coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      assertEquals(2225, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, processingInstructionTest0);
      assertEquals(2225, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-267));
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      CoreFunction coreFunction0 = new CoreFunction((-267), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-267), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-267), coreFunction0.getFunctionCode());
      assertEquals("unknownFunction-267()()", string0);
      assertNotNull(string0);
      
      QName qName1 = new QName("3!p0VI[fH", ";2DM");
      assertEquals("3!p0VI[fH:;2DM", qName1.toString());
      assertEquals(";2DM", qName1.getName());
      assertEquals("3!p0VI[fH", qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, (String) null);
      assertEquals("3!p0VI[fH:;2DM", qName1.toString());
      assertEquals(";2DM", qName1.getName());
      assertEquals("3!p0VI[fH", qName1.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("3!p0VI[fH:;2DM", nodeNameTest0.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-267), coreFunction0.getFunctionCode());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-267), coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertEquals(4, int0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("position", "position");
      assertEquals("position", qName0.getName());
      assertEquals("position", qName0.getPrefix());
      assertEquals("position:position", qName0.toString());
      assertNotNull(qName0);
      
      QName qName1 = new QName("position");
      assertEquals("position", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("position", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
      assertEquals("position", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("position", qName1.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-419));
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(10, nodeTypeTest0, expressionArray0);
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertEquals(10, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath1);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      assertNotNull(string0);
      
      expressionArray0[2] = (Expression) expressionPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      boolean boolean0 = coreOperationOr0.computeContextDependent();
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(boolean0);
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertNotNull(attributeContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) attributeContext0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("UNKNOWN()");
      assertEquals("UNKNOWN()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN()", qName0.toString());
      assertNotNull(qName0);
      
      ParentContext parentContext0 = new ParentContext(attributeContext0, nodeTypeTest0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, parentContext0, locale0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals("UNKNOWN()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN()", qName0.toString());
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[2], beanPointer0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("UNKNOWN()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN()", qName0.toString());
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(4, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newChildNodePointer(beanPointer0, qName0, expressionArray0[1]);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals("UNKNOWN()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN()", qName0.toString());
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(1, beanPointer1.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertEquals(4, expressionArray0.length);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer1);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("UNKNOWN()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN()", qName0.toString());
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(1, beanPointer1.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertEquals(4, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("UNKNOWN()", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UNKNOWN()", qName0.toString());
      assertEquals((-419), nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(1, beanPointer1.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertEquals(4, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(beanPointer1, beanPointer0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      
      // Undeclared exception!
      coreFunction0.functionSum(rootContext1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      QName qName0 = new QName("\"", "\"");
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(13, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      Step[] stepArray0 = new Step[6];
      Step step1 = new Step(20, nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(20, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      Step step2 = new Step((-3934), nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-3934), step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      stepArray0[3] = step0;
      Step step3 = new Step((-3934), nodeNameTest0, (Expression[]) null);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-3934), step3.getAxis());
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      
      stepArray0[4] = step3;
      stepArray0[5] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, (Expression[]) null, stepArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction(49, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(49, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationMultiply0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("\":\"", qName0.toString());
      assertEquals("\"", qName0.getName());
      assertEquals("\"", qName0.getPrefix());
      assertEquals("\":\"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction49()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-267));
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-267), nodeTypeTest0, (Expression[]) null);
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertEquals((-267), step0.getAxis());
      assertNotNull(step0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-267));
      assertEquals((-267), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      QName qName1 = new QName("org.apache.commons.jxpath.ri.compiler.Step", "Cannot compare pointers that do not belong to the same tree: '");
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step:Cannot compare pointers that do not belong to the same tree: '", qName1.toString());
      assertEquals("Cannot compare pointers that do not belong to the same tree: '", qName1.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step", qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariableReference variableReference1 = new VariableReference(qName1);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step:Cannot compare pointers that do not belong to the same tree: '", qName1.toString());
      assertEquals("Cannot compare pointers that do not belong to the same tree: '", qName1.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step", qName1.getPrefix());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[7];
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      Step step1 = new Step((-292), nodeTypeTest0, (Expression[]) null);
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertEquals((-292), step1.getAxis());
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[6] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference1, (Expression[]) null, stepArray0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step:Cannot compare pointers that do not belong to the same tree: '", qName1.toString());
      assertEquals("Cannot compare pointers that do not belong to the same tree: '", qName1.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step", qName1.getPrefix());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals(7, stepArray0.length);
      assertNotNull(expressionPath0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest1);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals((-267), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray1);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(47, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction47()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      Double double0 = new Double((-120.144423001003));
      assertEquals((-120.144423001003), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, constant0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("PYgR.YFkWCANIPv");
      assertNull(qName0.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName0.getName());
      assertEquals("PYgR.YFkWCANIPv", qName0.toString());
      assertNotNull(qName0);
      
      QName qName1 = new QName("");
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variableReference0);
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("node()");
      assertEquals("node()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("node()", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("node()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("node()", qName0.getName());
      assertEquals("node()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertEquals("node()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("node()", qName0.getName());
      assertEquals("node()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-267));
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-267), nodeTypeTest0, (Expression[]) null);
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertEquals((-267), step0.getAxis());
      assertNotNull(step0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-267));
      assertEquals((-267), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      QName qName1 = new QName("org.apache.commons.jxpath.ri.compiler.Step", "Cannot compare pointers that do not belong to the same tree: '");
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step", qName1.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step:Cannot compare pointers that do not belong to the same tree: '", qName1.toString());
      assertEquals("Cannot compare pointers that do not belong to the same tree: '", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariableReference variableReference1 = new VariableReference(qName1);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step", qName1.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step:Cannot compare pointers that do not belong to the same tree: '", qName1.toString());
      assertEquals("Cannot compare pointers that do not belong to the same tree: '", qName1.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[7];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      Step step1 = new Step((-292), nodeTypeTest0, (Expression[]) null);
      assertEquals((-292), step1.getAxis());
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertFalse(step1.equals((Object)step0));
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertNotNull(step1);
      
      stepArray0[6] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference1, (Expression[]) null, stepArray0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step", qName1.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step:Cannot compare pointers that do not belong to the same tree: '", qName1.toString());
      assertEquals("Cannot compare pointers that do not belong to the same tree: '", qName1.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals(7, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2147483647), (Expression[]) null);
      assertEquals((-2147483647), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, variableReference1);
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step", qName1.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Step:Cannot compare pointers that do not belong to the same tree: '", qName1.toString());
      assertEquals("Cannot compare pointers that do not belong to the same tree: '", qName1.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction2 = new CoreFunction(0, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(92, expressionArray0);
      assertEquals(92, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(47, (Expression[]) null);
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(82, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(82, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fM0m%K]%c", "");
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      CoreFunction coreFunction1 = new CoreFunction(47, (Expression[]) null);
      assertEquals(47, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(18, expressionArray0);
      assertEquals(18, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(18, (Expression[]) null);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(18, coreFunction3.getFunctionCode());
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertNotNull(coreFunction3);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertEquals("[5fM0m%K]%c:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertEquals("[5fM0m%K]%c:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, false);
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertEquals("[5fM0m%K]%c:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(precedingOrFollowingContext0, false, nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertEquals("[5fM0m%K]%c:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertEquals("[5fM0m%K]%c:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      Object object0 = coreFunction0.functionString(ancestorContext0);
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("[5fM0m%K]%c:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction3));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction3);
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("PYgR.YFkWCANIPv");
      assertNull(qName0.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName0.getName());
      assertEquals("PYgR.YFkWCANIPv", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(qName0.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName0.getName());
      assertEquals("PYgR.YFkWCANIPv", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(47, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      PredicateContext predicateContext1 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext1.getDocumentOrder());
      assertEquals(0, predicateContext1.getPosition());
      assertFalse(predicateContext1.isChildOrderingRequired());
      assertFalse(predicateContext1.equals((Object)predicateContext0));
      assertNotNull(predicateContext1);
      
      Object object0 = coreFunction0.functionFalse(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.equals((Object)predicateContext1));
      assertNotSame(predicateContext0, predicateContext1);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      CoreFunction coreFunction1 = new CoreFunction(47, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(47, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(18, expressionArray0);
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(18, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(41, expressionArray0);
      assertEquals(41, coreFunction3.getFunctionCode());
      assertEquals(9, coreFunction3.getArgumentCount());
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction3);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/N[O%?h\"W\"C/#");
      assertEquals("/N[O%?h\"W\"C/#", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertEquals("/N[O%?h\"W\"C/#", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, coreFunction3);
      assertEquals(41, coreFunction3.getFunctionCode());
      assertEquals(9, coreFunction3.getArgumentCount());
      assertEquals("/N[O%?h\"W\"C/#", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, processingInstructionTest0);
      assertEquals(41, coreFunction3.getFunctionCode());
      assertEquals(9, coreFunction3.getArgumentCount());
      assertEquals("/N[O%?h\"W\"C/#", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(47, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray1 = new Expression[27];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray1);
      assertEquals(22, coreFunction2.getFunctionCode());
      assertEquals(27, coreFunction2.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(27, expressionArray1.length);
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      QName qName0 = new QName("[5fZ0m%%]%c", "[5fZ0m%%]%c");
      assertEquals("[5fZ0m%%]%c:[5fZ0m%%]%c", qName0.toString());
      assertEquals("[5fZ0m%%]%c", qName0.getName());
      assertEquals("[5fZ0m%%]%c", qName0.getPrefix());
      assertNotNull(qName0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(47, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(15, (Expression[]) null);
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionContains(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1246), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1246), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer((-1246));
      assertEquals((-1246), (int)integer0);
      assertNotNull(integer0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1246), expressionArray0);
      assertEquals((-1246), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "[5fM0m%K]%c");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("[5fM0m%K]%c", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction3 = new CoreFunction((-1246), (Expression[]) null);
      assertEquals((-1246), coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertNotNull(coreFunction3);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction3.compute(predicateContext0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals((-1246), coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction1);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, (Expression) null);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationNegate0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationNegate0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      QName qName0 = new QName("node()", "substring-after");
      assertEquals("node()", qName0.getPrefix());
      assertEquals("node():substring-after", qName0.toString());
      assertEquals("substring-after", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("node()", qName0.getPrefix());
      assertEquals("node():substring-after", qName0.toString());
      assertEquals("substring-after", qName0.getName());
      assertEquals("node():substring-after", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeNameTest0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("node()", qName0.getPrefix());
      assertEquals("node():substring-after", qName0.toString());
      assertEquals("substring-after", qName0.getName());
      assertEquals("node():substring-after", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertNotNull(selfContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, true, nodeNameTest0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("node()", qName0.getPrefix());
      assertEquals("node():substring-after", qName0.toString());
      assertEquals("substring-after", qName0.getName());
      assertEquals("node():substring-after", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      EvalContext evalContext0 = null;
      int int0 = 47;
      CoreFunction coreFunction0 = new CoreFunction((-2640), expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-2640), coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2640()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(47, (Expression[]) null);
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(82, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(82, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("starts-with");
      assertEquals("starts-with", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertEquals("starts-with", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLast(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationUnion0, constant0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest1);
      
      expressionArray1[1] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction(4092, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4092, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, expressionArray0[0]);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4092, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreFunction coreFunction1 = new CoreFunction(2140, expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2140, coreFunction1.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreOperationUnion1);
      
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(1, expressionArray2.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fM0m%K]%c", "");
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      CoreFunction coreFunction1 = new CoreFunction(47, (Expression[]) null);
      assertEquals(47, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(18, expressionArray0);
      assertEquals(18, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "0x171`");
      assertEquals("[5fM0m%K]%c:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("[5fM0m%K]%c", qName0.getPrefix());
      assertEquals("[5fM0m%K]%c:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("0x171`", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction3 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction3.getFunctionCode());
      assertEquals(9, coreFunction3.getArgumentCount());
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction3);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
      assertEquals((-257), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals((-257), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNull(expression0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-257()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      QName qName0 = new QName("[5fZ0m%%]%c", "[5fZ0m%%]%c");
      assertEquals("[5fZ0m%%]%c", qName0.getPrefix());
      assertEquals("[5fZ0m%%]%c", qName0.getName());
      assertEquals("[5fZ0m%%]%c:[5fZ0m%%]%c", qName0.toString());
      assertNotNull(qName0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      QName qName0 = new QName("[5fZ0m%%]%c", "[5fZ0m%%]%c");
      assertEquals("[5fZ0m%%]%c", qName0.getName());
      assertEquals("[5fZ0m%%]%c", qName0.getPrefix());
      assertEquals("[5fZ0m%%]%c:[5fZ0m%%]%c", qName0.toString());
      assertNotNull(qName0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationUnion0, constant0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest1);
      
      expressionArray1[1] = (Expression) nameAttributeTest1;
      EvalContext evalContext0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("PYgR.YFkWCANIPv");
      assertNull(qName0.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName0.getName());
      assertEquals("PYgR.YFkWCANIPv", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(qName0.getPrefix());
      assertEquals("PYgR.YFkWCANIPv", qName0.getName());
      assertEquals("PYgR.YFkWCANIPv", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JXPathContext jXPathContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2494()(null)", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+,SH9f[pN2up7*");
      assertFalse(boolean0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationUnion0, coreOperationSubtract0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationSubtract1);
      
      CoreFunction coreFunction1 = new CoreFunction(2494, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(2494, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UjXq!K4k5|@");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1), nodeTypeTest0, expressionArray0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals((-1), step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-267));
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1), nodeTypeTest0, (Expression[]) null);
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertEquals((-1), step0.getAxis());
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-267));
      assertEquals((-267), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      expressionArray0[6] = (Expression) variableReference0;
      expressionArray0[7] = (Expression) variableReference0;
      expressionArray0[8] = (Expression) variableReference0;
      Step step1 = new Step((-2909), nodeTypeTest1, expressionArray0);
      assertEquals((-2909), step1.getAxis());
      assertEquals((-267), nodeTypeTest1.getNodeType());
      assertFalse(step1.equals((Object)step0));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, (Expression[]) null, stepArray0);
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[3]);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      assertEquals((-267), nodeTypeTest0.getNodeType());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-s#Y;");
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(10, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      boolean boolean0 = step0.isContextDependent();
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(10, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(0, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step2 = new Step(24, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(24, step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step2);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(40);
      assertEquals(40, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      Step step3 = new Step(18, nodeTypeTest1, expressionArray0);
      assertEquals(40, nodeTypeTest1.getNodeType());
      assertEquals(18, step3.getAxis());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step3);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3200), expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, processingInstructionTest0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction1.computeValue(predicateContext0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3200), coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("-s#Y;", "O^_f]us+vQOX#/d");
      assertEquals("-s#Y;", qName0.getPrefix());
      assertEquals("O^_f]us+vQOX#/d", qName0.getName());
      assertEquals("-s#Y;:O^_f]us+vQOX#/d", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("-s#Y;", qName0.getPrefix());
      assertEquals("O^_f]us+vQOX#/d", qName0.getName());
      assertEquals("-s#Y;:O^_f]us+vQOX#/d", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1483));
      assertEquals((-1483), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1483), nodeTypeTest0, expressionArray0);
      assertEquals((-1483), nodeTypeTest0.getNodeType());
      assertEquals((-1483), step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertEquals("-s#Y;", qName0.getPrefix());
      assertEquals("O^_f]us+vQOX#/d", qName0.getName());
      assertEquals("-s#Y;:O^_f]us+vQOX#/d", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(0, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      ExpressionPath expressionPath1 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(0, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      EvalContext evalContext0 = expressionPath1.createContextForStep((EvalContext) null, (-1507), processingInstructionTest0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(0, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionPath1, expressionPath0);
      assertNull(evalContext0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-1507));
      assertEquals((-1507), nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationUnion0, constant0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest1);
      
      expressionArray1[1] = (Expression) nameAttributeTest1;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qY3");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-257), expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-257), coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-257), coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNull(expression0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(788.98454225474);
      assertEquals(788.98456F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) float0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertNotNull(variablePointerFactory0);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\" VwCN&~");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("\" VwCN&~", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      assertEquals(266, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(266, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNull(expression0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      QName qName0 = new QName("[5fZ0m%%]%c", "[5fZ0m%%]%c");
      assertEquals("[5fZ0m%%]%c", qName0.getName());
      assertEquals("[5fZ0m%%]%c", qName0.getPrefix());
      assertEquals("[5fZ0m%%]%c:[5fZ0m%%]%c", qName0.toString());
      assertNotNull(qName0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant0 = new Constant("[5fZ0m%%]%c");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreFunction0;
      Expression expression0 = coreFunction1.getArg3();
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(expression0);
      
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray0);
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(16, coreFunction2.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-267), (Expression[]) null);
      assertEquals((-267), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-267), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-267), int0);
      
      CoreFunction coreFunction1 = new CoreFunction(47, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(47, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(47, coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction2 = new CoreFunction((-267), (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-267), coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionStartsWith(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-267()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      QName qName0 = new QName((String) null, "");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(24, nodeTypeTest0, expressionArray0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step0.getAxis());
      assertEquals(8, expressionArray0.length);
      assertNotNull(step0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray1, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(16);
      assertEquals(16, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest1);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(16, nodeTypeTest1.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertEquals(22, int0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationUnion0, constant0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest1);
      
      expressionArray1[1] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray1);
      assertEquals(22, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      int int0 = 41;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNull(expression0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2909));
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = new Step((-2909), nodeTypeTest0, expressionArray1);
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertEquals((-2909), step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(step0);
      
      Short short0 = new Short((short)1999);
      assertEquals((short)1999, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = step0.toString();
      assertEquals((-2909), nodeTypeTest0.getNodeType());
      assertEquals((-2909), step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals("UNKNOWN::UNKNOWN()[null][null][null][null][null]", string0);
      assertNotNull(string0);
      
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction((short)1999, expressionArray0);
      assertEquals(1999, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(1999, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNull(object0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals(1999, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNull(expression0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1999()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1106, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1106, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1106, coreFunction0.getFunctionCode());
      assertEquals("unknownFunction1106()", string0);
      assertNotNull(string0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1106, coreFunction0.getFunctionCode());
      assertEquals(0, int0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1106, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("`]bk+=!A#5[Y", "unknownFunction1106()");
      assertEquals("`]bk+=!A#5[Y", qName0.getPrefix());
      assertEquals("unknownFunction1106()", qName0.getName());
      assertEquals("`]bk+=!A#5[Y:unknownFunction1106()", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("`]bk+=!A#5[Y", qName0.getPrefix());
      assertEquals("unknownFunction1106()", qName0.getName());
      assertEquals("`]bk+=!A#5[Y:unknownFunction1106()", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = null;
      try {
        jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '`]bk+=!A#5[Y:unknownFunction1106()'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(787.8424821364172);
      assertEquals(787.84247F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(null, 787.8424682617188)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UjXq!K4k5|@");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1), nodeTypeTest0, expressionArray0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals((-1), step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.computeValue(predicateContext0);
      assertEquals("L<u}uQ'i1`N:L<u}uQ'i1`N", qName0.toString());
      assertEquals("L<u}uQ'i1`N", qName0.getName());
      assertEquals("L<u}uQ'i1`N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray0[1]);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fZ0m%%]%c", "");
      assertEquals("", qName0.getName());
      assertEquals("[5fZ0m%%]%c:", qName0.toString());
      assertEquals("[5fZ0m%%]%c", qName0.getPrefix());
      assertNotNull(qName0);
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      expressionArray1[8] = (Expression) coreOperationUnion0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("", qName0.getName());
      assertEquals("[5fZ0m%%]%c:", qName0.toString());
      assertEquals("[5fZ0m%%]%c", qName0.getPrefix());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(2232, expressionArray0);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(2232, coreFunction1.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction2 = new CoreFunction(15, expressionArray2);
      assertEquals(15, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray2.length);
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      coreFunction2.functionString(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("Y%x142 bE", "Y%x142 bE");
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertEquals(22, int0);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(nameAttributeTest0, variableReference0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan1);
      
      VariableReference variableReference1 = new VariableReference(qName0);
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationUnion0, constant0);
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest1);
      
      expressionArray1[1] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray0[1]);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2888), expressionArray0);
      assertEquals((-2888), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-267), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-267), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-267), coreFunction0.getFunctionCode());
      assertEquals((-267), int0);
      
      CoreFunction coreFunction1 = new CoreFunction(47, (Expression[]) null);
      assertEquals(47, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-267), (Expression[]) null);
      assertEquals((-267), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-1345), nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals((-1345), step0.getAxis());
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1345), (NodeTest) null, expressionArray0);
      assertEquals((-1345), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, expressionPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationUnion1);
      
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreFunction coreFunction0 = new CoreFunction((-2641), expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2641), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertNotNull(selfContext0);
      
      ParentContext parentContext0 = new ParentContext(selfContext0, (NodeTest) null);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = (EvalContext) parentContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) parentContext0;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(evalContextArray0[2], basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(9, evalContextArray0.length);
      assertNotNull(nodeSetContext0);
      
      evalContextArray0[4] = (EvalContext) nodeSetContext0;
      evalContextArray0[5] = (EvalContext) parentContext0;
      evalContextArray0[6] = (EvalContext) selfContext0;
      evalContextArray0[7] = (EvalContext) selfContext0;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext(parentContext0, evalContextArray0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(9, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(9, evalContextArray0.length);
      assertNotNull(evalContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2641()(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000007 > org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000006, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000009 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000010, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000009 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000010)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertNotNull(parentContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, (NodeTest) null, true);
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-3036), (NodeTest) null, expressionArray0);
      assertEquals((-3036), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Double double0 = new Double((-3036));
      assertEquals((-3036.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, constant0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[1]);
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationSubtract1);
      
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathBasicBeanInfo");
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-3036), expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-3036), coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionPosition(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3953), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = false;
      QName qName0 = new QName("$:B3T2*ooTOpKPz*,");
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$", qName0.getPrefix());
      assertNotNull(qName0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      QName qName1 = new QName("9:Y>h5h;%y7+&");
      assertEquals("9:Y>h5h;%y7+&", qName1.toString());
      assertEquals("Y>h5h;%y7+&", qName1.getName());
      assertEquals("9", qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(qName0.equals((Object)qName1));
      assertNotNull(extensionFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-3953), (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-3953), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3953()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, (NodeTest) null, true);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-3036), (NodeTest) null, expressionArray0);
      assertEquals((-3036), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Double double0 = new Double((-3036));
      assertEquals((-3036.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, constant0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "tyFy&VkRQ9XoHk3/");
      assertEquals("tyFy&VkRQ9XoHk3/", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeNameTest0);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals("tyFy&VkRQ9XoHk3/", nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, (NodeTest) null);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      boolean boolean0 = namespaceContext0.setPosition((-3036));
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionStringLength(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = 2494;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2494()(null)", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName("string", "string");
      assertEquals("string", qName0.getPrefix());
      assertEquals("string:string", qName0.toString());
      assertEquals("string", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "YE_n^_");
      assertEquals("string", qName0.getPrefix());
      assertEquals("string:string", qName0.toString());
      assertEquals("string", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("YE_n^_", nodeNameTest0.getNamespaceURI());
      assertEquals("string:string", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2494()(null)", string0);
      assertNotNull(string0);
      
      QName qName0 = new QName("string", "string");
      assertEquals("string", qName0.getName());
      assertEquals("string", qName0.getPrefix());
      assertEquals("string:string", qName0.toString());
      assertNotNull(qName0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+,SH9f[pN2up7*");
      assertFalse(boolean0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationUnion0, coreOperationSubtract0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2494, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationSubtract1);
      
      QName qName1 = new QName("boolean");
      assertEquals("boolean", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("boolean", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      QName qName2 = new QName("org.apache.commons.jxpath.JXPathBasicBeanInfo");
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName2.toString());
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName2.getName());
      assertNull(qName2.getPrefix());
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertNotNull(qName2);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName2, expressionArray0);
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName2.toString());
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName2.getName());
      assertNull(qName2.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2494, expressionArray0);
      assertEquals(2494, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3953), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      String string0 = "$:B3T2*ooTOpKPz*,";
      QName qName0 = new QName("$:B3T2*ooTOpKPz*,");
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$", qName0.getPrefix());
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$:B3T2*ooTOpKPz*,");
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$", qName0.getPrefix());
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$", qName0.getPrefix());
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$", qName0.getPrefix());
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      int int0 = 792;
      boolean boolean1 = namespaceContext0.setPosition(792);
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$", qName0.getPrefix());
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$", qName0.getPrefix());
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      CoreFunction coreFunction1 = new CoreFunction((-3036), (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-3036), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 22, (NodeTest) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNull(evalContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      Object object0 = coreFunction0.functionPosition(ancestorContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      assertEquals(0, object0);
      assertNotNull(object0);
      
      int int0 = 400;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("Y%x142 bE", "Y%x142 bE");
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertEquals(22, int0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      assertEquals(22, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(4, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction2 = new CoreFunction(2232, expressionArray0);
      assertEquals(4, coreFunction2.getArgumentCount());
      assertEquals(2232, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(22, expressionArray0);
      assertEquals(22, coreFunction3.getFunctionCode());
      assertEquals(4, coreFunction3.getArgumentCount());
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction3);
      
      // Undeclared exception!
      try { 
        coreFunction3.functionString(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, (NodeTest) null, true);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-3036), (NodeTest) null, expressionArray0);
      assertEquals((-3036), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Double double0 = new Double((-3036));
      assertEquals((-3036.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, constant0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[1]);
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationSubtract1);
      
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathBasicBeanInfo");
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-3036), expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-3036), coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreOperationSubtract1);
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      Object object0 = coreFunction0.computeValue(descendantContext0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-3036), coreFunction0.getFunctionCode());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(5, expressionArray0.length);
      assertNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction((-3036), expressionArray0);
      assertEquals((-3036), coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction1.functionSubstringAfter(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("Y%x142 bE", "Y%x142 bE");
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      Constant constant1 = new Constant("tz<bD6GvMGMJ1Uy|&");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, extensionFunction0);
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(282);
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(282, nodeTypeTest0, expressionArray0);
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertEquals(282, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(40);
      assertEquals(40, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      Step step1 = new Step((-1), nodeTypeTest1, expressionArray0);
      assertEquals(40, nodeTypeTest1.getNodeType());
      assertEquals((-1), step1.getAxis());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step1);
      
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      QName qName0 = new QName("C{bg", "C{bg");
      assertEquals("C{bg:C{bg", qName0.toString());
      assertEquals("C{bg", qName0.getName());
      assertEquals("C{bg", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("C{bg:C{bg", qName0.toString());
      assertEquals("C{bg", qName0.getName());
      assertEquals("C{bg", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      Constant constant0 = new Constant("C{bg");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      CoreFunction coreFunction0 = new CoreFunction((-2094), expressionArray0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals((-2094), coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2094()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreOperationUnion1);
      
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(1, expressionArray2.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, (NodeTest) null, true);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-3036), (NodeTest) null, expressionArray0);
      assertEquals((-3036), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Double double0 = new Double((-3036));
      assertEquals((-3036.0), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, constant0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[1]);
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationSubtract1);
      
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathBasicBeanInfo");
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathBasicBeanInfo", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-3036), expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-3036), coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionCount(parentContext0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-s#Y;");
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(10, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(0, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-3036), processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals((-3036), step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-896), processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals((-896), step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(18, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(18, step4.getAxis());
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(18, processingInstructionTest0, expressionArray0);
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertEquals(18, step5.getAxis());
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(1404, processingInstructionTest0, expressionArray0);
      assertEquals(1404, step6.getAxis());
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(0, processingInstructionTest0, expressionArray0);
      assertEquals(0, step7.getAxis());
      assertEquals("-s#Y;", processingInstructionTest0.getTarget());
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      stepArray0[8] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("-s#Y;");
      assertEquals("-s#Y;", processingInstructionTest1.getTarget());
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("Y%x142 bE", "Y%x142 bE");
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      Constant constant1 = new Constant("tz<bD6GvMGMJ1Uy|&");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, extensionFunction0);
      assertEquals("Y%x142 bE", qName0.getName());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(282);
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(282, nodeTypeTest0, expressionArray0);
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertEquals(282, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(40);
      assertEquals(40, nodeTypeTest1.getNodeType());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      
      Step step1 = new Step((-1), nodeTypeTest1, expressionArray0);
      assertEquals(40, nodeTypeTest1.getNodeType());
      assertEquals((-1), step1.getAxis());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step1);
      
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant1);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(predicateContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest1);
      assertEquals(40, nodeTypeTest1.getNodeType());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.computeValue(predicateContext0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(4, expressionArray0.length);
      assertNotSame(constant1, constant0);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3953), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      QName qName0 = new QName("$:B3T2*ooTOpKPz*,");
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$", qName0.getPrefix());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$:B3T2*ooTOpKPz*,");
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$", qName0.getPrefix());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$", qName0.getPrefix());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$", qName0.getPrefix());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      boolean boolean1 = namespaceContext0.setPosition(792);
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$", qName0.getPrefix());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getPosition());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = coreFunction0.functionStringLength(namespaceContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$", qName0.getPrefix());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getPosition());
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionPosition(descendantContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3953), coreFunction0.getFunctionCode());
      assertEquals("$:B3T2*ooTOpKPz*,", qName0.toString());
      assertEquals("$", qName0.getPrefix());
      assertEquals("B3T2*ooTOpKPz*,", qName0.getName());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.toString());
      assertEquals("$:B3T2*ooTOpKPz*,", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      Double double0 = new Double(2230.60823506209);
      assertEquals(2230.60823506209, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("Y%x142 bE", "Y%x142 bE");
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      Constant constant1 = new Constant("tz<bD6GvMGMJ1Uy|&");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, extensionFunction0);
      assertEquals("Y%x142 bE:Y%x142 bE", qName0.toString());
      assertEquals("Y%x142 bE", qName0.getPrefix());
      assertEquals("Y%x142 bE", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(282);
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(282, nodeTypeTest0, expressionArray0);
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertEquals(282, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      
      Step step1 = new Step(349, nodeTypeTest0, expressionArray0);
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertEquals(349, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step1);
      
      Step step2 = new Step(282, nodeTypeTest0, expressionArray0);
      assertEquals(282, step2.getAxis());
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step2);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      assertNotNull(string0);
      
      Step step3 = new Step(349, nodeTypeTest0, expressionArray0);
      assertEquals(349, step3.getAxis());
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step3);
      
      Step step4 = new Step(282, nodeTypeTest0, expressionArray0);
      assertEquals(282, step4.getAxis());
      assertEquals(282, nodeTypeTest0.getNodeType());
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step4);
      
      CoreFunction coreFunction0 = new CoreFunction(1399, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(1399, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fZ0m%%]%c", "");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      expressionArray1[8] = (Expression) coreOperationUnion0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[2], expressionArray1[5]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fZ0m%%]%c", "");
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(47, (Expression[]) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      CoreFunction coreFunction2 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction2;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction2;
      expressionArray1[3] = (Expression) coreFunction2;
      expressionArray1[4] = (Expression) coreFunction2;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction3 = new CoreFunction(3, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction3.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.VariablePointer");
      Step step0 = new Step((-471), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-471), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Step step2 = new Step((-1), processingInstructionTest0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[2], expressionArray1[0]);
      expressionArray1[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(5019, expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expression0);
      CoreFunction coreFunction1 = new CoreFunction(36, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(268, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionContains(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.VariablePointer");
      Step step0 = new Step((-471), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-471), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-471), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-471), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction0);
      coreFunction1.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-545), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.computeContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(105);
      Step step0 = new Step((-3036), nodeTypeTest0, expressionArray0);
      Step step1 = new Step(10, nodeTypeTest0, expressionArray0);
      Step step2 = new Step((-896), nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      Step step3 = new Step(30, nodeTypeTest0, expressionArray1);
      Step step4 = new Step(32, nodeTypeTest0, expressionArray0);
      nodeTypeTest0.toString();
      Step step5 = new Step(2885, nodeTypeTest0, expressionArray0);
      Step step6 = new Step(0, nodeTypeTest0, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction890()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("C{bg", "iQk8SKH2Qx//-'Fz");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, variableReference0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], coreOperationLessThanOrEqual0);
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[5], coreOperationUnion1);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-2082), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(788.98454225474);
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UjXq!K4k5|@");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-207), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      coreFunction0.toString();
      QName qName0 = new QName("string", "string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "YE_n^_");
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction1.compute(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(787.8424821364172);
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(null, 787.8424682617188)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1024, (Expression[]) null);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(47, (Expression[]) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1024()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("C{bg", "iQk8SKH2Qx//-'Fz");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, variableReference0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], coreOperationLessThanOrEqual0);
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[5], coreOperationUnion1);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-2082), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UjXq!K4k5|@");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("L<u}uQ'i1`N", "L<u}uQ'i1`N");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("C{bg", "iQk8SKH2Qx//-'Fz");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant((String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "vt@Oea(;R&_u@nN 0=1");
      QName qName1 = new QName("C{bg", "pQ.bUBYN");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest0, true, true);
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeNameTest0);
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName1);
      NamespaceContext namespaceContext1 = new NamespaceContext(namespaceContext0, nodeNameTest2);
      namespaceContext1.setPosition(32);
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationDivide0, (Expression) null);
      expressionArray0[4] = (Expression) coreOperationSubtract1;
      Constant constant0 = new Constant("zaO#Nx");
      expressionArray0[5] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-2082), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[7] = expression0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Expression expression1 = coreFunction0.getArg3();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, expression1);
      CoreOperationSubtract coreOperationSubtract2 = new CoreOperationSubtract(expressionArray0[3], coreOperationUnion0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], expressionArray0[7]);
      CoreFunction coreFunction1 = new CoreFunction((-2082), expressionArray0);
      coreFunction1.getArg3();
      assertEquals((-2082), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-267), (Expression[]) null);
      coreFunction0.getFunctionCode();
      QName qName0 = new QName(">VmD<kK|Qb>?N8meR}", "kq'+:_i!f");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("kq'+:_i!f");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-267));
      Step step0 = new Step((-267), nodeTypeTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(282);
      Step step1 = new Step(10, nodeTypeTest0, (Expression[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      stepArray0[2] = step1;
      stepArray0[3] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, (Expression[]) null, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationGreaterThan0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fZ0m%%]%c", "");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1781, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      CoreFunction coreFunction1 = new CoreFunction(1781, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray0[1]);
      CoreFunction coreFunction0 = new CoreFunction(1505, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      Double double0 = new Double(2230.60823506209);
      Constant constant0 = new Constant(double0);
      QName qName0 = new QName("Y%x142 bE", "Y%x142 bE");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, nameAttributeTest0);
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant1 = new Constant("tz<bD6GvMGMJ1Uy|&");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, extensionFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(282);
      Step step0 = new Step(282, nodeTypeTest0, expressionArray0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(40);
      Step step1 = new Step((-1), nodeTypeTest1, expressionArray0);
      Step[] stepArray0 = new Step[3];
      stepArray0[0] = step0;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant1);
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fZ0m%%]%c", "");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[0], expressionArray0[0]);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray1[0]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("");
      expressionArray0[3] = (Expression) constant0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[4] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference((QName) null);
      expressionArray0[5] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction((-13), expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-s#Y;");
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3036), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-896), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(18, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(18, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(196, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[8] = step8;
      CoreFunction coreFunction1 = new CoreFunction(196, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("C{bg", "iQk8SKH2Qx//-'Fz");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      Constant constant0 = new Constant((String) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("vt@Oea(;R&_u@nN 0=1");
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-2094), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray0[1]);
      CoreFunction coreFunction0 = new CoreFunction(786, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      int int0 = (-3953);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3953), (Expression[]) null);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("iQk8SKH2Qx//-'Fz", "org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("Invalid argument type for 'sum': ");
      CoreFunction coreFunction1 = new CoreFunction((-3953), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1505, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1505()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 - (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003) mod org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 < org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(788.98454225474);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(788.9845581054688, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "z";
      QName qName0 = new QName("z");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-41), expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      Integer integer0 = new Integer((-3145));
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) integer0);
      QName qName0 = new QName("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.lookup(linkedList0, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("C{bg", "iQk8SKH2Qx//-'Fz");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, variableReference0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], coreOperationLessThanOrEqual0);
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[5], coreOperationUnion1);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-2082), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2082()(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 or org.apache.commons.jxpath.ri.compiler.Constant@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000007 or org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000009 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000011, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) <= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002), $C{bg:iQk8SKH2Qx//-'Fz, 'null', (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) div org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003) | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 | org.apache.commons.jxpath.ri.compiler.Constant@0000000006 | (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000007) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 | (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000009) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000011), org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 * org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000010)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getAbsoluteRootContext();
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("[5fZ0m%%]%c", "");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      expressionArray1[8] = (Expression) coreOperationUnion0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[2], expressionArray1[5]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      Constant constant1 = new Constant("[5fZ0m%%]%c");
      expressionArray0[5] = (Expression) constant1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, expressionArray0[6]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(282);
      Step step0 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(3);
      Step step1 = new Step(1591, nodeTypeTest1, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray1, stepArray0);
      expressionArray0[8] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      // Undeclared exception!
      coreFunction0.functionContains(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.VariablePointer");
      Step step0 = new Step((-471), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-471), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-471), expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, processingInstructionTest0);
      coreFunction0.computeValue(namespaceContext0);
      assertEquals((-471), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-s#Y;");
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3036), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-896), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(18, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(18, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(196, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("-s#Y;");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, processingInstructionTest1, true);
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, processingInstructionTest0, true, false);
      expressionPath0.createContextForStep(childContext0, (-3036), processingInstructionTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationSubtract0);
      coreOperationSubtract0.toString();
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      QName qName0 = new QName("translate");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-207), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      PredicateContext predicateContext0 = new PredicateContext(unionContext0, expressionArray0[3]);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 - (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)");
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeNameTest0, false);
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-207()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 - (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002) * (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000004 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006, $translate)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(786, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction786()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 - (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003) mod org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 < org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3953), (Expression[]) null);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("$:B3T2*ooTOpKPz*,");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$:B3T2*ooTOpKPz*,");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      namespaceContext0.setPosition(792);
      coreFunction0.functionStringLength(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1928), (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("unknownFunction");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1928), nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1928), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Uk");
      Step step2 = new Step((-1928), processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreFunction0);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeNameTest0);
      expressionPath0.evalSteps(attributeContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      coreFunction0.functionTrue(ancestorContext0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-1928()", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, (Expression) null);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, nameAttributeTest0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("ebOyG\"dcTWb`(DzFg");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ebOyG\"dcTWb`(DzFg");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = null;
      expressionArray1[5] = (Expression) coreOperationMultiply0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      expressionArray1[8] = (Expression) coreOperationAnd0;
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1195, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(1263, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(1195, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(2494, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("string", "string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "YE_n^_");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      ancestorContext0.reset();
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("");
      expressionArray0[3] = (Expression) constant0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[4] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference((QName) null);
      expressionArray0[5] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1520), (Expression[]) null);
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("Dq@x[");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Dq@x[");
      Step step0 = new Step(1024, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1520), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(377, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(377, nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(377, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "Dq@x[");
      Step step5 = new Step(522, nodeNameTest1, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreFunction0.compute(attributeContext0);
      assertEquals((-1520), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("bT&m@~[3_]_6");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray1[1] = (Expression) expressionPath0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      expressionArray1[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray1);
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, coreOperationMultiply0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, expressionArray1[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual1;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[5] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName(".sXGfx2%|B_HgcO,");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      Step[] stepArray0 = new Step[7];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-580), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-580), nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      Step step5 = new Step(2705, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, (Expression[]) null, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 0, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = (-875);
      CoreFunction coreFunction0 = new CoreFunction((-875), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("substring");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: substring
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }
}
