/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:21:50 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray1);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(NaN, NaN, NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "13");
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray1[1]);
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual0;
      Step step0 = new Step((-3367), (NodeTest) null, expressionArray0);
      stepArray0[1] = step0;
      Step step1 = new Step((-3367), (NodeTest) null, expressionArray0);
      stepArray0[2] = step1;
      Step step2 = new Step((-3367), nodeNameTest0, expressionArray1);
      stepArray0[3] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      Double double1 = Expression.NOT_A_NUMBER;
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-5), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      Expression[] expressionArray1 = new Expression[3];
      coreOperationDivide0.args = expressionArray0;
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{object of type ");
      expressionArray1[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray1);
      coreOperationAdd0.computeValue((EvalContext) null);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray1);
      coreOperationAdd0.computeValue((EvalContext) null);
      coreFunction0.getFunctionName();
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.computeContextDependent();
      coreFunction0.functionTranslate((EvalContext) null);
      coreFunction0.getArg1();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Double double0 = Expression.ONE;
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("'UZTrk{LZ");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-329), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expression0, expressionArray0[2]);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, constant0);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("'UZTrk{LZ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-326));
      Step step2 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], locationPath0);
      CoreFunction coreFunction1 = new CoreFunction((-329), expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationAdd0);
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(65, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(65, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(1794, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1794, processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, (Expression[]) null, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) nameAttributeTest0;
      expressionArray1[5] = (Expression) expressionPath0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray1[3], expressionPath0);
      expressionArray1[7] = (Expression) nameAttributeTest1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, expressionArray1[0]);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(65, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionPosition(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1088), (Expression[]) null);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("1", "1");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "1");
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreFunction0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      nodeSetContext0.setPosition((-1088));
      coreFunction0.functionTrue(predicateContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(predicateContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Constant constant0 = new Constant("f");
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1106, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(900, expressionArray1);
      coreFunction0.getFunctionName();
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      evalContext0.setPosition((-4066));
      CoreFunction coreFunction0 = new CoreFunction(723, (Expression[]) null);
      coreFunction0.functionLast(evalContext0);
      coreFunction0.functionNumber(evalContext0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = new Integer(6);
      Constant constant0 = new Constant(integer0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1556), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("org.apache.commons.beanutils.DynaBean", "Cannot create path:");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName1 = new QName("Cannot create path:");
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], extensionFunction1);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, extensionFunction1);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      VariableReference variableReference0 = new VariableReference(qName1);
      expressionArray0[3] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4816);
      Step step0 = new Step(956, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(4816, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2325, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-589), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(4816, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2325, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction1, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(956, expressionArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      PredicateContext predicateContext0 = new PredicateContext(precedingOrFollowingContext0, coreOperationDivide0);
      expressionPath1.createContextForStep(predicateContext0, 2325, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionTranslate(selfContext0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName(",bwdRPh~-dM\"AC/r:r", ",bwdRPh~-dM\"AC/r:r");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(59, expressionArray0);
      coreFunction0.getArgumentCount();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[1]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[3], (Locale) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, rootContext0, nodePointer0);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, nodePointer0);
      InitialContext initialContext0 = new InitialContext(rootContext1);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: ,bwdRPh~-dM\"AC/r:r:,bwdRPh~-dM\"AC/r:r
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, (Step[]) null);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionPath0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, expressionArray0[2]);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg3();
      JXPathContext jXPathContext0 = null;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant constant0 = new Constant("V64@Z|");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) coreOperationNegate0;
      expressionArray0[7] = (Expression) constant0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1379));
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      coreOperationNegate0.iterate(parentContext0);
      expressionArray0[8] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1379), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("yH1]q");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-1012), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("-SkjX';;F");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual1;
      Constant constant1 = new Constant("L/Szg7");
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[2]);
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray1);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("5ew", "5ew");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, extensionFunction0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, expressionArray0[3]);
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1614, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1884), expressionArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "13false");
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(selfContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(locale0).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "13false");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, selfContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      coreFunction0.functionLang(evalContext0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "13false");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, selfContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      QName qName0 = new QName((String) null, (String) null);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[0], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext1 = rootContext0.getJXPathContext();
      jXPathContext1.setLenient(false);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext1, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreFunction coreFunction0 = new CoreFunction(76, expressionArray0);
      coreFunction0.functionLang(evalContext0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2416), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("Tuy/ !H");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'Tuy/ !H'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Constant constant0 = new Constant("f");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[0];
      coreOperationLessThan0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, expressionArray1[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-329), expressionArray1);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Integer integer0 = new Integer((-317));
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("10", "substring-before");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-317));
      Step step0 = new Step((-317), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(21, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(11, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationGreaterThanOrEqual0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, coreOperationEqual0);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, expressionArray0[3]);
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-317), expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual1;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray1, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionPosition(evalContext0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-28), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-28));
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeTypeTest0, false, true);
      coreFunction0.iteratePointers((EvalContext) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(childContext0, basicNodeSet0);
      nodeSetContext0.getCurrentNodePointer();
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(selfContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(886);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest0, true, false);
      childContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(childContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant constant0 = new Constant("f");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-329), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("ghF0n^+W`LVxzmN0o4:");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-476), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2008, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray1, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[2], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray1[0], expressionArray1[2]);
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, expressionArray1[2]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply2 = new CoreOperationMultiply(expressionArray1[2], expressionArray0[1]);
      expressionArray0[7] = (Expression) coreOperationMultiply2;
      CoreFunction coreFunction0 = new CoreFunction(2008, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("f");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1532), expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      coreOperationNegate0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("13false");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("Xi,91MX&5vN*o5g-}1", "13");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationAnd0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expression0, expressionArray0[1]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction((-2330), expressionArray1);
      EvalContext evalContext1 = null;
      CoreFunction coreFunction2 = new CoreFunction((-2330), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionContains(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("156156");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant0 = new Constant("156156");
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1512), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[3] = expression0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(521, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(50, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(50, expressionArray0);
      coreFunction1.functionCount((EvalContext) null);
      coreFunction1.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("ZyjDDTiwG |T.KM");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(27, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(28, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-638), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ZyjDDTiwG |T.KM");
      Step step4 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-1), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "ZyjDDTiwG |T.KM");
      Step step7 = new Step(287, nodeNameTest1, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], locationPath0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-638), expressionArray0);
      JXPathContext.newContext((Object) step6);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest1);
      // Undeclared exception!
      coreFunction0.functionTrue(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("1false");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionID(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(25);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("1false");
      expressionArray0[0] = (Expression) constant0;
      Byte byte0 = new Byte((byte)6);
      Constant constant1 = new Constant(byte0);
      expressionArray0[1] = (Expression) constant1;
      QName qName0 = new QName("1false", "1false");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant1);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, false);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) precedingOrFollowingContext0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      parentContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, constant1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1false");
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], extensionFunction1);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-202), expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationAdd0.toString();
      CoreFunction coreFunction1 = new CoreFunction(3166, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1088), (Expression[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("1", "1");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "1");
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreFunction0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      coreFunction0.functionTrue(predicateContext0);
      coreFunction0.functionStringLength(predicateContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(28, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      Step step2 = new Step(28, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(305, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[2], expressionPath0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[5], expressionArray1[5]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion1;
      CoreFunction coreFunction0 = new CoreFunction(305, expressionArray0);
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      Step[] stepArray1 = new Step[1];
      stepArray1[0] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray1);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, locationPath0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName((String) null, "eh=-x[d<e+qV0ZX");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], coreOperationDivide0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], coreOperationLessThan0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationLessThan0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1566);
      Step step0 = new Step(1566, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) nameAttributeTest0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) nameAttributeTest0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationLessThan0;
      expressionArray1[6] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(139, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(139, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step3 = new Step(1407, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(2460, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(139, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-1059), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-1059), nodeTypeTest0, expressionArray1);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1566, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      coreFunction1.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      Constant constant0 = new Constant(integer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("ancestor::");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      constant0.iterate(selfContext0);
      CoreFunction coreFunction0 = new CoreFunction((-5), expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e3Hy:xZ4?");
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3176, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer((-5));
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-5), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer((-5));
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan1, constant0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-5), expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("1", "1");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1425, expressionArray0);
      QName qName1 = new QName("R/BCMUkX`37w%uA-3");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Step step0 = new Step(1425, nodeNameTest0, expressionArray0);
      Step step1 = new Step(561, nodeNameTest0, expressionArray0);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("", "id(");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2137, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(27, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2137, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step5 = new Step(0, nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(122, nodeNameTest1, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(2137, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) predicateContext0;
      evalContextArray0[4] = (EvalContext) predicateContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) predicateContext0;
      evalContextArray0[7] = (EvalContext) predicateContext0;
      evalContextArray0[8] = (EvalContext) predicateContext0;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      // Undeclared exception!
      coreFunction0.functionLang(unionContext0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer((-5));
      Constant constant0 = new Constant(integer0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-5), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expression0, expressionArray0[1]);
      coreOperationLessThan0.computeContextDependent();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      CoreFunction coreFunction1 = new CoreFunction((-1163), expressionArray0);
      coreFunction1.functionSubstringAfter((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      Step step0 = new Step(46, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(46, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(28, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(8, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(985, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Short short0 = new Short((short) (-2800));
      Constant constant0 = new Constant(short0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant("WO1w^pi,D51n=\"8Q");
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2668, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1673), expressionArray1);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("*d9vYyo@");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(689, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1673), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeNameTest0);
      expressionPath0.createContextForStep(ancestorContext0, (-2157), nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionLang(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("Lg?0K*~[,6ic`");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-595), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationMod0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, coreOperationUnion0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("156156");
      Step step0 = new Step(20, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[1], coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationEqual0);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = new Float(2646.34792993);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1441792, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1441792);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      coreFunction0.iterate(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      coreOperationNotEqual0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"true\"");
      CoreFunction coreFunction0 = new CoreFunction((-2712), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("false", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(10, (NodeTest) null, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(28, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(28, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-279), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray1, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      Integer integer0 = new Integer(641);
      Constant constant0 = new Constant(integer0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant1 = new Constant(integer0);
      expressionArray0[5] = (Expression) constant1;
      Constant constant2 = new Constant("false");
      expressionArray0[6] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("id");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "id", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.functionNamespaceURI(rootContext0);
      coreFunction0.functionStringLength(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.getArgumentCount();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      coreOperationOr0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.args = expressionArray0;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1614), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, predicateContext0, (Pointer) null);
      QName qName0 = new QName("aO`m$Y-\"/s72z]dEA");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getAbsoluteRootContext();
      UnionContext unionContext0 = new UnionContext(evalContext0, (EvalContext[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      namespaceContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, unionContext0, (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction0.compute(rootContext1);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("f", "f");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-964), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("local-name");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("1");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(3183, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "1");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionSum(selfContext0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1614), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLast(evalContext0);
      coreFunction0.isContextDependent();
      coreFunction0.functionName(evalContext0);
      coreFunction0.functionLast(evalContext0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("id");
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "id", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: id
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(43, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreFunction0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, expressionArray0[3]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationNegate0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(variableReference0, coreOperationGreaterThan0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan1;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, ";AJCP:N#':Y8i1yBd");
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(58, nodeNameTest0, expressionArray0);
      Step step2 = new Step(58, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(476, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("/QH#kfXT~AKxQcb");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(41, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[0];
      Step step1 = new Step(Integer.MAX_VALUE, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(Integer.MAX_VALUE, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], variableReference0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MAX_VALUE, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionConcat(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1769);
      Step step0 = new Step(41, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("8");
      Step step1 = new Step((-1185), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1769, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-892), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-892), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1185), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(20, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-626), nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionPath0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationGreaterThan0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, false, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, true);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = (EvalContext) childContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) childContext0;
      evalContextArray0[3] = (EvalContext) childContext0;
      evalContextArray0[4] = null;
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(26, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3599), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3439), (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(40, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(26, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(64, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-3439), (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      QName qName0 = new QName("floor");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = expressionPath0.createContextForStep(evalContextArray0[2], 2, nodeNameTest0);
      evalContextArray0[5] = evalContext0;
      UnionContext unionContext0 = new UnionContext(childContext0, evalContextArray0);
      SelfContext selfContext0 = new SelfContext(unionContext0, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionFloor(selfContext0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationOr0);
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(500, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(315, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(315, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(315, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(500, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual1, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[4], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[3], extensionFunction0);
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[8] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[1], coreOperationMod0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], coreOperationMod1);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, expressionArray0[0]);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      expressionArray0[5] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreFunction0);
      expressionArray0[6] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction1 = new CoreFunction(747, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      QName qName0 = new QName("UkEjBYi=", "f");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd1);
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[6], extensionFunction1);
      expressionArray0[8] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3210, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1343), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-1343), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("f", ",m=#jD.@0,");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "number");
      Step step0 = new Step(1186, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(846, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, locationPath0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(8);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(84, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("agm-:AlHt+D%mu%IC&s");
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, true);
      SelfContext selfContext0 = new SelfContext(childContext0, processingInstructionTest0);
      QName qName0 = new QName("1", "s@0Q{ZypC}W1o]aNc");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "java.util.concurrent.atomic.AtomicBoolean");
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, false, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionNot(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      coreFunction0.computeContextDependent();
      Locale locale0 = Locale.KOREA;
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(36, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(25, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(25, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      QName qName0 = new QName(" ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      coreFunction0.functionPosition(childContext0);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = new Double(24);
      Constant constant0 = new Constant(double0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("f", "3");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, expressionArray0[0]);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference1;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr1;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(2400.26502);
      Constant constant0 = new Constant(float0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      coreOperationDivide0.toString();
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      coreFunction0.isContextDependent();
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-19);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.functionBoolean((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3191()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationMod0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray1[1] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, constant0);
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("7", "7");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[3] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[3], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray1);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[3] = expression0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(800, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      QName qName0 = new QName("Cannot remove root JDOM node", "1");
      Locale locale0 = Locale.ROOT;
      NodePointer.newNodePointer(qName0, locale0, locale0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(63, (Expression[]) null);
      coreFunction1.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      QName qName0 = new QName("Cannot remove root JDOM ode", "1");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, nodePointer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: Cannot remove root JDOM ode:1
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(10);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-1750), expressionArray0);
      coreFunction1.functionSubstringAfter((EvalContext) null);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1750()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(10);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 37;
      EvalContext evalContext1 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 10;
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(10);
      Constant constant0 = new Constant(integer0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.getArg1();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      attributeContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      coreFunction0.functionBoolean(rootContext1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      QName qName0 = new QName("Cannot remove root JDOM node", "1");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, nodePointer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      locale0.getDisplayScript();
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      coreFunction0.functionNamespaceURI(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      QName qName0 = new QName("Cannot remove root JDOM node", "1");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, nodePointer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      coreFunction0.functionNamespaceURI(evalContext0);
      InitialContext initialContext0 = new InitialContext(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionConcat(descendantContext0);
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Constant constant0 = new Constant(">ju`$h{UYvN_#K");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(1828, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan1, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) div (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The element \"");
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("The element \"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Step step0 = new Step(2497, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1376), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-4027), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(16383, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2497, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lib");
      Step step0 = new Step(1739, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      step0.isContextDependent();
      Step step1 = new Step(226, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1739, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(284, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(1739, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray1, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(284, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(substring-after(), substring-after(), substring-after(), substring-after(), substring-after(), substring-after())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.iteratePointers((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-863), expressionArray1);
      coreFunction1.getFunctionName();
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("org.apache.commons.beanutils.DynaBean", "Cannot turn ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      Constant constant0 = new Constant("Cannot turn ");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, nameAttributeTest0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, coreOperationDivide0);
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Cannot turn ");
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1427), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction2 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction2;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "org.apache.commons.beanutils.DynaBean");
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeNameTest1);
      // Undeclared exception!
      coreFunction0.functionBoolean(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("following::");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Step step0 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(18, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.InfoSetUtil");
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionPath1);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      PredicateContext predicateContext0 = new PredicateContext(precedingOrFollowingContext0, coreFunction0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(12, (Expression[]) null);
      coreFunction0.compute((EvalContext) null);
      coreFunction1.isContextDependent();
      coreFunction1.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName((String) null, "substring");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(29, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, locationPath1);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray1, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionString(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      Float float0 = new Float(0.0F);
      Constant constant0 = new Constant(float0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, coreOperationDivide0);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThan0, constant0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      expressionArray0[2] = (Expression) coreOperationDivide1;
      expressionArray0[3] = (Expression) coreOperationDivide0;
      expressionArray0[4] = (Expression) coreOperationDivide0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) coreOperationDivide0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1524, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationMod0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray1[1] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, constant0);
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("7", "7");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[3] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[3], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray1);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[3] = expression0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(800, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1343), expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray1);
      coreFunction2.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Long long0 = new Long(978L);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      expressionArray0[3] = (Expression) constant1;
      coreOperationAdd0.args = expressionArray0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short)100);
      Constant constant0 = new Constant(short0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1371, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(100)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("id");
      Step step0 = new Step(101, processingInstructionTest0, (Expression[]) null);
      step0.toString();
      expressionPath0.isSimpleStep(step0);
      QName qName0 = new QName((String) null, "1false");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p0o&mO;UhfQE(+?7");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      expressionPath0.createContextForStep((EvalContext) null, 101, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      expressionArray1[0] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("Z']S`/hZ#FXCK=", "Z']S`/hZ#FXCK=");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(14, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step1 = new Step(14, nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, stepArray0);
      expressionArray1[1] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, expressionArray1[0]);
      expressionArray1[2] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[1], coreOperationEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, expressionArray1[1]);
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray1);
      // Undeclared exception!
      coreFunction1.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      coreFunction0.isContextDependent();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G^^llf^7yv>^ <l");
      CoreFunction coreFunction1 = new CoreFunction(99, expressionArray0);
      EvalContext evalContext0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 14, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer(156);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationLessThan0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreOperationLessThan0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 * (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 * (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      QName qName0 = new QName(">\"A");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">\"A");
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.functionFalse((EvalContext) null);
      boolean boolean0 = coreFunction1.isContextDependent();
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertFalse(object0.equals((Object)boolean0));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      QName qName0 = new QName("string-length");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.computeContextDependent();
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ceiling");
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[16];
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.computeContextDependent();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(3191, coreFunction0.getFunctionCode());
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("1false");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ":mh)");
      Step step0 = new Step((-66), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-66), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(16809983, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(16809983, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(16809983, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(16809983, nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      Constant constant1 = new Constant(double0);
      expressionArray0[4] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-66), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Integer integer0 = new Integer(40);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3594, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1750), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationUnion0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1778);
      Step step0 = new Step((-2489), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2489), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1778, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(30, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      QName qName0 = new QName("`roC[AObp6 kBc?`h", "`roC[AObp6 kBc?`h");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step4 = new Step(7, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(27, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(102, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      Step step7 = new Step((-323), nodeTypeTest0, expressionArray1);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Integer integer0 = new Integer(40);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f");
      CoreFunction coreFunction0 = new CoreFunction(116, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction116()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.computeContextDependent();
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3191);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-1107);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+a8.}.H{(");
      Step[] stepArray0 = new Step[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.isContextDependent();
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      assertEquals(24, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.iterate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      QName qName0 = new QName("^0yA", "^0yA");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.functionFalse((EvalContext) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(7, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      coreFunction0.computeValue((EvalContext) null);
      QName qName0 = new QName("1");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Integer integer0 = new Integer(3191);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationLessThan0);
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(33, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(33, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction1, expressionArray0[0]);
      QName qName0 = new QName("ksMFSX-4t=>Qso;");
      coreFunction1.functionNormalizeSpace((EvalContext) null);
      coreFunction1.functionCount((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction33()(unknownFunction33()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionContains((EvalContext) null);
      coreOperationLessThan0.args = expressionArray0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CoreFunction coreFunction1 = new CoreFunction((-1750), expressionArray0);
      QName qName0 = new QName("Hb)6isr>yrXTA\"*Y9", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 16;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      QName qName0 = new QName("/|Z;-aGBhcw)Qmz");
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      boolean boolean0 = true;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(12);
      PrecedingOrFollowingContext precedingOrFollowingContext1 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest1, false);
      precedingOrFollowingContext0.getContextNodePointer();
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.getArg1();
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(36);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2187), expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Wu+A");
      boolean boolean0 = false;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      int int0 = 41;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionTrue(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction((-733), expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      coreFunction0.functionFalse(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-773), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.computeContextDependent();
      coreOperationOr0.args = expressionArray1;
      EvalContext evalContext0 = null;
      coreFunction0.functionLocalName((EvalContext) null);
      QName qName0 = new QName("R@#W{J]NQf-pRw");
      CoreFunction coreFunction1 = new CoreFunction(3191, expressionArray0);
      coreFunction1.functionFloor((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3191()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      coreOperationOr0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreOperationOr0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      QName qName0 = new QName("AFh");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\"\f\"");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext1 = new PrecedingOrFollowingContext(descendantContext0, nodeNameTest0, false);
      precedingOrFollowingContext1.getContextNodePointer();
      coreFunction0.computeValue((EvalContext) null);
      QName qName1 = new QName("AFh");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeNameTest1, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory");
      int int0 = (-3182);
      Step step0 = new Step((-3182), processingInstructionTest1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      int int0 = (-2416);
      CoreFunction coreFunction0 = new CoreFunction((-2416), expressionArray0);
      String string0 = "sM@'XI/1rmLJ\\d5";
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("\"position\"", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreFunction1);
      coreOperationLessThanOrEqual0.isContextDependent();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, extensionFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = 17;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.computeContextDependent();
      coreOperationOr0.args = expressionArray1;
      EvalContext evalContext0 = null;
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) coreFunction0;
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(1441792, expressionArray0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1441792()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationOr0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationGreaterThanOrEqual0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      QName qName0 = new QName("@2WvH", "@2WvH");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction((-1413), (Expression[]) null);
      coreFunction0.functionNumber(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1413()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionCount((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Boolean
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.computeContextDependent();
      coreOperationOr0.args = expressionArray1;
      coreFunction0.functionLocalName((EvalContext) null);
      QName qName0 = new QName("R@#W{J]NQf-pRw");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      Object object0 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(1.0, object0);
      assertEquals(3191, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      precedingOrFollowingContext0.getContextNodePointer();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreFunction0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, coreOperationAnd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreFunction0);
      int int0 = 16;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      precedingOrFollowingContext0.getContextNodePointer();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      QName qName0 = new QName("", "value");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ".*,0z");
      coreFunction0.getFunctionName();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(37, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction1, expressionArray0[0]);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationLessThanOrEqual0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThan0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("value");
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) childContext0;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) unionContext0);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, processingInstructionTest0);
      ancestorContext0.getContextNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreOperationLessThanOrEqual0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction1.functionRound(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step[] stepArray0 = new Step[3];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) locationPath0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-2147483647), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-2147483647), expressionArray1);
      CoreFunction coreFunction3 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "R/uKB+djLjfAn");
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(1410, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1410, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(11, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(11, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-926), (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("", "i4y_sp%lfI4\"Us_D(B");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-8), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2131), expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.getArg2();
      assertEquals((-2131), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      precedingOrFollowingContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Integer integer0 = new Integer(39);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], coreOperationGreaterThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Constant constant1 = new Constant(integer0);
      expressionArray0[4] = (Expression) constant1;
      QName qName0 = new QName("", "1");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(extensionFunction0, coreOperationOr0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationMultiply1);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationMultiply coreOperationMultiply2 = new CoreOperationMultiply(expressionArray0[5], expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationMultiply2;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-3526), (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(2120, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionArray0[8] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(39, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      step0.toString();
      step0.isContextDependent();
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, ", ");
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      Byte byte0 = new Byte((byte)18);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, (-2147483647), nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.getFunctionName();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction1, expressionArray0[0]);
      coreOperationLessThanOrEqual0.isContextDependent();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationLessThanOrEqual0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.computeContextDependent();
      coreOperationOr0.args = expressionArray1;
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray2);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationOr0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(3191, coreOperationOr0.args);
      coreFunction0.functionName((EvalContext) null);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("unknownFunction3191()", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      step0.toString();
      step0.isContextDependent();
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, (String) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      Byte byte0 = new Byte((byte)40);
      CoreFunction coreFunction0 = new CoreFunction((byte)32, expressionArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-1870), nodeNameTest0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("count", "count");
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.ParentContext");
      Step step0 = new Step(6, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(81, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(42, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-209), processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-1), processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.getFunctionName();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      coreOperationOr0.computeContextDependent();
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(3191, expressionArray0);
      coreOperationOr0.computeContextDependent();
      coreOperationOr0.args = expressionArray1;
      coreFunction0.functionCount((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationOr0);
      QName qName0 = new QName((String) null, (String) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(865, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      QName qName0 = new QName("org.jdom.ProcessingInstruction");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "contains");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      QName qName0 = new QName("string-lenth");
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-681), (Expression[]) null);
      QName qName0 = new QName("``QW;fSE9");
      int int0 = 1633;
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1633, expressionArray0);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(1633, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("/|Z;-aGBhcw)Qmz");
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      step0.toString();
      Step[] stepArray0 = new Step[1];
      step0.isContextDependent();
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      Expression[] expressionArray1 = new Expression[3];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      Byte byte0 = new Byte((byte)32);
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(609, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction609()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("count", "count");
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("aP/*sf0W8W9GP:=n83m");
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      CoreFunction coreFunction0 = new CoreFunction(1130, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      step0.isContextDependent();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)53;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) locationPath0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) locationPath0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3716), expressionArray1);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("lang", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      QName qName0 = new QName("/|Z;-aGBhcw)Qmz");
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      QName qName0 = new QName("");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1344);
      Step step0 = new Step((-2362), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(1024, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2362), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationMultiply1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      coreOperationNegate0.toString();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationNegate0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray1);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1789569706), expressionArray0);
      coreFunction0.getArg2();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, (Expression) null);
      Step step2 = new Step(94, nodeNameTest0, expressionArray0);
      Step step3 = new Step((-383), nodeNameTest0, expressionArray0);
      Step step4 = new Step(94, nodeNameTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, (Expression) null);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationLessThan0, coreOperationSubtract0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      coreFunction0.toString();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, (Expression) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      int int0 = 28;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-30), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 7;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      int int0 = (-1736);
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("f");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(39, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2187), expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      CoreFunction coreFunction1 = new CoreFunction((-2187), expressionArray0);
      Object object0 = coreFunction1.functionTrue((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      QName qName0 = new QName("", "");
      UnionContext unionContext0 = new UnionContext(descendantContext0, (EvalContext[]) null);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, unionContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, descendantContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction1.functionNamespaceURI(rootContext0);
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2187()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.getArg1();
      NodeTest nodeTest0 = null;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2(z*");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(namespaceContext0, processingInstructionTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, (Expression) null);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[2]);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationGreaterThanOrEqual1, coreOperationGreaterThanOrEqual1);
      expressionArray0[4] = (Expression) nameAttributeTest1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-1147), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) nodeSetContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      QName qName0 = new QName((String) null, "/O'");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeSetContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, unionContext0, nodePointer0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      variablePointerFactory0.createNodePointer(nodePointer0, qName0, (Object) locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1789569706), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1789569706), nodeNameTest0, expressionArray0);
      stepArray0[3] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sM@'XI/1rmLJd5");
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(-(org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007), org.apache.commons.jxpath.ri.compiler.LocationPath@0000000006 * org.apache.commons.jxpath.ri.compiler.LocationPath@0000000006, -(org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      step0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3716), expressionArray1);
      assertEquals((-3716), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      CoreFunction coreFunction0 = new CoreFunction(4344, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      int int0 = 3;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[2];
      Integer.getInteger("w<");
      Constant constant0 = new Constant((Number) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("w<");
      coreOperationLessThan0.toString();
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(75, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("y");
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("normalize-space");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "&MV.vtItj");
      Step step0 = new Step((-189), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Step step2 = new Step(29, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-189), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, expressionPath0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, expressionPath0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      coreOperationLessThanOrEqual0.toString();
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction((-1256), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, (Expression) null);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1074, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) null);
      QName qName0 = new QName("iOPBf");
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[0], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3961);
      ChildContext childContext0 = new ChildContext(rootContext0, nodeTypeTest0, true, false);
      EvalContext evalContext0 = rootContext0.getConstantContext(childContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = 3;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      step0.isContextDependent();
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) locationPath0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) locationPath0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3716), expressionArray1);
      assertEquals((-3716), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3623, expressionArray0);
      QName qName0 = new QName("d&]");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      coreFunction1.functionString(precedingOrFollowingContext0);
      CoreFunction coreFunction2 = new CoreFunction(3623, expressionArray0);
      int int0 = coreFunction2.getFunctionCode();
      assertEquals(3623, int0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1750), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(38, expressionArray0);
      assertEquals(38, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Constant constant0 = new Constant((Number) null);
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("aL");
      Step step0 = new Step(26, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(5, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(1641, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.functionNull((EvalContext) null);
      QName qName0 = new QName("string-length", "string-length");
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1780), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1780()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Expression[] expressionArray1 = new Expression[3];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1409, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) selfContext0;
      CoreFunction coreFunction1 = new CoreFunction((-2147483647), expressionArray1);
      int int0 = coreFunction1.getFunctionCode();
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-1241), (Expression[]) null);
      Integer integer0 = new Integer(26);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      QName qName0 = new QName("<JEbU@Uf-\u0003BRy", "<JEbU@Uf-\u0003BRy");
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, locationPath0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: <JEbU@Uf-\u0003BRy:<JEbU@Uf-\u0003BRy
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(";NLl.N{3y+ 8ai^FXM");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-1750), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      QName qName0 = new QName("string-length", "string-length");
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-30), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-30()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      QName qName0 = new QName("", "value");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ".*5zz");
      coreFunction0.getFunctionName();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(37, expressionArray0);
      EvalContext evalContext0 = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction1, expressionArray0[0]);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationLessThanOrEqual0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThan0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionSubstring(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(namespaceContext0, processingInstructionTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1750), expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      QName qName0 = new QName("name");
      coreFunction0.computeValue((EvalContext) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        precedingOrFollowingContext0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short)30);
      Constant constant0 = new Constant(short0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1907, expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction1907()");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      coreFunction0.functionStringLength(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1907()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 mod org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("vaIe");
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContextArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      step0.isContextDependent();
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction((-2408), expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext(unionContext0, false, nodeNameTest0);
      coreFunction0.functionStringLength(ancestorContext0);
      assertEquals((-2408), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      QName qName0 = new QName("", "value");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ".*5zz");
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1750), expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      QName qName0 = new QName("name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        precedingOrFollowingContext0.nextSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      step0.toString();
      Step[] stepArray0 = new Step[1];
      step0.isContextDependent();
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction((-2147483647), expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionString(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.NamespaceContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      CoreFunction coreFunction0 = new CoreFunction(541, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction541()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 9;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1750), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1750()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName("", "");
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[4];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Step step0 = new Step((-2362), (NodeTest) null, expressionArray0);
      stepArray0[3] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationMultiply1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      coreOperationNegate0.toString();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationNegate0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      coreOperationLessThan0.args = expressionArray0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray1);
      EvalContext evalContext0 = null;
      Expression[] expressionArray2 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(2844, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      QName qName0 = new QName("'bIWB^qa");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2256), nodeNameTest0, expressionArray0);
      Step step1 = new Step((-2256), nodeNameTest0, expressionArray0);
      Step step2 = new Step(13, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step2;
      stepArray0[1] = step0;
      Step step3 = new Step((-338), (NodeTest) null, expressionArray0);
      stepArray0[2] = step3;
      stepArray0[3] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, coreFunction0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationOr0, coreOperationLessThan0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply1);
      coreOperationNegate0.toString();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationNegate0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction((-2256), expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      QName qName0 = new QName("");
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) div (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("s", "s");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) variableReference0;
      expressionArray1[7] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray1);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, processingInstructionTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()($s:s, -(org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003), $s:s, $s:s, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 < org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, $s:s, $s:s, $s:s)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Z:{xl#c>31H95F");
      Step step0 = new Step(0, nodeNameTest0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      PrecedingOrFollowingContext precedingOrFollowingContext1 = new PrecedingOrFollowingContext(precedingOrFollowingContext0, processingInstructionTest0, true);
      precedingOrFollowingContext1.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-984));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      PredicateContext predicateContext0 = new PredicateContext(childContext0, coreFunction0);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) childContext0;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1344);
      Step step0 = new Step((-2362), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(1024, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeTypeTest0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, coreOperationOr0);
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray1);
      coreFunction0.toString();
      nodeTypeTest0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, nodeTypeTest0, (Pointer) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1024()((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) < (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003), null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      precedingOrFollowingContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      CoreFunction coreFunction0 = new CoreFunction((-191), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-191()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1344);
      Step step0 = new Step((-2362), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[1];
      Step step1 = new Step(1024, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2362), (NodeTest) null, expressionArray0);
      step3.toString();
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      coreOperationNegate0.toString();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray1);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(1135, (Expression[]) null);
      JXPathContext.newContext((Object) coreFunction0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName(";a>0J(zq7%_/<$,", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1135()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(40);
      Constant constant0 = new Constant(integer0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      Object object0 = coreFunction0.functionSubstring(attributeContext0);
      assertEquals("false", object0);
      assertEquals(10, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1344);
      Step step0 = new Step((-2362), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(1024, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeTypeTest0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, coreOperationOr0);
      QName qName0 = new QName("");
      nodeTypeTest0.toString();
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray1);
      coreFunction0.toString();
      nodeTypeTest0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, nodeTypeTest0, (Pointer) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      ChildContext childContext0 = new ChildContext(rootContext0, nodeTypeTest0, true, true);
      PredicateContext predicateContext0 = new PredicateContext(childContext0, coreOperationOr0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1024()((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) < (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003), null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      precedingOrFollowingContext0.getContextNodePointer();
      coreFunction0.functionPosition(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("value");
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("value");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.toString();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "value(null, null, null)");
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 div org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005 + org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000006, (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      step0.isContextDependent();
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      Expression[] expressionArray1 = new Expression[3];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      Byte byte0 = new Byte((byte)32);
      Constant constant0 = new Constant(byte0);
      expressionArray1[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, (Expression) null);
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray1);
      expressionPath0.createContextForStep((EvalContext) null, (byte)32, nodeNameTest0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("value");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.toString();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      EvalContext[] evalContextArray0 = new EvalContext[1];
      coreFunction0.computeValue(evalContextArray0[0]);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(393, expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.getArgumentCount();
      assertEquals(393, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((-1760.7));
      Constant constant0 = new Constant(float0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      Step step0 = new Step((-1354), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      coreOperationMultiply0.toString();
      Step step1 = new Step(1399, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1399, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(0);
      Step step3 = new Step(18, nodeTypeTest1, expressionArray0);
      step3.isContextDependent();
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeTypeTest1, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1354), expressionArray0);
      nodeTypeTest0.toString();
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Z:{xl#c>31H95F");
      Step step0 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-2676), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      stepArray0[3] = step2;
      Step step3 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step3;
      Step step4 = new Step((-2676), nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step5 = new Step(0, nodeNameTest1, (Expression[]) null);
      stepArray0[6] = step5;
      Step step6 = new Step(0, nodeNameTest1, (Expression[]) null);
      stepArray0[7] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-891), (Expression[]) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1344);
      Step step0 = new Step((-2362), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(1024, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2362), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationMultiply1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      coreOperationNegate0.toString();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationNegate0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Step step4 = new Step(1024, (NodeTest) null, expressionArray0);
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray1);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) < (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-222), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      EvalContext evalContext0 = null;
      QName qName0 = new QName((String) null, "Q5!d=");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      namespaceContext0.reset();
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.iterate(initialContext0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1344);
      Step step0 = new Step((-2362), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(1024, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeTypeTest0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, coreOperationOr0);
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray1);
      coreFunction0.toString();
      nodeTypeTest0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, nodeTypeTest0, (Pointer) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      ChildContext childContext0 = new ChildContext(rootContext0, nodeTypeTest0, true, true);
      PredicateContext predicateContext0 = new PredicateContext(childContext0, coreOperationOr0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1024()((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) < (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003), null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("q3!zYmQMG#{p", "q3!zYmQMG#{p");
      Expression[] expressionArray1 = new Expression[9];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray1[0]);
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-727), (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName(">`TO}#", ">`TO}#");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-727()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      precedingOrFollowingContext0.getContextNodePointer();
      coreFunction0.functionPosition(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Z:{xl#c>31H95F");
      Step step0 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-2676), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-693), nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-2676), nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step6 = new Step(0, nodeNameTest1, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step(0, nodeNameTest1, (Expression[]) null);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest1);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      expressionPath0.createContextForStep(ancestorContext0, (-693), processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      QName qName0 = new QName("qst+", "qst+");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Step step0 = new Step(3, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Step step1 = new Step(3, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(4, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(512, nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      step3.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, (Expression[]) null, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, expressionPath0);
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(898, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction898()()", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QName qName0 = new QName(">`TO}#", ">`TO}#");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction((-2117), (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals((-2117), coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((-1760.7));
      Constant constant0 = new Constant(float0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      Step step0 = new Step((-1354), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      coreOperationMultiply0.toString();
      Step step1 = new Step(1399, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1399, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(0);
      Step step3 = new Step(18, nodeTypeTest1, expressionArray0);
      step3.isContextDependent();
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeTypeTest1, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1354), expressionArray0);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((-1760.7));
      Constant constant0 = new Constant(float0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      Step step0 = new Step((-1354), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      coreOperationMultiply0.toString();
      Step step1 = new Step(1399, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1399, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(0);
      nodeTypeTest1.toString();
      Step step3 = new Step(18, nodeTypeTest1, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals((-1), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-222), expressionArray0);
      JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      int int0 = 817;
      CoreFunction coreFunction1 = new CoreFunction(817, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.NodeSetContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1091), expressionArray0);
      Step step0 = new Step((-1091), (NodeTest) null, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      coreOperationMultiply0.toString();
      Step step1 = new Step((-1091), (NodeTest) null, expressionArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) coreFunction0;
      Step step2 = new Step((-4559), (NodeTest) null, expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1399);
      Step step3 = new Step(0, nodeTypeTest0, expressionArray0);
      Step step4 = new Step(1399, (NodeTest) null, expressionArray0);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step3;
      stepArray0[1] = step4;
      stepArray0[2] = step0;
      stepArray0[3] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction((-4559), expressionArray1);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1091()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((-1760.7));
      Constant constant0 = new Constant(float0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(89, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1344);
      Step step0 = new Step((-2362), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(1024, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2362), (NodeTest) null, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], coreOperationOr0);
      QName qName0 = new QName("0iBsE,");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(1379, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-2362), expressionArray1);
      coreFunction1.toString();
      assertEquals((-2362), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("F\"u");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationNotEqual0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationUnion0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, (Step[]) null);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-727), (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName(">`TO}#", ">`TO}#");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      namespaceContext0.reset();
      coreFunction0.iterate(namespaceContext0);
      coreFunction0.getArgumentCount();
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.getFunctionCode();
      coreFunction0.getFunctionCode();
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("q3!zYmQMG#{p", "q3!zYmQMG#{p");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = null;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray1[0]);
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      expressionArray1[4] = null;
      expressionArray1[5] = (Expression) coreOperationEqual0;
      expressionArray1[6] = null;
      expressionArray1[7] = null;
      expressionArray1[8] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("value");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.toString();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 div org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005 + org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000006, (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      coreOperationMultiply0.computeContextDependent();
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2147483647), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      step0.isContextDependent();
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) locationPath0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) locationPath0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3716), expressionArray1);
      assertEquals((-3716), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[2]);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with((org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000001) > (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000001), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000001) * (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Z:{xl#c>31H95F");
      Step step0 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-2676), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-693), nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-2676), nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step6 = new Step(0, nodeNameTest1, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step((-1), nodeNameTest1, (Expression[]) null);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest1);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      expressionPath0.createContextForStep(ancestorContext0, (-693), processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1091), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1091()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(41, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(41, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      Step step2 = new Step(41, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(41, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, locationPath0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNegate0, expressionArray1[4]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(locationPath0, expressionArray1[5]);
      expressionArray0[3] = (Expression) coreOperationMod1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant("");
      expressionArray0[5] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[5], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-960), expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-960()", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((-1760.7));
      Constant constant0 = new Constant(float0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      Step step0 = new Step((-1354), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      coreOperationMultiply0.toString();
      Step step1 = new Step(1399, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1399, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(0);
      Step step3 = new Step(18, nodeTypeTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeTypeTest1, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1354), expressionArray0);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionID(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Ee0$PDzj]2*");
      Step step0 = new Step(2240, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(484, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(490, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(484, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-222), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      jXPathContext0.registerNamespace("number", "number");
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      coreFunction0.functionTrue(nodeSetContext0);
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5201, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1344);
      Step step0 = new Step((-2362), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(1024, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1024, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2362), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationMultiply1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationNegate0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationMultiply1, coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationLessThan1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2362), expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, true);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(childContext0, basicNodeSet0);
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2362()(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000008 * org.apache.commons.jxpath.ri.compiler.LocationPath@0000000008, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000009 * (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004), (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) = org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000012, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000010 < org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000014, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000008 != org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000013)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-499), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3418, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3418, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-499), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2550, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(3418, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(40, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step((-499), processingInstructionTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      assertEquals(0, coreFunction0.getFunctionCode());
  }
}
