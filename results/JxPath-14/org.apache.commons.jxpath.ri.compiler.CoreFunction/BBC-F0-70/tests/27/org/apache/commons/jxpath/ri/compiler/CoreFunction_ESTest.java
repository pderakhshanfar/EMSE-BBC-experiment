/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:45:34 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = (-748);
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("ten\"e*");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("ten\"e*", qName0.toString());
      assertEquals("ten\"e*", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("ten\"e*", qName0.toString());
      assertEquals("ten\"e*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationEqual0);
      assertNull(qName0.getPrefix());
      assertEquals("ten\"e*", qName0.toString());
      assertEquals("ten\"e*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      coreOperationEqual0.args = expressionArray0;
      assertNull(qName0.getPrefix());
      assertEquals("ten\"e*", qName0.toString());
      assertEquals("ten\"e*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-748), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-748), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("\"p21[ ZU|");
      assertNotNull(qName0);
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1114, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1114, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(22, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(22, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(NaN, NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("\"p21[ ZU|");
      assertNotNull(qName0);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1114, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1114, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(22, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(22, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      // Undeclared exception!
      try { 
        coreFunction0.functionName(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("\"p21[ ZU|");
      assertNotNull(qName0);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1114, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1114, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(22, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(22, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("\"p21[ ZU|");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertEquals("\"p21[ ZU|", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertEquals(2, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1114, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertEquals(1114, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(22, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"p21[ ZU|", qName0.toString());
      assertEquals("\"p21[ ZU|", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\"p21[ ZU|", nodeNameTest0.toString());
      assertEquals(22, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction((-418), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-418), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("}");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant((String) null);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant1, constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(coreOperationMod0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[4] = (Expression) expressionPath0;
      Constant constant2 = new Constant("}");
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertNotNull(constant2);
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",</!T/Cr`<MjWv");
      assertFalse(boolean0);
      
      expressionArray0[5] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-128), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-128), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1280, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(1280, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-781));
      assertNotNull(nodeTypeTest0);
      assertEquals((-781), nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) attributeContext0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest0, false, false);
      assertNotNull(childContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      Pointer pointer0 = childContext0.getSingleNodePointer();
      assertNull(pointer0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, nodeTypeTest0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(2950, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2950, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte)58);
      assertNotNull(byte0);
      assertEquals((byte)58, (byte)byte0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(681, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(681, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(3, expressionArray0.length);
      assertEquals(681, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals(681, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(681, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(1191, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(1191, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3315);
      assertNotNull(nodeTypeTest0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((byte)58, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals(58, step0.getAxis());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(3315, nodeTypeTest0.getNodeType());
      
      String string0 = coreFunction0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(string0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(681, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      ancestorContext0.reset();
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(3315, nodeTypeTest0.getNodeType());
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, (NodeSet) null);
      assertNotNull(nodeSetContext0);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(3315, nodeTypeTest0.getNodeType());
      
      Object object0 = coreFunction0.functionSubstring(nodeSetContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(681, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals("", object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1191()(58, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float((-2026.84F));
      assertNotNull(float0);
      assertEquals((-2026.84F), (float)float0, 0.01F);
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3315, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3315, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3315);
      assertNotNull(nodeTypeTest0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(3315, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals(3315, step0.getAxis());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3315, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3315, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Byte byte0 = new Byte((byte)117);
      assertNotNull(byte0);
      assertEquals((byte)117, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)117, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(117, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      assertNotNull(nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(5, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(5, step0.getAxis());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ceiling");
      assertNotNull(processingInstructionTest0);
      assertEquals("ceiling", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("ceiling", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      String string0 = coreFunction0.toString();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(string0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(117, coreFunction0.getFunctionCode());
      assertEquals("unknownFunction117()(117, 117)", string0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals("ceiling", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      Object object0 = coreFunction0.functionSubstring(ancestorContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(117, coreFunction0.getFunctionCode());
      assertEquals("ceiling", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float((-2026.84F));
      assertNotNull(float0);
      assertEquals((-2026.84F), (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationSubtract0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3315, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(3315, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3315);
      assertNotNull(nodeTypeTest0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(3315, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals(3315, step0.getAxis());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(3315, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionSubstring(ancestorContext0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(3315, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals("false", object0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-3739), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-3739), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float((-2026.84F));
      assertNotNull(float0);
      assertEquals((-2026.84F), (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3315, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3315, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3315);
      assertNotNull(nodeTypeTest0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1326, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals(1326, step0.getAxis());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3315, coreFunction0.getFunctionCode());
      assertEquals("fals2", object0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3315, coreFunction0.getFunctionCode());
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float((-2026.84F));
      assertNotNull(float0);
      assertEquals((-2026.84F), (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[0];
      coreOperationSubtract0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3315, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3315, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3315);
      assertNotNull(nodeTypeTest0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1326, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(3, expressionArray1.length);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertEquals(1326, step0.getAxis());
      
      boolean boolean0 = coreOperationSubtract0.computeContextDependent();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(boolean0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(3315, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-128));
      assertNotNull(byte0);
      assertEquals((byte) (-128), (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-128), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-128), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(3668, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3668, coreFunction1.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("@xml:lang");
      assertNotNull(processingInstructionTest0);
      assertEquals("@xml:lang", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("@xml:lang", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(8, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) unionContext0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(8, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      Integer integer0 = new Integer((-612));
      assertNotNull(integer0);
      assertEquals((-612), (int)integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(8, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(8, evalContextArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      Boolean boolean0 = (Boolean)coreFunction1.functionLang(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(boolean0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertEquals(8, evalContextArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3668, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float((-2026.84F));
      assertNotNull(float0);
      assertEquals((-2026.84F), (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3310, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3310, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-989));
      assertNotNull(nodeTypeTest0);
      assertEquals((-989), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1326, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-989), nodeTypeTest0.getNodeType());
      assertEquals(1326, step0.getAxis());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals((-989), nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3310, coreFunction0.getFunctionCode());
      assertEquals("fals2", object0);
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3310, coreFunction0.getFunctionCode());
      assertEquals("unknownFunction3310()", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(678, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(678, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction678()(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, -2026.8399658203125)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("`");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationSubtract0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationMultiply0);
      assertNotNull(coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      Constant constant1 = new Constant("`");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Constant constant2 = new Constant("`");
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertNotNull(constant2);
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      
      expressionArray0[4] = (Expression) constant2;
      QName qName0 = new QName("`");
      assertNotNull(qName0);
      assertEquals("`", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals("`", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant3 = new Constant(double0);
      assertFalse(constant3.equals((Object)constant0));
      assertFalse(constant3.equals((Object)constant1));
      assertFalse(constant3.equals((Object)constant2));
      assertNotNull(constant3);
      assertFalse(constant3.isContextDependent());
      assertFalse(constant3.computeContextDependent());
      
      expressionArray0[6] = (Expression) constant3;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(79, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(79, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`");
      assertNotNull(processingInstructionTest0);
      assertEquals("`", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-364), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertEquals("`", processingInstructionTest0.getTarget());
      assertEquals((-364), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2164, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(8, expressionArray0.length);
      assertEquals("`", processingInstructionTest0.getTarget());
      assertEquals(2164, step1.getAxis());
      
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("true113");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("true113", processingInstructionTest1.getTarget());
      
      Step step2 = new Step((-106184098), processingInstructionTest1, expressionArray0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(8, expressionArray0.length);
      assertEquals("true113", processingInstructionTest1.getTarget());
      assertEquals((-106184098), step2.getAxis());
      
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("`", nodeNameTest0.toString());
      assertEquals("`", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`", qName0.toString());
      
      Step step3 = new Step(5, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(8, expressionArray0.length);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("`", nodeNameTest0.toString());
      assertEquals(5, step3.getAxis());
      assertEquals("`", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`", qName0.toString());
      
      stepArray0[3] = step3;
      Step step4 = new Step(7, processingInstructionTest1, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(step4);
      assertEquals(8, expressionArray0.length);
      assertEquals(7, step4.getAxis());
      assertEquals("true113", processingInstructionTest1.getTarget());
      
      stepArray0[4] = step4;
      Step step5 = new Step(825, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertEquals(8, expressionArray0.length);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("`", nodeNameTest0.toString());
      assertEquals(825, step5.getAxis());
      assertEquals("`", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`", qName0.toString());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(constant2, expressionArray0, stepArray0);
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant3));
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(nodeSetContext0);
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant3));
      assertNotNull(evalContext0);
      assertEquals(8, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertNotSame(constant2, constant0);
      assertNotSame(constant2, constant1);
      assertNotSame(constant2, constant3);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, true, processingInstructionTest0);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant3));
      assertNotNull(descendantContext0);
      assertEquals(8, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals("`", processingInstructionTest0.getTarget());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      
      // Undeclared exception!
      coreFunction0.functionPosition(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = new Double(735.7561303378969);
      assertNotNull(double0);
      assertEquals(735.7561303378969, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationSubtract0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract0, expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "'>~");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("8*ymx*!|{)j.L'UMee", "}#J;!5yZ/Yt}Z1JU");
      assertNotNull(qName0);
      assertEquals("}#J;!5yZ/Yt}Z1JU", qName0.getName());
      assertEquals("8*ymx*!|{)j.L'UMee:}#J;!5yZ/Yt}Z1JU", qName0.toString());
      assertEquals("8*ymx*!|{)j.L'UMee", qName0.getPrefix());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, expressionArray0[0], locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, expressionArray0.length);
      assertEquals("}#J;!5yZ/Yt}Z1JU", qName0.getName());
      assertEquals("8*ymx*!|{)j.L'UMee:}#J;!5yZ/Yt}Z1JU", qName0.toString());
      assertEquals("8*ymx*!|{)j.L'UMee", qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[0], beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("}#J;!5yZ/Yt}Z1JU", qName0.getName());
      assertEquals("8*ymx*!|{)j.L'UMee:}#J;!5yZ/Yt}Z1JU", qName0.toString());
      assertEquals("8*ymx*!|{)j.L'UMee", qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("}#J;!5yZ/Yt}Z1JU", qName0.getName());
      assertEquals("8*ymx*!|{)j.L'UMee:}#J;!5yZ/Yt}Z1JU", qName0.toString());
      assertEquals("8*ymx*!|{)j.L'UMee", qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("}#J;!5yZ/Yt}Z1JU", qName0.getName());
      assertEquals("8*ymx*!|{)j.L'UMee:}#J;!5yZ/Yt}Z1JU", qName0.toString());
      assertEquals("8*ymx*!|{)j.L'UMee", qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("_\fFfx0;iPXr w");
      assertNotNull(qName0);
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, variableReference0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3603), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-3603), coreFunction0.getFunctionCode());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      assertNotNull(nodeTypeTest0);
      assertEquals(23, nodeTypeTest0.getNodeType());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, nodeTypeTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      EvalContext evalContext0 = rootContext0.getConstantContext(precedingOrFollowingContext0);
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      
      ParentContext parentContext0 = new ParentContext(evalContext0, nodeTypeTest0);
      assertNotNull(parentContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("_\fFfx0;iPXr w", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("_\fFfx0;iPXr w", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: _\fFfx0;iPXr w
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1303, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1303, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      NodePointer nodePointer0 = attributeContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      evalContextArray0[0] = (EvalContext) rootContext0;
      String string0 = attributeContext0.toString();
      assertNotNull(string0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals("Empty expression context", string0);
      
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(2, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      unionContext0.reset();
      assertEquals(2, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-65529), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-65529), coreFunction1.getFunctionCode());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction1, locale0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-65529), coreFunction1.getFunctionCode());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreFunction1, beanPointer0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-65529), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-65529), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-65529), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-65529), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      Boolean boolean1 = (Boolean)coreFunction0.functionTrue(rootContext1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-65529), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertTrue(boolean1);
      
      Object object0 = coreFunction0.functionLocalName(initialContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-65529), coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-65529()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double double0 = new Double(734.97132);
      assertNotNull(double0);
      assertEquals(734.97132, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationSubtract0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1285, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1285, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-989));
      assertNotNull(nodeTypeTest0);
      assertEquals((-989), nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      Step step0 = new Step((-989), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(1, expressionArray1.length);
      assertEquals((-989), nodeTypeTest0.getNodeType());
      assertEquals((-989), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(437, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals((-989), nodeTypeTest0.getNodeType());
      assertEquals(437, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals((-989), nodeTypeTest0.getNodeType());
      
      UnionContext unionContext0 = new UnionContext(ancestorContext0, (EvalContext[]) null);
      assertNotNull(unionContext0);
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals((-989), nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals((-989), nodeTypeTest0.getNodeType());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(attributeContext0, 601, nodeTypeTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNull(evalContext0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals((-989), nodeTypeTest0.getNodeType());
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(1285, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("0", object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1285()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 734.97132, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte)26);
      assertNotNull(byte0);
      assertEquals((byte)26, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-6015), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-6015), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-6015), coreFunction0.getFunctionCode());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("BeanInfo [class = ");
      assertNotNull(qName0);
      assertEquals("BeanInfo [class = ", qName0.toString());
      assertEquals("BeanInfo [class = ", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("BeanInfo [class = ", qName0.toString());
      assertEquals("BeanInfo [class = ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      assertNotNull(coreOperationDivide0);
      assertEquals("BeanInfo [class = ", qName0.toString());
      assertEquals("BeanInfo [class = ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(135, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(135, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: BeanInfo [class = 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName((String) null, "true");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.toString());
      assertEquals("true", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(502, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(502, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-128));
      assertNotNull(byte0);
      assertEquals((byte) (-128), (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-128), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-128), coreFunction0.getFunctionCode());
      
      coreFunction0.args = expressionArray0;
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-128), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-128), coreFunction0.getFunctionCode());
      assertEquals(1.0, object0);
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-128), coreFunction0.getFunctionCode());
      assertEquals("-128", object1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("Exception trying to set value with xpath ");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreFunction0, beanPointer0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(8, evalContextArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      String string0 = coreOperationSubtract0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction40()", string1);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(false, object0);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)string1));
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("tJwbx^J+V5Yxx\"ch%}c");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Byte byte0 = new Byte((byte) (-85));
      assertNotNull(byte0);
      assertEquals((byte) (-85), (byte)byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("tJwbx^J+V5Yxx\"ch%}c");
      assertNotNull(processingInstructionTest0);
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(17, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      assertEquals(17, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((byte) (-85), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      assertEquals((-85), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1313), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(5, expressionArray0.length);
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      assertEquals((-1313), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(17, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(5, expressionArray0.length);
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      assertEquals(17, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(95, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(5, expressionArray0.length);
      assertEquals(95, step4.getAxis());
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      
      stepArray0[4] = step4;
      Step step5 = new Step(2299, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertNotNull(step5);
      assertEquals(5, expressionArray0.length);
      assertEquals(2299, step5.getAxis());
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      Step step6 = new Step(30, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      assertEquals(5, expressionArray0.length);
      assertEquals(30, step6.getAxis());
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(coreOperationNegate0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals("tJwbx^J+V5Yxx\"ch%}c", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.compute(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      String string0 = coreOperationSubtract0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H-_$o@CIAU^nef P");
      assertFalse(boolean0);
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals("unknownFunction40()", string1);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(false, object0);
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      String string0 = coreOperationSubtract0.toString();
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-897), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-897), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = coreOperationGreaterThan0.toString();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      EvalContext evalContext0 = null;
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-897), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((byte)18, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals("", object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(18, 18)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[12];
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction((-970), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(12, expressionArray0.length);
      assertEquals(12, coreFunction0.getArgumentCount());
      assertEquals((-970), coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-970), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray1.length);
      assertEquals((-970), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction((-970), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-970), coreFunction2.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-970));
      assertNotNull(nodeTypeTest0);
      assertEquals((-970), nodeTypeTest0.getNodeType());
      
      ChildContext childContext0 = new ChildContext(evalContext0, nodeTypeTest0, false, false);
      assertNotNull(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals((-970), nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      
      Object object0 = coreFunction2.functionLang(childContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getPosition());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-970), coreFunction2.getFunctionCode());
      assertEquals((-970), nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals(false, object0);
      
      Object object1 = coreFunction2.functionNamespaceURI(childContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(object1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getPosition());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-970), coreFunction2.getFunctionCode());
      assertEquals((-970), nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      coreOperationSubtract0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-68));
      assertNotNull(byte0);
      assertEquals((byte) (-68), (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], constant0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(9, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertNotNull(byte0);
      assertEquals((byte)18, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction40()", string0);
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(1537, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1537, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1537, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1537, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, expressionArray0[1]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(1537, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(1537, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2402));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2402), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-2402), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(7, expressionArray1.length);
      assertEquals((-2402), nodeTypeTest0.getNodeType());
      assertEquals((-2402), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2402), nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2402), nodeTypeTest0.getNodeType());
      assertEquals((-2402), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(889, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2402), nodeTypeTest0.getNodeType());
      assertEquals(889, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(889, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(7, expressionArray1.length);
      assertEquals((-2402), nodeTypeTest0.getNodeType());
      assertEquals(889, step3.getAxis());
      
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step4 = new Step((-2402), processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(0, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-2402), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(10, nodeTypeTest0, expressionArray1);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step5);
      assertEquals(7, expressionArray1.length);
      assertEquals(10, step5.getAxis());
      assertEquals((-2402), nodeTypeTest0.getNodeType());
      
      stepArray0[5] = step5;
      Step step6 = new Step(889, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      assertEquals(7, expressionArray1.length);
      assertEquals(889, step6.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray1.length);
      assertEquals(7, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationAnd0;
      Constant constant1 = new Constant((Number) null);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray1[2] = (Expression) constant1;
      Constant constant2 = new Constant("org.apache.commons.jxpath.PackageFunctions");
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertNotNull(constant2);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      
      expressionArray1[3] = (Expression) constant2;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, expressionPath0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray1.length);
      assertEquals(7, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, coreOperationAnd0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.equals((Object)constant2));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(7, expressionArray1.length);
      assertEquals(7, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray1[0], expressionPath0);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.equals((Object)constant2));
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(7, expressionArray1.length);
      assertEquals(7, stepArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[6] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-2402), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray1.length);
      assertEquals((-2402), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals((-2402), nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(2, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-472), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-472), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-405), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-405), coreFunction0.getFunctionCode());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-405), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-405), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionSubstringBefore((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-405), coreFunction1.getFunctionCode());
      assertEquals("", object0);
      
      Object object1 = coreFunction1.functionStartsWith((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-405), coreFunction1.getFunctionCode());
      assertEquals(true, object1);
      
      Object object2 = coreFunction1.functionConcat((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object2.equals((Object)object0));
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-405), coreFunction1.getFunctionCode());
      assertEquals("", object2);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg2();
      assertNull(expression0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      expressionArray0[0] = null;
      Double double0 = new Double(30);
      assertNotNull(double0);
      assertEquals(30.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = (-1152);
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("o=+|wuL`q?](");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationEqual0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[3] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-1152), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1152), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-607), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-607), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte) (-105));
      assertNotNull(byte0);
      assertEquals((byte) (-105), (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction((-2738), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2738), coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2738), coreFunction0.getFunctionCode());
      assertEquals("unknownFunction-2738()", string0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "9l4@e36Yg={43,b6@!2");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(28, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(3, expressionArray1.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(28, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2738), nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray1.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-2738), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(61, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(61, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-2738), nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(3, expressionArray1.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-2738), step3.getAxis());
      
      stepArray0[3] = step3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("parent");
      assertNotNull(processingInstructionTest0);
      assertEquals("parent", processingInstructionTest0.getTarget());
      
      Step step4 = new Step(1, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(1, expressionArray0.length);
      assertEquals("parent", processingInstructionTest0.getTarget());
      assertEquals(1, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-466), processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals(1, expressionArray0.length);
      assertEquals("parent", processingInstructionTest0.getTarget());
      assertEquals((-466), step5.getAxis());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray1[0] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";/");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2478, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2478, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1014);
      assertNotNull(nodeTypeTest0);
      assertEquals(1014, nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals(1014, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      
      String string1 = nodeTypeTest0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1014, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string1);
      
      String string2 = nodeTypeTest0.toString();
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1014, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string2);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(1014, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      int int0 = attributeContext0.getCurrentPosition();
      assertEquals(1014, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, int0);
      
      boolean boolean2 = attributeContext0.setPosition(2478);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1014, nodeTypeTest0.getNodeType());
      assertEquals(1, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(boolean2);
      
      List list0 = attributeContext0.getContextNodeList();
      assertNotNull(list0);
      assertEquals(1014, nodeTypeTest0.getNodeType());
      assertEquals(1, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Object object0 = coreFunction0.functionStringLength(attributeContext0);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2478, coreFunction0.getFunctionCode());
      assertEquals(1014, nodeTypeTest0.getNodeType());
      assertEquals(1, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0.0, object0);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertNull(object1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2478, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, evalContextArray0.length);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      Consumer<DecimalFormat> consumer0 = (Consumer<DecimalFormat>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      unionContext0.forEachRemaining(consumer0);
      assertEquals(0, evalContextArray0.length);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(1, unionContext0.getPosition());
      
      boolean boolean3 = unionContext0.hasNext();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, evalContextArray0.length);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(1, unionContext0.getPosition());
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("eP{?~N<ep5", "eP{?~N<ep5");
      assertNotNull(qName0);
      assertEquals("eP{?~N<ep5", qName0.getName());
      assertEquals("eP{?~N<ep5:eP{?~N<ep5", qName0.toString());
      assertEquals("eP{?~N<ep5", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("eP{?~N<ep5", qName0.getName());
      assertEquals("eP{?~N<ep5:eP{?~N<ep5", qName0.toString());
      assertEquals("eP{?~N<ep5", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      assertNotNull(coreOperationMod0);
      assertEquals("eP{?~N<ep5", qName0.getName());
      assertEquals("eP{?~N<ep5:eP{?~N<ep5", qName0.toString());
      assertEquals("eP{?~N<ep5", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, coreOperationMod0);
      assertNotNull(coreOperationDivide0);
      assertEquals("eP{?~N<ep5", qName0.getName());
      assertEquals("eP{?~N<ep5:eP{?~N<ep5", qName0.toString());
      assertEquals("eP{?~N<ep5", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "|K,Zu");
      assertNotNull(nodeNameTest0);
      assertEquals("eP{?~N<ep5", qName0.getName());
      assertEquals("eP{?~N<ep5:eP{?~N<ep5", qName0.toString());
      assertEquals("eP{?~N<ep5", qName0.getPrefix());
      assertEquals("|K,Zu", nodeNameTest0.getNamespaceURI());
      assertEquals("eP{?~N<ep5:eP{?~N<ep5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      AttributeContext attributeContext0 = new AttributeContext(initialContext0, nodeNameTest0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(attributeContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("eP{?~N<ep5", qName0.getName());
      assertEquals("eP{?~N<ep5:eP{?~N<ep5", qName0.toString());
      assertEquals("eP{?~N<ep5", qName0.getPrefix());
      assertEquals("|K,Zu", nodeNameTest0.getNamespaceURI());
      assertEquals("eP{?~N<ep5:eP{?~N<ep5", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: eP{?~N<ep5:eP{?~N<ep5
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1526), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1526), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2535);
      assertNotNull(nodeTypeTest0);
      assertEquals(2535, nodeTypeTest0.getNodeType());
      
      int int0 = 3548;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      boolean boolean0 = evalContext0.setPosition((-998));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals((-998), evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(58, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(58, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertNotNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals((-998), evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(58, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0.0, object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction58()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals("sum", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[0], expressionArray1, (Step[]) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray1.length);
      
      expressionArray1[4] = (Expression) expressionPath0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(912, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(912, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction1.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(134217728, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(134217728, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(134217728, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray1.length);
      assertEquals(134217728, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSum(evalContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(134217728, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0.0, object0);
      
      Object object1 = coreFunction1.functionNamespaceURI(evalContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(134217728, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationAnd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      String string0 = coreOperationLessThan0.toString();
      assertNotNull(string0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) variableReference0;
      coreOperationLessThan0.args = expressionArray0;
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      String string1 = variableReference0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("$", string1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      assertNotNull(nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Double double0 = new Double((-37));
      assertNotNull(double0);
      assertEquals((-37.0), (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, constant0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("c) 2BBW>4G!7Vko?i-V");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.getName());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.getName());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.getName());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("c) 2BBW>4G!7Vko?i-V");
      assertNotNull(processingInstructionTest0);
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-37), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      assertEquals((-37), step0.getAxis());
      
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("c) 2BBW>4G!7Vko?i-V", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.getName());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.toString());
      
      Step step1 = new Step((-299), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("c) 2BBW>4G!7Vko?i-V", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-299), step1.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.getName());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.toString());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1004), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(5, expressionArray0.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("c) 2BBW>4G!7Vko?i-V", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1004), step2.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.getName());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.toString());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-299), processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(5, expressionArray0.length);
      assertEquals((-299), step3.getAxis());
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1004), nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(5, expressionArray0.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("c) 2BBW>4G!7Vko?i-V", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1004), step4.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.getName());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.toString());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-253), processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertNotNull(step5);
      assertEquals(5, expressionArray0.length);
      assertEquals((-253), step5.getAxis());
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-253), processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertNotNull(step6);
      assertEquals(5, expressionArray0.length);
      assertEquals((-253), step6.getAxis());
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      Step step7 = new Step((-2311), processingInstructionTest0, expressionArray0);
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step4));
      assertNotNull(step7);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2311), step7.getAxis());
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      
      stepArray0[7] = step7;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationSubtract0, coreOperationNotEqual0);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertNotNull(coreOperationDivide1);
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationDivide1;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      expressionArray1[2] = (Expression) constant0;
      Step step8 = new Step((-37), processingInstructionTest0, expressionArray1);
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step5));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step8);
      assertEquals(3, expressionArray1.length);
      assertEquals((-37), step8.getAxis());
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationDivide0.equals((Object)coreOperationDivide1));
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide1);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertFalse(coreOperationDivide0.equals((Object)coreOperationDivide1));
      assertNotNull(coreOperationNegate0);
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-37), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-37), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext(attributeContext0, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      ParentContext parentContext0 = new ParentContext(selfContext0, nodeNameTest0);
      assertNotNull(parentContext0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("c) 2BBW>4G!7Vko?i-V", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.getName());
      assertEquals("c) 2BBW>4G!7Vko?i-V", qName0.toString());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals("c) 2BBW>4G!7Vko?i-V", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore(parentContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(944, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(944, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(2088, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2088, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(944, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(944, coreFunction2.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(944);
      assertNotNull(nodeTypeTest0);
      assertEquals(944, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(944, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction2.functionContains(ancestorContext0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(944, coreFunction2.getFunctionCode());
      assertEquals(944, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      Step step0 = new Step(60, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(60, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2999), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals((-2999), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(3134, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(3134, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(60, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(60, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(1, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(1, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(3134, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals(3134, step5.getAxis());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      stepArray0[5] = step5;
      Step step6 = new Step(60, nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertNotNull(step6);
      assertEquals(3, expressionArray0.length);
      assertEquals(60, step6.getAxis());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      stepArray0[6] = step6;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      Step step7 = new Step(1, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertNotNull(step7);
      assertEquals(3, expressionArray0.length);
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(1, step7.getAxis());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(60, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(60, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(parentContext0);
      assertNull(nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionNull(parentContext0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(8, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(8, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      QName qName1 = new QName("", "R4gee&[VZ`&");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("", qName1.getPrefix());
      assertEquals("R4gee&[VZ`&", qName1.getName());
      assertEquals(":R4gee&[VZ`&", qName1.toString());
      
      VariableReference variableReference1 = new VariableReference(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      assertEquals("", qName1.getPrefix());
      assertEquals("R4gee&[VZ`&", qName1.getName());
      assertEquals(":R4gee&[VZ`&", qName1.toString());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      
      expressionArray0[4] = (Expression) variableReference1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], coreOperationLessThan0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, expressionArray0[2]);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertNotNull(coreOperationEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationUnion0, variableReference1);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(coreOperationDivide1);
      assertEquals(8, expressionArray0.length);
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("", qName1.getPrefix());
      assertEquals("R4gee&[VZ`&", qName1.getName());
      assertEquals(":R4gee&[VZ`&", qName1.toString());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      
      expressionArray0[6] = (Expression) coreOperationDivide1;
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(8, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, int0);
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte)8);
      assertNotNull(byte0);
      assertEquals((byte)8, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)8, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(1.0, object1);
      
      Object object2 = coreFunction0.compute((EvalContext) null);
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals("8", object2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("]");
      assertNotNull(qName0);
      assertEquals("]", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.getName());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("]", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.getName());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      assertFalse(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("]", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.getName());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "]", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("]", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.getName());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("]", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.getName());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(locale0));
      assertEquals(0, linkedList1.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      assertNotNull(list0);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale locale1 = Locale.lookup(linkedList0, list0);
      assertNull(locale1);
      assertFalse(linkedList1.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      CoreFunction coreFunction1 = new CoreFunction((-463), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-463), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      String string0 = (String)coreFunction1.functionSubstring(rootContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals((-463), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("]", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("]", qName0.getName());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("iS2v`QV", "org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.getName());
      assertEquals("iS2v`QV", qName0.getPrefix());
      assertEquals("iS2v`QV:org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.getName());
      assertEquals("iS2v`QV", qName0.getPrefix());
      assertEquals("iS2v`QV:org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      
      Locale locale0 = Locale.forLanguageTag("unknownFunction");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.getName());
      assertEquals("iS2v`QV", qName0.getPrefix());
      assertEquals("iS2v`QV:org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.getName());
      assertEquals("iS2v`QV", qName0.getPrefix());
      assertEquals("iS2v`QV:org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.getName());
      assertEquals("iS2v`QV", qName0.getPrefix());
      assertEquals("iS2v`QV:org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: iS2v`QV:org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationGreaterThan0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationNotEqual0);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      Step step0 = new Step((-1866), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals((-1866), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1866), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals((-1866), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1866), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals((-1866), step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      assertNotNull(coreOperationNegate0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1866), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1866), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, expressionArray0[0]);
      assertNotNull(predicateContext0);
      assertEquals(4, expressionArray0.length);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeNameTest0, false, false);
      assertNotNull(childContext0);
      assertEquals(4, expressionArray0.length);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals(4, expressionArray0.length);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals(4, expressionArray0.length);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      // Undeclared exception!
      coreFunction0.functionNumber(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("/d>b0LE)L/i7", ", ");
      assertNotNull(qName0);
      assertEquals("/d>b0LE)L/i7", qName0.getPrefix());
      assertEquals(", ", qName0.getName());
      assertEquals("/d>b0LE)L/i7:, ", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("/d>b0LE)L/i7", qName0.getPrefix());
      assertEquals(", ", qName0.getName());
      assertEquals("/d>b0LE)L/i7:, ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("/d>b0LE)L/i7", qName0.getPrefix());
      assertEquals(", ", qName0.getName());
      assertEquals("/d>b0LE)L/i7:, ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(5, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[2]);
      assertNotNull(coreOperationDivide0);
      assertEquals(5, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("/d>b0LE)L/i7", qName0.getPrefix());
      assertEquals(", ", qName0.getName());
      assertEquals("/d>b0LE)L/i7:, ", qName0.toString());
      assertEquals("/d>b0LE)L/i7:, ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      assertNotNull(childContext0);
      assertEquals("/d>b0LE)L/i7", qName0.getPrefix());
      assertEquals(", ", qName0.getName());
      assertEquals("/d>b0LE)L/i7:, ", qName0.toString());
      assertEquals("/d>b0LE)L/i7:, ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-463), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-463), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      String string0 = (String)coreFunction1.functionSubstring(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals((-463), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals("", string0);
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction-1()", string1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, processingInstructionTest0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(ancestorContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = ancestorContext0.getRootContext();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      RootContext rootContext2 = rootContext1.getRootContext();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext1, rootContext2);
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) rootContext1;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext1;
      UnionContext unionContext0 = new UnionContext(rootContext2, evalContextArray0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(unionContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, evalContextArray0.length);
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationAdd1);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, coreOperationAdd1);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationAdd2);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd2.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd2;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], coreOperationAdd1);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd2));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationGreaterThanOrEqual0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd2));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-790), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-790), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte)26);
      assertNotNull(byte0);
      assertEquals((byte)26, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(26.0, object0);
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("26", object1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-394), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-394), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2064, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(2064, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-394), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-394), step2.getAxis());
      
      stepArray0[2] = step2;
      QName qName0 = new QName("}1NELj$yZQ;e}eed6H");
      assertNotNull(qName0);
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1NELj$yZQ;e}eed6H", nodeNameTest0.toString());
      
      Step step3 = new Step((-394), nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1NELj$yZQ;e}eed6H", nodeNameTest0.toString());
      assertEquals((-394), step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(13, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(13, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(13, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1NELj$yZQ;e}eed6H", nodeNameTest0.toString());
      assertEquals(13, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(10, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertNotNull(step6);
      assertEquals(6, expressionArray0.length);
      assertEquals(10, step6.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertEquals(1, expressionArray1.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], locationPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationSubtract0);
      assertEquals(6, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      assertNotNull(coreOperationNegate0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, coreOperationSubtract0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationMod0);
      assertEquals(6, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-394), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-394), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-402), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-402), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-402), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(true, object0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-402), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-402), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-402), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object2 = coreFunction1.functionStartsWith((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-402), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(true, object2);
      
      Object object3 = coreFunction1.functionConcat((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object3);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-402), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals("", object3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-2028), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2028), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-575), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-575), step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionPath0);
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, expressionArray0[1]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(7, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[1], coreOperationEqual0);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertNotNull(coreOperationEqual1);
      assertEquals(7, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", coreOperationEqual1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, expressionArray0[0]);
      assertFalse(coreOperationEqual0.equals((Object)coreOperationEqual1));
      assertNotNull(coreOperationMod0);
      assertEquals(7, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[2], expressionArray0[2]);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertNotNull(coreOperationMod1);
      assertEquals(7, expressionArray0.length);
      assertEquals("mod", coreOperationMod1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction(134217728, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(134217728, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "I\\bR:!tv";
      Constant constant0 = new Constant("I\bR:!tv");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("I\bR:!tv");
      assertNotNull(processingInstructionTest0);
      assertEquals("I\bR:!tv", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      Step step0 = new Step((-4150), processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(3, expressionArray1.length);
      assertEquals("I\bR:!tv", processingInstructionTest0.getTarget());
      assertEquals((-4150), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-4150), processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertEquals("I\bR:!tv", processingInstructionTest0.getTarget());
      assertEquals((-4150), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1782, processingInstructionTest0, expressionArray1);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step2);
      assertEquals(3, expressionArray1.length);
      assertEquals(1782, step2.getAxis());
      assertEquals("I\bR:!tv", processingInstructionTest0.getTarget());
      
      String string1 = step1.toString();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(string1);
      assertEquals(4, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(step1, step2);
      assertNotSame(step1, step0);
      assertEquals("I\bR:!tv", processingInstructionTest0.getTarget());
      assertEquals((-4150), step1.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-4150), processingInstructionTest0, expressionArray1);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      assertEquals(3, expressionArray1.length);
      assertEquals((-4150), step3.getAxis());
      assertEquals("I\bR:!tv", processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-4150));
      assertNotNull(nodeTypeTest0);
      assertEquals((-4150), nodeTypeTest0.getNodeType());
      
      Step step4 = new Step((-4150), nodeTypeTest0, expressionArray1);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step4);
      assertEquals(3, expressionArray1.length);
      assertEquals((-4150), nodeTypeTest0.getNodeType());
      assertEquals((-4150), step4.getAxis());
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1782, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(1782, coreFunction0.getFunctionCode());
      
      LocationPath locationPath1 = (LocationPath)coreFunction0.getArg3();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(locationPath1);
      assertEquals(4, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(locationPath1, locationPath0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(1782, coreFunction0.getFunctionCode());
      assertTrue(locationPath1.isAbsolute());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte)8);
      assertNotNull(byte0);
      assertEquals((byte)8, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1087, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1087, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1087, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      assertFalse(object1.equals((Object)boolean1));
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1087, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("key", "key");
      assertNotNull(qName0);
      assertEquals("key:key", qName0.toString());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "key", locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("key:key", qName0.toString());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locale0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("key:key", qName0.toString());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("key:key", qName0.toString());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("key:key", qName0.toString());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals("key:key", qName0.toString());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: key:key
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-463), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-463), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      String string0 = (String)coreFunction1.functionSubstring(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals((-463), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-463()(unknownFunction-1()(), unknownFunction-1()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-394), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-394), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-394), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(true, object0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-394), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-394), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(nameAttributeTest0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      assertNotNull(nodeTypeTest0);
      assertEquals(32, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) nameAttributeTest0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, expressionArray1[3]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual0;
      Step step0 = new Step(3136, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(6, expressionArray1.length);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(3136, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(32, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(3136, nodeTypeTest0, expressionArray1);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step2);
      assertEquals(6, expressionArray1.length);
      assertEquals(3136, step2.getAxis());
      assertEquals(32, nodeTypeTest0.getNodeType());
      
      stepArray0[2] = step2;
      Step step3 = new Step(28, (NodeTest) null, expressionArray1);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      assertEquals(6, expressionArray1.length);
      assertEquals(28, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(40, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(40, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2315), (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals((-2315), step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(4405, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertNotNull(step6);
      assertEquals(6, expressionArray1.length);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(4405, step6.getAxis());
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertNotNull(coreOperationAnd1);
      assertEquals(6, expressionArray1.length);
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray1[3]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4405, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4405, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertNotNull(parentContext0);
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionString(parentContext0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationNegate0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      QName qName0 = new QName("", "z~1F{O=J*");
      assertNotNull(qName0);
      assertEquals("z~1F{O=J*", qName0.getName());
      assertEquals(":z~1F{O=J*", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("z~1F{O=J*", qName0.getName());
      assertEquals(":z~1F{O=J*", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, variableReference0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("z~1F{O=J*", qName0.getName());
      assertEquals(":z~1F{O=J*", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, variableReference0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("z~1F{O=J*", qName0.getName());
      assertEquals(":z~1F{O=J*", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lib");
      assertNotNull(processingInstructionTest0);
      assertEquals("lib", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(11, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals("lib", processingInstructionTest0.getTarget());
      assertEquals(11, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(11, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals("lib", processingInstructionTest0.getTarget());
      assertEquals(11, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-3079), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertEquals("lib", processingInstructionTest0.getTarget());
      assertEquals((-3079), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(13, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertEquals(13, step3.getAxis());
      assertEquals("lib", processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      Step step4 = new Step(11, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertEquals(11, step4.getAxis());
      assertEquals("lib", processingInstructionTest0.getTarget());
      
      stepArray0[4] = step4;
      Step step5 = new Step(15, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals(15, step5.getAxis());
      assertEquals("lib", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(15);
      assertNotNull(nodeTypeTest0);
      assertEquals(15, nodeTypeTest0.getNodeType());
      
      Step step6 = new Step(11, nodeTypeTest0, expressionArray0);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertNotNull(step6);
      assertEquals(3, expressionArray0.length);
      assertEquals(15, nodeTypeTest0.getNodeType());
      assertEquals(11, step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step((-1987), nodeTypeTest0, expressionArray0);
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertNotNull(step7);
      assertEquals(3, expressionArray0.length);
      assertEquals(15, nodeTypeTest0.getNodeType());
      assertEquals((-1987), step7.getAxis());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      Float float0 = new Float((double) 13);
      assertNotNull(float0);
      assertEquals(13.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte)8);
      assertNotNull(byte0);
      assertEquals((byte)8, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((byte)8, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals("", object1);
      
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals("8", object2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-156), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-156), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-402), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-402), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-402), coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-402), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-402), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object1 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-402), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals("", object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-402()(unknownFunction-402()(), unknownFunction-402()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("starts-with");
      assertNotNull(qName0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, extensionFunction0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      assertNotNull(coreOperationNegate0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, extensionFunction0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationNotEqual0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationNotEqual0);
      assertNotNull(coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-402));
      assertNotNull(nodeTypeTest0);
      assertEquals((-402), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(9, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-402), nodeTypeTest0.getNodeType());
      assertEquals(9, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1058), nodeTypeTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals((-1058), step1.getAxis());
      assertEquals((-402), nodeTypeTest0.getNodeType());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-402), nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(5, expressionArray0.length);
      assertEquals((-402), step2.getAxis());
      assertEquals((-402), nodeTypeTest0.getNodeType());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-1058), nodeTypeTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals((-1058), step3.getAxis());
      assertEquals((-402), nodeTypeTest0.getNodeType());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) expressionPath0;
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals("concat", string0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals((-402), nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals((-402), nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(selfContext0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte)8);
      assertNotNull(byte0);
      assertEquals((byte)8, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(10, expressionArray0.length);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(10, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      boolean boolean1 = nameAttributeTest0.isContextDependent();
      assertFalse(boolean1 == boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(500, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(500);
      assertNotNull(nodeTypeTest0);
      assertEquals(500, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(500, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(500, nodeTypeTest0.getNodeType());
      assertEquals(500, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(500, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertEquals(500, nodeTypeTest0.getNodeType());
      assertEquals(500, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(500, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertEquals(500, nodeTypeTest0.getNodeType());
      assertEquals(500, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(500, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertEquals(500, step3.getAxis());
      assertEquals(500, nodeTypeTest0.getNodeType());
      
      stepArray0[3] = step3;
      Step step4 = new Step(12, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals(1, expressionArray0.length);
      assertEquals(12, step4.getAxis());
      assertEquals(500, nodeTypeTest0.getNodeType());
      
      stepArray0[4] = step4;
      Step step5 = new Step(1408, nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals(1, expressionArray0.length);
      assertEquals(1408, step5.getAxis());
      assertEquals(500, nodeTypeTest0.getNodeType());
      
      stepArray0[5] = step5;
      Step step6 = new Step(178, nodeTypeTest0, expressionArray0);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertNotNull(step6);
      assertEquals(1, expressionArray0.length);
      assertEquals(178, step6.getAxis());
      assertEquals(500, nodeTypeTest0.getNodeType());
      
      stepArray0[6] = step6;
      Step step7 = new Step(500, nodeTypeTest0, expressionArray0);
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertNotNull(step7);
      assertEquals(1, expressionArray0.length);
      assertEquals(500, step7.getAxis());
      assertEquals(500, nodeTypeTest0.getNodeType());
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 12, nodeTypeTest0);
      assertNotNull(evalContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals(500, nodeTypeTest0.getNodeType());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte)8);
      assertNotNull(byte0);
      assertEquals((byte)8, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertEquals(7, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, nameAttributeTest0);
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step(1618, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals(1618, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1048576, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertEquals(1048576, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(12, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(7, expressionArray0.length);
      assertEquals(12, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1421, (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(7, expressionArray0.length);
      assertEquals(1421, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(1421, (NodeTest) null, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals(7, expressionArray0.length);
      assertEquals(1421, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(2987, (NodeTest) null, expressionArray0);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertNotNull(step5);
      assertEquals(7, expressionArray0.length);
      assertEquals(2987, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(35, (NodeTest) null, expressionArray0);
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertNotNull(step6);
      assertEquals(7, expressionArray0.length);
      assertEquals(35, step6.getAxis());
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], locationPath0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(nameAttributeTest0, expressionArray0[1]);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertNotNull(coreOperationDivide1);
      assertEquals(7, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(1048576, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(1048576, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte)8);
      assertNotNull(byte0);
      assertEquals((byte)8, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("8", string0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Byte
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLocalName(evalContext0);
      assertNotNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("root", object0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(867, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray1.length);
      assertEquals(867, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(7, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, coreOperationNegate0);
      assertNotNull(coreOperationEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionPath0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate((Expression) null);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertNotNull(coreOperationNegate1);
      assertEquals("-", coreOperationNegate1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[5] = (Expression) expressionPath1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1347, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1347, coreFunction0.getFunctionCode());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, (Locale) null);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(string0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("unknownFunction-1()", string0);
      
      Double double0 = (Double)coreFunction1.functionNumber(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Boolean boolean1 = (Boolean)coreFunction1.functionBoolean(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(boolean1);
      
      String string1 = rootContext0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("Expression context [0] /:/", string1);
      
      String string2 = coreFunction1.toString();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("unknownFunction-2147483648()(unknownFunction-1()())", string2);
      
      Boolean boolean2 = (Boolean)coreFunction1.functionNot(rootContext0);
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(boolean2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertTrue(boolean2);
      
      String string3 = (String)coreFunction1.functionNormalizeSpace(rootContext0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", string3);
      
      String string4 = coreFunction0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("unknownFunction-1()()", string4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName(".fFP}>g%");
      assertNotNull(qName0);
      assertEquals(".fFP}>g%", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".fFP}>g%", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ".fFP}>g%");
      assertNotNull(nodeNameTest0);
      assertEquals(".fFP}>g%", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".fFP}>g%", qName0.getName());
      assertEquals(".fFP}>g%", nodeNameTest0.toString());
      assertEquals(".fFP}>g%", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(41, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(".fFP}>g%", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".fFP}>g%", qName0.getName());
      assertEquals(".fFP}>g%", nodeNameTest0.toString());
      assertEquals(".fFP}>g%", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(41, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(41, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals(".fFP}>g%", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".fFP}>g%", qName0.getName());
      assertEquals(".fFP}>g%", nodeNameTest0.toString());
      assertEquals(".fFP}>g%", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(41, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1267), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertEquals(".fFP}>g%", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".fFP}>g%", qName0.getName());
      assertEquals(".fFP}>g%", nodeNameTest0.toString());
      assertEquals(".fFP}>g%", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1267), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-422), (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertEquals((-422), step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-422), (NodeTest) null, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertEquals((-422), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1267), (NodeTest) null, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1267), step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-1697), nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertNotNull(step6);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1697), step6.getAxis());
      assertEquals(".fFP}>g%", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".fFP}>g%", qName0.getName());
      assertEquals(".fFP}>g%", nodeNameTest0.toString());
      assertEquals(".fFP}>g%", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[6] = step6;
      Step step7 = new Step(1631, (NodeTest) null, expressionArray0);
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertNotNull(step7);
      assertEquals(3, expressionArray0.length);
      assertEquals(1631, step7.getAxis());
      
      stepArray0[7] = step7;
      Step step8 = new Step(73, nodeNameTest0, expressionArray0);
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step0));
      assertNotNull(step8);
      assertEquals(3, expressionArray0.length);
      assertEquals(".fFP}>g%", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".fFP}>g%", qName0.getName());
      assertEquals(".fFP}>g%", nodeNameTest0.toString());
      assertEquals(".fFP}>g%", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(73, step8.getAxis());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(nameAttributeTest0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant("Curn=4");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("lang");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals(2, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(4399, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4399, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4399);
      assertNotNull(nodeTypeTest0);
      assertEquals(4399, nodeTypeTest0.getNodeType());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(4399, nodeTypeTest0.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(precedingOrFollowingContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1ca~raX'43T");
      assertFalse(boolean0);
      
      QName qName0 = new QName("1ca~raX'43T", (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertEquals("1ca~raX'43T:null", qName0.toString());
      assertEquals("1ca~raX'43T", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getName());
      assertEquals("1ca~raX'43T:null", qName0.toString());
      assertEquals("1ca~raX'43T", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(16384, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16384, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("boolean");
      assertNotNull(processingInstructionTest0);
      assertEquals("boolean", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(16384, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals("boolean", processingInstructionTest0.getTarget());
      assertEquals(16384, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(16384, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertEquals("boolean", processingInstructionTest0.getTarget());
      assertEquals(16384, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(35, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertEquals("boolean", processingInstructionTest0.getTarget());
      assertEquals(35, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(16384, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertEquals("boolean", processingInstructionTest0.getTarget());
      assertEquals(16384, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(15, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(1, expressionArray0.length);
      assertEquals(15, step4.getAxis());
      assertEquals("boolean", processingInstructionTest0.getTarget());
      
      stepArray0[4] = step4;
      Step step5 = new Step(16384, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(1, expressionArray0.length);
      assertEquals(16384, step5.getAxis());
      assertEquals("boolean", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      Step step6 = new Step(11, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertNotNull(step6);
      assertEquals(1, expressionArray0.length);
      assertEquals(11, step6.getAxis());
      assertEquals("boolean", processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      Step step7 = new Step(11, processingInstructionTest0, expressionArray0);
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertNotNull(step7);
      assertEquals(1, expressionArray0.length);
      assertEquals(11, step7.getAxis());
      assertEquals("boolean", processingInstructionTest0.getTarget());
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("boolean", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      assertNotNull(evalContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals("boolean", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Double double0 = (Double)coreFunction1.functionCount(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0.0, (double)double0, 0.01);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(28, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(28, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      QName qName0 = new QName("mod");
      assertNotNull(qName0);
      assertEquals("mod", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("mod", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "8rc[qRn.HwLDx)|");
      assertNotNull(nodeNameTest0);
      assertEquals("mod", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("mod", qName0.toString());
      assertEquals("mod", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("8rc[qRn.HwLDx)|", nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("mod", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("mod", qName0.toString());
      assertEquals("mod", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("8rc[qRn.HwLDx)|", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest0, false, true);
      assertNotNull(childContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      
      Object object0 = coreFunction0.computeValue(childContext0);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(1, childContext0.getPosition());
      assertEquals(Double.NaN, object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("The element \"");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], constant0);
      assertNotNull(nameAttributeTest0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[4]);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      Constant constant1 = new Constant("The element \"");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[6] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[6], expressionArray0[1]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("The element \"", "");
      assertNotNull(qName0);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Invalid argument type for 'sum': ");
      assertNotNull(nodeNameTest0);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(448, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertEquals(448, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(448, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertEquals(448, step1.getAxis());
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "Invalid argument type for 'sum': ");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest1.getNamespaceURI());
      assertEquals("The element \":", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      
      Step step2 = new Step(448, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest1.getNamespaceURI());
      assertEquals("The element \":", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(448, step2.getAxis());
      
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant1;
      Step step3 = new Step(3515, nodeNameTest0, expressionArray1);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      assertEquals(5, expressionArray1.length);
      assertEquals(3515, step3.getAxis());
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      
      stepArray0[3] = step3;
      Step step4 = new Step(708, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertEquals(708, step4.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[5], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      
      expressionArray0[8] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(448, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(448, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "The element \"");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(descendantContext0);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest1.getNamespaceURI());
      assertEquals("The element \":", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(selfContext0);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest1.getNamespaceURI());
      assertEquals("The element \":", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("s}G>}");
      assertNotNull(processingInstructionTest0);
      assertEquals("s}G>}", processingInstructionTest0.getTarget());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, processingInstructionTest0, false);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest1.getNamespaceURI());
      assertEquals("The element \":", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals("s}G>}", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      NodePointer nodePointer0 = precedingOrFollowingContext0.getCurrentNodePointer();
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(nodePointer0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest1.getNamespaceURI());
      assertEquals("The element \":", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals("s}G>}", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, step4, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(9, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertEquals(708, step4.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(9, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(step4, step2);
      assertNotSame(step4, step1);
      assertNotSame(step4, step3);
      assertNotSame(step4, step0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("The element \":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("The element \"", qName0.getPrefix());
      assertEquals(708, step4.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("The element \":", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      // Undeclared exception!
      coreFunction0.functionTrue(initialContext0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      String string0 = (String)coreFunction1.functionNamespaceURI(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", string0);
      
      Double double0 = (Double)coreFunction1.functionNumber(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Boolean boolean1 = (Boolean)coreFunction1.functionBoolean(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(boolean1);
      
      String string1 = rootContext0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Expression context [0] /:/", string1);
      
      String string2 = (String)coreFunction0.functionString(rootContext0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(string2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("unknownFunction-1()()", string2);
      
      Boolean boolean2 = (Boolean)coreFunction1.functionNot(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(boolean2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2439), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals((-2439), coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals((-2439), coreFunction1.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(288, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(288, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(6, expressionArray0.length);
      assertEquals(288, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, int0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step((-645), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals((-645), step0.getAxis());
      
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest((QName) null, "boolean");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("boolean", nodeNameTest1.getNamespaceURI());
      
      Step step1 = new Step(40, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals("boolean", nodeNameTest1.getNamespaceURI());
      assertEquals(40, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, coreOperationNotEqual0);
      assertNotNull(coreOperationDivide0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationOr0);
      assertEquals(4, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("boolean");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction1 = new CoreFunction((-645), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray0.length);
      assertEquals((-645), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      
      String string0 = (String)coreFunction1.functionNamespaceURI(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals("", string0);
      
      Double double0 = (Double)coreFunction1.functionNumber(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      String string1 = rootContext0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Expression context [0] /:/", string1);
      
      String string2 = (String)coreFunction0.functionString(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("unknownFunction-1()()", string2);
      
      Boolean boolean1 = (Boolean)coreFunction1.functionNot(rootContext0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertTrue(boolean1);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, (NodeTest) null, true);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, (NodeTest) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(ancestorContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      Double double1 = (Double)coreFunction1.functionCeiling(ancestorContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(double1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(0.0, (double)double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("HRZi3r]3E\"rCqbZRwHQ");
      assertNotNull(qName0);
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.getName());
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.getName());
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.getName());
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction1, expressionArray0[0]);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.getName());
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[2]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreOperationGreaterThan0);
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.getName());
      assertEquals("HRZi3r]3E\"rCqbZRwHQ", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      
      String string0 = (String)coreFunction1.functionNamespaceURI(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals("", string0);
      
      Double double0 = (Double)coreFunction1.functionNumber(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Boolean boolean1 = (Boolean)coreFunction1.functionBoolean(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertFalse(boolean1);
      
      String string1 = rootContext0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Expression context [0] /:/", string1);
      
      String string2 = (String)coreFunction0.functionString(rootContext0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(string2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("unknownFunction-1()()", string2);
      
      Boolean boolean2 = (Boolean)coreFunction1.functionNot(rootContext0);
      assertFalse(boolean2.equals((Object)boolean1));
      assertTrue(boolean2.equals((Object)boolean0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(boolean2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(716, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(716, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(716, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(716, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(62, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(62, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(716, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(716, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(62, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(62, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(5038, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(5038, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(2043, nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertNotNull(step6);
      assertEquals(2, expressionArray0.length);
      assertEquals(2043, step6.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[6] = step6;
      Step step7 = new Step(3405, nodeNameTest0, expressionArray0);
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertNotNull(step7);
      assertEquals(2, expressionArray0.length);
      assertEquals(3405, step7.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[7] = step7;
      Step step8 = new Step(24, nodeNameTest0, expressionArray0);
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step1));
      assertNotNull(step8);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(24, step8.getAxis());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(716, coreFunction0.getFunctionCode());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      ChildContext childContext0 = new ChildContext(ancestorContext0, nodeNameTest0, false, false);
      assertNotNull(childContext0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(childContext0);
      assertNotNull(evalContext0);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(716, coreFunction0.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(716, coreFunction0.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("unknownFunction");
      assertNotNull(qName0);
      assertEquals("unknownFunction", qName0.getName());
      assertEquals("unknownFunction", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("unknownFunction", qName0.getName());
      assertEquals("unknownFunction", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction", nodeNameTest0.toString());
      
      Step step0 = new Step(1928, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals("unknownFunction", qName0.getName());
      assertEquals("unknownFunction", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction", nodeNameTest0.toString());
      assertEquals(1928, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertEquals("unknownFunction", qName0.getName());
      assertEquals("unknownFunction", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction", nodeNameTest0.toString());
      assertEquals(3, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, locationPath0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[1], coreOperationNotEqual0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertNotNull(coreOperationDivide1);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationDivide1;
      expressionArray1[1] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[0], coreOperationDivide1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertNotNull(coreOperationLessThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[0], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(2, expressionArray1.length);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(87, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertEquals(87, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Iterator iterator0 = coreFunction1.iteratePointers((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(iterator0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(87, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertTrue(boolean1);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLocalName(evalContext0);
      assertNotNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("root", object0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(867, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray1.length);
      assertEquals(867, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object1 = coreFunction1.functionCount(evalContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(867, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0.0, object1);
      
      Object object2 = coreFunction1.functionLang(evalContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(867, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(true, object2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("GkTcxO*}A*xZ++mb,v@");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("GkTcxO*}A*xZ++mb,v@", "");
      assertNotNull(qName0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("GkTcxO*}A*xZ++mb,v@:", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("GkTcxO*}A*xZ++mb,v@:", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationLessThan0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[4], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-570), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals((-570), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg2();
      assertNotNull(coreOperationAdd1);
      assertEquals(8, expressionArray0.length);
      assertSame(coreOperationAdd1, coreOperationAdd0);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals((-570), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      expressionArray0[6] = (Expression) coreOperationAdd1;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[3], expressionArray0[1]);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(coreOperationLessThan1);
      assertEquals(8, expressionArray0.length);
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction1 = new CoreFunction((-1046), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals((-1046), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      QName qName0 = new QName("Z<@Zx", (String) null);
      assertNotNull(qName0);
      assertEquals("Z<@Zx", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("Z<@Zx:null", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("Z<@Zx", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("Z<@Zx:null", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-886), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-886), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNotNull(expression0);
      assertEquals(2, expressionArray0.length);
      assertSame(expression0, extensionFunction0);
      assertEquals((-886), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      
      expressionArray0[1] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(75, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(75, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(75, coreFunction1.getFunctionCode());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Z<@Zx", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("Z<@Zx:null", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Z<@Zx", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("Z<@Zx:null", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      
      // Undeclared exception!
      coreFunction0.functionBoolean(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("GkTcxO*}A*xZ++mb,v@");
      assertNotNull(processingInstructionTest0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, (Expression) null);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual2 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[0]);
      assertFalse(coreOperationGreaterThanOrEqual2.equals((Object)coreOperationGreaterThanOrEqual1));
      assertFalse(coreOperationGreaterThanOrEqual2.equals((Object)coreOperationGreaterThanOrEqual0));
      assertNotNull(coreOperationGreaterThanOrEqual2);
      assertEquals(5, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual2.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual2;
      CoreFunction coreFunction0 = new CoreFunction((-2536), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-2536), coreFunction0.getFunctionCode());
      
      expressionArray0[3] = (Expression) coreFunction0;
      Long long0 = new Long(5038);
      assertNotNull(long0);
      assertEquals(5038L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(2765, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals(2765, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(2765, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray0.length);
      assertEquals(2765, coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction28()()", string0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) basicNodeSet0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      
      String string0 = coreFunction1.toString();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(string0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals("substring-after()", string0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("GkTcxO*}A*xZ++mb,v@");
      assertNotNull(processingInstructionTest0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(0, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("!]@@Ip)");
      assertNotNull(processingInstructionTest0);
      assertEquals("!]@@Ip)", processingInstructionTest0.getTarget());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("!]@@Ip)", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionNumber(precedingOrFollowingContext0);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("!]@@Ip)", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(Double.NaN, object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue(evalContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(72, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(72, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = (CoreOperationGreaterThanOrEqual)coreFunction0.getArg2();
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(9, expressionArray0.length);
      assertSame(coreOperationGreaterThanOrEqual1, coreOperationGreaterThanOrEqual0);
      assertEquals(72, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreFunction0);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(72, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[3], expressionPath0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[5]);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationGreaterThan0);
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      Constant constant1 = new Constant((Number) null);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[2] = (Expression) constant1;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step0 = new Step(1991, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(1991, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(12, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(12, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(12, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(7, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(12, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-664), processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(7, expressionArray0.length);
      assertEquals((-664), step3.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      Step step4 = new Step(12, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals(7, expressionArray0.length);
      assertEquals(12, step4.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      
      stepArray0[4] = step4;
      Step step5 = new Step(158, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertEquals(7, expressionArray0.length);
      assertEquals(158, step5.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationMod0);
      assertEquals(7, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-664), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-664), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      assertNotNull(nameAttributeTest0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, nameAttributeTest0);
      assertNotNull(coreOperationEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationOr0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("U d-U(ZGsJV-");
      assertNotNull(qName0);
      assertEquals("U d-U(ZGsJV-", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("U d-U(ZGsJV-", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("U d-U(ZGsJV-", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("U d-U(ZGsJV-", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("U d-U(ZGsJV-", nodeNameTest0.toString());
      
      Step step0 = new Step((-5254), nodeNameTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("U d-U(ZGsJV-", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("U d-U(ZGsJV-", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("U d-U(ZGsJV-", nodeNameTest0.toString());
      assertEquals((-5254), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-510), nodeNameTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("U d-U(ZGsJV-", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("U d-U(ZGsJV-", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("U d-U(ZGsJV-", nodeNameTest0.toString());
      assertEquals((-510), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertEquals("U d-U(ZGsJV-", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("U d-U(ZGsJV-", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("U d-U(ZGsJV-", nodeNameTest0.toString());
      assertEquals((-1), step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, expressionPath0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationDivide0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationGreaterThanOrEqual0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationLessThanOrEqual1);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertNotNull(coreOperationEqual1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("zx;71aDq)z#W 4\"pD^'");
      assertNotNull(qName0);
      assertEquals("zx;71aDq)z#W 4\"pD^'", qName0.toString());
      assertEquals("zx;71aDq)z#W 4\"pD^'", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals("zx;71aDq)z#W 4\"pD^'", qName0.toString());
      assertEquals("zx;71aDq)z#W 4\"pD^'", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      extensionFunction0.args = expressionArray0;
      assertEquals("zx;71aDq)z#W 4\"pD^'", qName0.toString());
      assertEquals("zx;71aDq)z#W 4\"pD^'", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      QName qName1 = new QName("yelby*L(^E6DMp6");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals("yelby*L(^E6DMp6", qName1.getName());
      assertEquals("yelby*L(^E6DMp6", qName1.toString());
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variableReference0);
      assertNull(qName1.getPrefix());
      assertEquals("yelby*L(^E6DMp6", qName1.getName());
      assertEquals("yelby*L(^E6DMp6", qName1.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1120, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1120, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, integer0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(1806, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1806, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
      assertNotNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(1806, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionLast(evalContext0);
      assertNotNull(object1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(2, evalContext0.getPosition());
      assertEquals(1806, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1.0, object1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-4418), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-4418), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("", " k^\"=nfK^`?#:");
      assertNotNull(qName0);
      assertEquals(": k^\"=nfK^`?#:", qName0.toString());
      assertEquals(" k^\"=nfK^`?#:", qName0.getName());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(": k^\"=nfK^`?#:", qName0.toString());
      assertEquals(" k^\"=nfK^`?#:", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(": k^\"=nfK^`?#:", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(": k^\"=nfK^`?#:", qName0.toString());
      assertEquals(" k^\"=nfK^`?#:", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(": k^\"=nfK^`?#:", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, expressionArray0.length);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      assertNotNull(coreOperationNegate0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      CoreOperationNegate coreOperationNegate1 = (CoreOperationNegate)coreFunction0.getArg3();
      assertNotNull(coreOperationNegate1);
      assertEquals(4, expressionArray0.length);
      assertSame(coreOperationNegate1, coreOperationNegate0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction1 = new CoreFunction((-790), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertEquals((-790), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(4, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      QName qName0 = new QName("CEyMCp'vJ&2(r1(", "CEyMCp'vJ&2(r1(");
      assertNotNull(qName0);
      assertEquals("CEyMCp'vJ&2(r1(:CEyMCp'vJ&2(r1(", qName0.toString());
      assertEquals("CEyMCp'vJ&2(r1(", qName0.getPrefix());
      assertEquals("CEyMCp'vJ&2(r1(", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals("CEyMCp'vJ&2(r1(:CEyMCp'vJ&2(r1(", qName0.toString());
      assertEquals("CEyMCp'vJ&2(r1(", qName0.getPrefix());
      assertEquals("CEyMCp'vJ&2(r1(", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(9, expressionArray0.length);
      assertEquals("CEyMCp'vJ&2(r1(:CEyMCp'vJ&2(r1(", qName0.toString());
      assertEquals("CEyMCp'vJ&2(r1(", qName0.getPrefix());
      assertEquals("CEyMCp'vJ&2(r1(", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      CoreOperationOr coreOperationOr1 = (CoreOperationOr)coreFunction0.getArg3();
      assertNotNull(coreOperationOr1);
      assertEquals(9, expressionArray0.length);
      assertSame(coreOperationOr1, coreOperationOr0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationOr1;
      QName qName1 = new QName("CEyMCp'vJ&2(r1(");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("CEyMCp'vJ&2(r1(", qName1.getName());
      assertEquals("CEyMCp'vJ&2(r1(", qName1.toString());
      assertNull(qName1.getPrefix());
      
      ExtensionFunction extensionFunction2 = new ExtensionFunction(qName1, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(extensionFunction2.equals((Object)extensionFunction0));
      assertFalse(extensionFunction2.equals((Object)extensionFunction1));
      assertNotNull(extensionFunction2);
      assertEquals(9, expressionArray0.length);
      assertEquals("CEyMCp'vJ&2(r1(", qName1.getName());
      assertEquals("CEyMCp'vJ&2(r1(", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(extensionFunction2.computeContextDependent());
      
      expressionArray0[6] = (Expression) extensionFunction2;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction1, expressionArray0[4]);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction2));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("CEyMCp'vJ&2(r1(:CEyMCp'vJ&2(r1(", qName0.toString());
      assertEquals("CEyMCp'vJ&2(r1(", qName0.getPrefix());
      assertEquals("CEyMCp'vJ&2(r1(", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[8] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(700, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertEquals(700, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1249), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1249), coreFunction0.getFunctionCode());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(0, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationAdd1);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, coreOperationAdd1);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd0));
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd1));
      assertNotNull(coreOperationAdd2);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd2.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAdd2;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], coreOperationAdd1);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd2));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationGreaterThanOrEqual0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd2));
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-790), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-790), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      assertNotNull(nodeTypeTest0);
      assertEquals(18, nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals(18, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(18, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      namespaceContext0.reset();
      assertEquals(18, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = 22;
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(60, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(60, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2999), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-2999), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(3134, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(3134, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(60, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(60, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(1, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(3134, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals(3134, step5.getAxis());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[5] = step5;
      Step step6 = new Step(60, nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      assertEquals(3, expressionArray0.length);
      assertEquals(60, step6.getAxis());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[6] = step6;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNull(nodeNameTest1.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      Step step7 = new Step(1, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertNotNull(step7);
      assertEquals(3, expressionArray0.length);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNull(nodeNameTest1.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(1, step7.getAxis());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(60, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(60, coreFunction0.getFunctionCode());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(parentContext0);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNull(nodeNameTest1.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionNull(parentContext0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",;y~");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName(",;y~");
      assertNotNull(qName0);
      assertEquals(",;y~", qName0.toString());
      assertEquals(",;y~", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(",;y~", qName0.toString());
      assertEquals(",;y~", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      QName qName1 = new QName(",;y~");
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray0);
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction1;
      Constant constant0 = new Constant(",;y~");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(128, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(128, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) extensionFunction1;
      expressionArray1[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[7];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(",;y~", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(593, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(593, step0.getAxis());
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(",;y~", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[0] = step0;
      Step step1 = new Step(63, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals(63, step1.getAxis());
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(",;y~", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[1] = step1;
      Step step2 = new Step(128, nodeNameTest0, expressionArray1);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step2);
      assertEquals(2, expressionArray1.length);
      assertEquals(128, step2.getAxis());
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(",;y~", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(63);
      assertNotNull(nodeTypeTest0);
      assertEquals(63, nodeTypeTest0.getNodeType());
      
      Step step3 = new Step(593, nodeTypeTest0, expressionArray1);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      assertEquals(2, expressionArray1.length);
      assertEquals(63, nodeTypeTest0.getNodeType());
      assertEquals(593, step3.getAxis());
      
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(",;y~", nodeNameTest1.toString());
      
      Step step4 = new Step(63, nodeNameTest1, expressionArray1);
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step4);
      assertEquals(2, expressionArray1.length);
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(",;y~", nodeNameTest1.toString());
      assertEquals(63, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(837, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertEquals(837, step5.getAxis());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(",;y~", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[5] = step5;
      Step step6 = new Step(128, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(qName1.equals((Object)qName0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(step6);
      assertEquals(3, expressionArray0.length);
      assertEquals(",;y~", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals(",;y~", qName1.getName());
      assertEquals(128, step6.getAxis());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(",;y~", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(qName0.equals((Object)qName1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals(7, stepArray0.length);
      assertEquals(",;y~", qName0.toString());
      assertEquals(",;y~", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(63, nodeTypeTest0.getNodeType());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(selfContext0, 593, nodeTypeTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(qName0.equals((Object)qName1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNull(evalContext0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals(7, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(qName0, qName1);
      assertNotSame(extensionFunction0, extensionFunction1);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(",;y~", qName0.toString());
      assertEquals(",;y~", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(63, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      int int0 = 4;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(41, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-556), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-556), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction((-1387), (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-1387), coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction(110, (Expression[]) null);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNotNull(coreFunction3);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(110, coreFunction3.getFunctionCode());
      
      CoreFunction coreFunction4 = new CoreFunction((-1387), (Expression[]) null);
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertNotNull(coreFunction4);
      assertEquals(0, coreFunction4.getArgumentCount());
      assertEquals((-1387), coreFunction4.getFunctionCode());
      
      Object object0 = coreFunction3.computeValue((EvalContext) null);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction4));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNull(object0);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction4);
      assertNotSame(coreFunction3, coreFunction2);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(110, coreFunction3.getFunctionCode());
      
      CoreFunction coreFunction5 = new CoreFunction(110, (Expression[]) null);
      assertFalse(coreFunction5.equals((Object)coreFunction1));
      assertFalse(coreFunction5.equals((Object)coreFunction2));
      assertFalse(coreFunction5.equals((Object)coreFunction4));
      assertFalse(coreFunction5.equals((Object)coreFunction3));
      assertFalse(coreFunction5.equals((Object)coreFunction0));
      assertNotNull(coreFunction5);
      assertEquals(110, coreFunction5.getFunctionCode());
      assertEquals(0, coreFunction5.getArgumentCount());
      
      CoreFunction coreFunction6 = new CoreFunction(30, (Expression[]) null);
      assertFalse(coreFunction6.equals((Object)coreFunction4));
      assertFalse(coreFunction6.equals((Object)coreFunction1));
      assertFalse(coreFunction6.equals((Object)coreFunction3));
      assertFalse(coreFunction6.equals((Object)coreFunction2));
      assertFalse(coreFunction6.equals((Object)coreFunction0));
      assertFalse(coreFunction6.equals((Object)coreFunction5));
      assertNotNull(coreFunction6);
      assertEquals(0, coreFunction6.getArgumentCount());
      assertEquals(30, coreFunction6.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction4.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1387()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      QName qName0 = new QName("_R_gn");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("_R_gn", qName0.getName());
      assertEquals("_R_gn", qName0.toString());
      
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("_R_gn", qName0.getName());
      assertEquals("_R_gn", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("_R_gn", qName0.getName());
      assertEquals("_R_gn", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationGreaterThan0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("_R_gn", qName0.getName());
      assertEquals("_R_gn", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("_R_gn", qName0.getName());
      assertEquals("_R_gn", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction((-423), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertEquals((-423), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      CoreFunction coreFunction3 = new CoreFunction((-2003), expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNotNull(coreFunction3);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2003), coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction2.computeValue((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals((-423), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      CoreFunction coreFunction4 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertNotNull(coreFunction4);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction4.getFunctionCode());
      assertEquals(0, coreFunction4.getArgumentCount());
      
      CoreFunction coreFunction5 = new CoreFunction(1889, expressionArray0);
      assertFalse(coreFunction5.equals((Object)coreFunction3));
      assertFalse(coreFunction5.equals((Object)coreFunction1));
      assertFalse(coreFunction5.equals((Object)coreFunction2));
      assertFalse(coreFunction5.equals((Object)coreFunction0));
      assertFalse(coreFunction5.equals((Object)coreFunction4));
      assertNotNull(coreFunction5);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction5.getArgumentCount());
      assertEquals(1889, coreFunction5.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction5.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newNodePointer(qName0, beanPointer0, locale0);
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(beanPointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction-1()", string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      
      String string1 = (String)coreFunction1.functionNamespaceURI(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals("", string1);
      
      Double double0 = (Double)coreFunction1.functionNumber(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Boolean boolean1 = (Boolean)coreFunction1.functionBoolean(rootContext0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("GkTcxO*}A*xZ++mb,v@");
      assertNotNull(processingInstructionTest0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      boolean boolean1 = attributeContext0.nextNode();
      assertFalse(boolean1 == boolean0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      assertEquals(1, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(203, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(203, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(attributeContext0);
      assertNotNull(object0);
      assertEquals("GkTcxO*}A*xZ++mb,v@", processingInstructionTest0.getTarget());
      assertEquals(1, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(203, coreFunction0.getFunctionCode());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = (-423);
      CoreFunction coreFunction0 = new CoreFunction((-423), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-423), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(27, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreFunction1;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction1;
      expressionArray0[3] = (Expression) coreFunction1;
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertNotNull(variablePointerFactory0);
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(890, variablePointerFactory0.getOrder());
      
      QName qName0 = new QName("", (String) null);
      assertNotNull(qName0);
      assertEquals(":null", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      
      Locale locale0 = Locale.forLanguageTag("");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      NodePointer nodePointer0 = variablePointerFactory0.createNodePointer(qName0, (Object) null, locale0);
      assertNull(nodePointer0);
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals(":null", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("descendant");
      assertNotNull(processingInstructionTest0);
      assertEquals("descendant", processingInstructionTest0.getTarget());
      
      ChildContext childContext0 = new ChildContext(rootContext0, processingInstructionTest0, true, false);
      assertNotNull(childContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("descendant", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      NodePointer nodePointer1 = childContext0.getCurrentNodePointer();
      assertNull(nodePointer1);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("descendant", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "", (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.iteratePointers("org.apache.commons.jxpath.JXPathBasicBeanInfo", expressionArray0[3]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, locale0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newChildNodePointer(beanPointer0, qName0, decimalFormat0);
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(beanPointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, decimalFormat0, beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext("");
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      String string0 = (String)coreFunction0.computeValue(initialContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals("", string0);
      
      QName qName1 = new QName((String) null, "<<unknown namespace>>");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("<<unknown namespace>>", qName1.toString());
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertNull(qName1.getPrefix());
      
      CoreFunction coreFunction2 = new CoreFunction((-3145), (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals((-3145), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionStartsWith(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3145()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("contains()", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "string");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0:e[zB@7");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean2);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-148), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-148), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("contains()", string0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodeSetContext0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, basicNodeSet0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string1 = (String)coreFunction0.functionName(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("root", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("contains()", string0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName((String) null, "contains()");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("contains()", qName0.getName());
      assertEquals("contains()", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("contains()", qName0.getName());
      assertEquals("contains()", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains()", nodeNameTest0.toString());
      
      Step step0 = new Step((-1160), nodeNameTest0, (Expression[]) null);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("contains()", qName0.getName());
      assertEquals("contains()", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains()", nodeNameTest0.toString());
      assertEquals((-1160), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(11, nodeNameTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertNull(qName0.getPrefix());
      assertEquals("contains()", qName0.getName());
      assertEquals("contains()", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains()", nodeNameTest0.toString());
      assertEquals(11, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, stepArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertNotNull(evalContext0);
      assertEquals(2, stepArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      CoreFunction coreFunction1 = new CoreFunction((-2507), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-2507), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-394), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-394), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2064, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(2064, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-394), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-394), step2.getAxis());
      
      stepArray0[2] = step2;
      QName qName0 = new QName("}1NELj$yZQ;e}eed6H");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.getName());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.getName());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1NELj$yZQ;e}eed6H", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step3 = new Step((-394), nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.getName());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1NELj$yZQ;e}eed6H", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-394), step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(13, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(13, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(13, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.getName());
      assertEquals("}1NELj$yZQ;e}eed6H", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1NELj$yZQ;e}eed6H", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(13, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(10, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertNotNull(step6);
      assertEquals(6, expressionArray0.length);
      assertEquals(10, step6.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertEquals(1, expressionArray1.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], locationPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationSubtract0);
      assertEquals(6, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      assertNotNull(coreOperationNegate0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, coreOperationSubtract0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationMod0);
      assertEquals(6, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-394), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-394), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(29, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals(29, step0.getAxis());
      
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      Step step1 = new Step(2, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(2, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(29, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(29, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(29, (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertEquals(29, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(30, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(30, step4.getAxis());
      
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SZ4d");
      assertNotNull(processingInstructionTest0);
      assertEquals("SZ4d", processingInstructionTest0.getTarget());
      
      Step step5 = new Step(2, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertEquals("SZ4d", processingInstructionTest0.getTarget());
      assertEquals(2, step5.getAxis());
      
      stepArray0[5] = step5;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("SZ4d");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("SZ4d", processingInstructionTest1.getTarget());
      
      Step step6 = new Step(29, processingInstructionTest1, expressionArray0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertNotNull(step6);
      assertEquals(6, expressionArray0.length);
      assertEquals("SZ4d", processingInstructionTest1.getTarget());
      assertEquals(29, step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step(29, processingInstructionTest1, expressionArray0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      assertNotNull(step7);
      assertEquals(6, expressionArray0.length);
      assertEquals("SZ4d", processingInstructionTest1.getTarget());
      assertEquals(29, step7.getAxis());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, locationPath0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationAdd0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("C$cS *");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      Constant constant1 = new Constant((Number) null);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[3] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, locationPath0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[3]);
      assertNotNull(coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertNotNull(ancestorContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals("SZ4d", processingInstructionTest0.getTarget());
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, (NodeSet) null);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertNotNull(nodeSetContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals("SZ4d", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, processingInstructionTest0);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertNotNull(selfContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals("SZ4d", processingInstructionTest0.getTarget());
      
      ParentContext parentContext0 = new ParentContext(selfContext0, nodeTypeTest0);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertNotNull(parentContext0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals("SZ4d", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      coreFunction0.functionKey(parentContext0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAnd0);
      assertNotNull(nameAttributeTest0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], nameAttributeTest0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(nameAttributeTest0, expressionArray0[1]);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(nameAttributeTest1);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-2019), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2019), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2741, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(2741, step1.getAxis());
      
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1831);
      assertNotNull(nodeTypeTest0);
      assertEquals(1831, nodeTypeTest0.getNodeType());
      
      Step step2 = new Step(2413, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(7, expressionArray0.length);
      assertEquals(1831, nodeTypeTest0.getNodeType());
      assertEquals(2413, step2.getAxis());
      
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("|'i");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("|'i", processingInstructionTest1.getTarget());
      
      Step step3 = new Step(1831, processingInstructionTest1, expressionArray0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals(7, expressionArray0.length);
      assertEquals("|'i", processingInstructionTest1.getTarget());
      assertEquals(1831, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(3715, processingInstructionTest1, expressionArray0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals(7, expressionArray0.length);
      assertEquals("|'i", processingInstructionTest1.getTarget());
      assertEquals(3715, step4.getAxis());
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest1, expressionArray0, stepArray0);
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertNotNull(coreOperationAnd1);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAnd1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[5] = (Expression) locationPath0;
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2019), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-2019), coreFunction0.getFunctionCode());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(1831, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(1831, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, processingInstructionTest1);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(namespaceContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals("|'i", processingInstructionTest1.getTarget());
      assertEquals(1831, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeTypeTest0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(parentContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals("|'i", processingInstructionTest1.getTarget());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(1831, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionFalse(parentContext0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-423), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-423), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(27, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreFunction1;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction1;
      expressionArray0[3] = (Expression) coreFunction1;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction1;
      expressionArray0[6] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(27, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(7, expressionArray0.length);
      assertEquals(27, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(27, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(0, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newNodePointer(qName0, beanPointer0, locale0);
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(beanPointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      String string0 = locale0.getDisplayName();
      assertNotNull(string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("Italian", string0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) beanPointer0);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl2, qName0, beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl3, beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      String string1 = (String)coreFunction1.functionNamespaceURI(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", string1);
      
      Double double0 = (Double)coreFunction1.functionNumber(rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Boolean boolean1 = (Boolean)coreFunction1.functionBoolean(rootContext0);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(boolean1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-423), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-423), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertNotNull(object0);
      assertEquals((-423), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(true, object0);
      
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals((-423), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-423), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-423), coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-423), coreFunction1.getFunctionCode());
      
      QName qName0 = new QName("KDm,+", "@F7tK9y}oFOu");
      assertNotNull(qName0);
      assertEquals("@F7tK9y}oFOu", qName0.getName());
      assertEquals("KDm,+:@F7tK9y}oFOu", qName0.toString());
      assertEquals("KDm,+", qName0.getPrefix());
      
      Object object2 = coreFunction1.functionStartsWith((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-423), coreFunction1.getFunctionCode());
      assertEquals(true, object2);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationUnion0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1031, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1031, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("false()", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(16, coreFunction2.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-1369), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(7, expressionArray0.length);
      assertEquals((-1369), coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      expressionArray0[1] = (Expression) coreFunction0;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      Constant constant0 = new Constant("RHInt=bzs3zjN+0");
      expressionArray0[3] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = expression0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], expressionArray1[2]);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      int int0 = 1497;
      CoreFunction coreFunction2 = new CoreFunction((-448), expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = (-423);
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = (-1369);
      int int1 = 23;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      CoreFunction coreFunction0 = new CoreFunction((-984), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-984()(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(22, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.axes.AttributeContext");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(4333, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      QName qName0 = new QName("9I}B&");
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("jq[qgb");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationMod1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      int int0 = 17;
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      int int0 = 41;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      QName qName0 = new QName("");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      NodePointer nodePointer1 = NodePointer.newNodePointer(qName0, nodePointer0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodePointer1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "", nodePointer1);
      locale0.getDisplayName();
      JXPathContext jXPathContext1 = JXPathContext.newContext((Object) nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext1, qName0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nodePointer1);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction1.functionNamespaceURI(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BasicVariables basicVariables0 = new BasicVariables();
      coreFunction0.toString();
      EvalContext[] evalContextArray0 = new EvalContext[7];
      QName qName0 = new QName("string-length()", "string-length()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      evalContextArray0[0] = (EvalContext) parentContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction28()(null, null, null)");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.getFunctionCode();
      QName qName0 = new QName("jq[qgb");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      BasicVariables basicVariables0 = new BasicVariables();
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      BasicVariables basicVariables1 = new BasicVariables();
      String string0 = coreFunction0.toString();
      assertEquals("count()", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant((Number) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("wO-[$xL4#a8gIz>w}u(");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.jdom.IllegalAddException");
      Step step0 = new Step((-436), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-4530), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      QName qName0 = new QName("false", "Y@w#*");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      expressionArray1[0] = (Expression) coreOperationNegate0;
      Step step2 = new Step((-436), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-4530), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-4530), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-4530), processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(14, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(1409, processingInstructionTest0, expressionArray1);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction((-436), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)123;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      QName qName0 = new QName("");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      NodePointer nodePointer1 = NodePointer.newNodePointer(qName0, nodePointer0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodePointer1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "", nodePointer1);
      locale0.getDisplayName();
      JXPathContext jXPathContext1 = JXPathContext.newContext((Object) nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext1, qName0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nodePointer1);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction1.functionNamespaceURI(rootContext0);
      coreFunction1.functionNumber(rootContext0);
      Object object0 = coreFunction1.functionCount(rootContext0);
      assertEquals(1.0, object0);
      
      Object object1 = coreFunction1.functionFloor(rootContext0);
      assertEquals(Double.NaN, object1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1369), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("jq[qgb");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.getFunctionCode();
      QName qName0 = new QName("jq[qgb");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-645), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      QName qName0 = new QName("");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      NodePointer nodePointer1 = NodePointer.newNodePointer(qName0, nodePointer0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodePointer1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "", nodePointer1);
      locale0.getDisplayName();
      JXPathContext jXPathContext1 = JXPathContext.newContext((Object) nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext1, qName0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nodePointer1);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction1.functionNamespaceURI(rootContext0);
      coreFunction1.functionNumber(rootContext0);
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionCount(rootContext0);
      assertEquals(1.0, object0);
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      BasicVariables basicVariables0 = new BasicVariables();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      coreFunction0.isContextDependent();
      BasicVariables basicVariables0 = new BasicVariables();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(8, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 18;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1526), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("lang", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2944, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(4, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(32, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1726, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((byte)63, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.CollectionPointerFactory");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(431, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(29, int0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("92V_bG1DVK\".,");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreOperationGreaterThan0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("o\"");
      Expression[] expressionArray1 = new Expression[18];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      boolean boolean0 = coreOperationLessThan0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2146, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(919);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      coreFunction0.functionPosition(unionContext0);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(8);
      NamespaceContext namespaceContext1 = new NamespaceContext((EvalContext) null, nodeTypeTest1);
      coreFunction1.getFunctionName();
      boolean boolean0 = coreFunction1.isContextDependent();
      assertTrue(boolean0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      String string0 = coreFunction1.toString();
      assertEquals("string()", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-406), expressionArray0);
      coreFunction0.functionNull((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray1);
      coreFunction1.functionRound((EvalContext) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction1.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction((-449), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-449()(null, , null, null, null, null, null, unknownFunction0()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(2146, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-645), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-645), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      coreFunction1.getFunctionName();
      CoreFunction coreFunction2 = new CoreFunction((-3277), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      int int0 = 11;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("id");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.getFunctionName();
      Integer integer0 = new Integer((-1958));
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      QName qName0 = new QName("namespace-uri");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-607), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("string", string0);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertTrue(boolean0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      QName qName0 = new QName("namespace-uri");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      String string1 = coreFunction0.toString();
      assertEquals("unknownFunction-2233()()", string1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(61, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(15, (Expression[]) null);
      boolean boolean1 = coreFunction1.isContextDependent();
      assertFalse(boolean1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      String string0 = coreFunction1.toString();
      assertEquals("string-length()", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(22, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction3.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.getFunctionCode();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationGreaterThan0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M\"'r #`A3)FxP>+bG");
      coreOperationLessThan0.computeContextDependent();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreOperationAnd0);
      boolean boolean0 = coreOperationLessThan0.computeContextDependent();
      assertEquals(14, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.args = expressionArray0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(965, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.getFunctionName();
      Integer integer0 = new Integer(1495);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",QKH.a5R..huY*E<#");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      coreFunction0.functionStringLength(selfContext0);
      CoreFunction coreFunction1 = new CoreFunction((-1420), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1420()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(2952, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(29, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction3.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      String string0 = "org.apache.commons.jxpath.ri.compiler.CoreFunction";
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      Expression[] expressionArray0 = new Expression[7];
      Long long0 = new Long(1706L);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2241), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[3] = expression0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.ExpressionPath");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      processingInstructionTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("true()");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionLast(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      Expression[] expressionArray0 = new Expression[7];
      Long long0 = new Long(1706L);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2241), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[3] = expression0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      Expression expression1 = coreFunction0.getArg3();
      expressionArray0[5] = expression1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      Step step0 = new Step((-3863), nodeNameTest0, expressionArray0);
      Step step1 = new Step((-966), nodeNameTest0, expressionArray0);
      EvalContext evalContext1 = null;
      CoreFunction coreFunction1 = new CoreFunction((-966), expressionArray0);
      // Undeclared exception!
      coreFunction1.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant((Number) null);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("concat");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "concat");
      Step step0 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      Step step1 = new Step(13, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[2];
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) constant0;
      Step step2 = new Step(13, nodeNameTest0, expressionArray2);
      stepArray0[2] = step2;
      Step step3 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "position");
      Expression[] expressionArray3 = new Expression[8];
      expressionArray3[0] = (Expression) coreOperationAdd0;
      expressionArray3[1] = (Expression) constant0;
      expressionArray3[2] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[6]);
      expressionArray3[3] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray3[2], expressionArray1[5]);
      expressionArray3[4] = (Expression) coreOperationGreaterThan0;
      expressionArray3[5] = (Expression) coreOperationAdd0;
      expressionArray3[6] = (Expression) coreOperationAdd0;
      expressionArray3[7] = (Expression) coreOperationAdd0;
      Step step4 = new Step((-5200), nodeNameTest1, expressionArray3);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionPath0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray3[1], coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeNameTest1);
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray3[2], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray1[0], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionName(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000013 mod org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000013, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005 or org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000011))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.getFunctionCode();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      coreOperationLessThan0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreOperationLessThan0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1526), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2535);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreFunction0;
      Step step0 = new Step(3548, nodeTypeTest0, expressionArray1);
      Constant constant0 = new Constant("${&F@t");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[3], expressionArray0[1]);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[1], expressionArray0, (Step[]) null);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray1[4], expressionArray1, (Step[]) null);
      expressionPath1.createContextForStep((EvalContext) null, (-946), nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      nodeTypeTest0.toString();
      coreFunction0.compute((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(41, expressionArray1);
      coreFunction2.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction2.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[0] = null;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expression0, expression0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      expressionArray0[2] = expression0;
      Constant constant0 = new Constant("unknownFunction");
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(".ods8'J#3Z4:");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`");
      Step step0 = new Step(14, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step((-3091), processingInstructionTest0, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.computeValue((EvalContext) null);
      Step step0 = new Step((-566), processingInstructionTest0, expressionArray0);
      Step step1 = new Step(2, processingInstructionTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1368));
      Step step2 = new Step(32, processingInstructionTest0, (Expression[]) null);
      Constant constant0 = new Constant((String) null);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, locationPath0);
      Step[] stepArray1 = new Step[2];
      stepArray1[0] = step0;
      stepArray1[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray1);
      expressionPath0.createContextForStep((EvalContext) null, (-1368), processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction((-566), (Expression[]) null);
      coreFunction1.compute((EvalContext) null);
      assertEquals((-566), coreFunction1.getFunctionCode());
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "T+hBX");
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-148), expressionArray0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      coreFunction0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction-148()()");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, processingInstructionTest0);
      Object object0 = coreFunction0.functionLast(attributeContext0);
      assertEquals(1, attributeContext0.getPosition());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[0] = null;
      Constant constant0 = new Constant("Rn|bxhusU>^6R)9:");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], constant0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationSubtract0);
      QName qName0 = new QName("d!2E03", "Rn|bxhusU>^6R)9:");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.args = null;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      int int0 = 11;
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("id");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(true(), true(), true(), true())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("http://www.w3.org/XML/1998/namespace", "http://www.w3.org/XML/1998/namespace");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, expressionArray0[0]);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'V`)zu/~[(/MK-@");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002) | org.apache.commons.jxpath.ri.compiler.Constant@0000000003 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000006) | (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 * org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, 'null', $http://www.w3.org/XML/1998/namespace:http://www.w3.org/XML/1998/namespace, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 > org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-616), expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) coreFunction1;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction2 = new CoreFunction(17, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(unknownFunction0()(), , unknownFunction0()(), unknownFunction-616()(), unknownFunction-616()(), , , )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      QName qName0 = new QName("5", "5");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      int int0 = 32;
      CoreFunction coreFunction0 = new CoreFunction((-148), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)29;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction2 = new CoreFunction((-148), expressionArray1);
      coreFunction2.toString();
      coreFunction0.getArgumentCount();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      CoreFunction coreFunction3 = new CoreFunction((-1382), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("`");
      Step step0 = new Step(14, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step((-3091), processingInstructionTest0, (Expression[]) null);
      Step step2 = new Step(2, processingInstructionTest0, (Expression[]) null);
      QName qName0 = new QName("`");
      QName qName1 = new QName("x;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Step step3 = new Step((-1), processingInstructionTest0, (Expression[]) null);
      Step step4 = new Step((-3091), nodeNameTest0, (Expression[]) null);
      Step step5 = new Step(5264, processingInstructionTest0, (Expression[]) null);
      Step step6 = new Step((-1), nodeNameTest0, (Expression[]) null);
      Step step7 = new Step((-1368), processingInstructionTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2535);
      Step step8 = new Step((-3091), nodeTypeTest0, (Expression[]) null);
      Constant constant0 = new Constant((String) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, (Expression[]) null, (Step[]) null);
      expressionPath0.createContextForStep((EvalContext) null, 2535, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(994);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd");
      Step step0 = new Step(994, processingInstructionTest0, expressionArray0);
      Step step1 = new Step((-569), nodeTypeTest0, expressionArray0);
      QName qName0 = new QName("L/wAdhiw_y=BT");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      Step step2 = new Step((-569), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      stepArray0[3] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      expressionPath0.createContextForStep(attributeContext0, 9, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.functionString(nodeSetContext0);
      assertEquals(9, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, coreOperationEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationEqual0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[0], nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(1408, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4908);
      nodeTypeTest0.toString();
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1408()((org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004 >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004 = org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004 = org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("]RB[c%V[*");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-1382), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.args = null;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.args = null;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      QName qName0 = new QName("c2d\tFJ`]VJc7+tsF/", "c2d\tFJ`]VJc7+tsF/");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreOperationUnion0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationLessThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, extensionFunction0);
      Constant constant0 = new Constant("i)5\"EWkE}(;~");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationLessThanOrEqual0);
      Constant constant1 = new Constant(".P}ZStQS");
      Constant constant2 = new Constant((Number) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant2, coreOperationMod0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(3139, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2241), expressionArray1);
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2241()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      int int0 = 20;
      Expression[] expressionArray0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Expression[] expressionArray1 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(selfContext0, processingInstructionTest0);
      coreFunction0.computeValue((EvalContext) null);
      QName qName0 = new QName("false", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction1.functionNumber(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("fikM#bqB@ei?x", "1Q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      coreFunction0.compute((EvalContext) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1526), expressionArray0);
      EvalContext evalContext0 = null;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("V1`_+H?$4BM:");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "V1`_+H?$4BM:", locale0);
      NodePointer nodePointer1 = NodePointer.newNodePointer(qName0, jXPathContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreOperationOr0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      coreFunction0.functionLocalName(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      QName qName0 = new QName("5");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-148), expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction2 = new CoreFunction(11, expressionArray1);
      coreFunction1.getFunctionName();
      coreFunction0.getArgumentCount();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      CoreFunction coreFunction3 = new CoreFunction((-1382), expressionArray0);
      CoreFunction coreFunction4 = new CoreFunction(13, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction4.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(5(), , )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant((Number) null);
      QName qName0 = new QName("][:%1'8dZsl$L.]SQ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      QName qName1 = new QName("][:%1'8dZsl$L.]SQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNumber(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction(614, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContextArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant((Number) null);
      QName qName0 = new QName("c2d\tFJ`]VJc7+tsF/", "i)5\"EWkE}(;~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, extensionFunction0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationLessThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction((-1351), expressionArray1);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      QName qName1 = new QName("org.apache.commons.jxpath.ri.compiler.Step", "false");
      QName qName2 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName2);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("]RB[c%V[*");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction1.getArgumentCount();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      CoreFunction coreFunction3 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("]RB[c%V[*");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("tE&5dxQQUiBpBR");
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      Step step2 = new Step(32, processingInstructionTest1, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(15, processingInstructionTest1, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 15, processingInstructionTest1);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("]RB[c%V[*");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      coreFunction0.compute((EvalContext) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("]RB[c%V[*");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(614, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction614()(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002) + (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002) + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) + org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(968, expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(61, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(15, (Expression[]) null);
      coreFunction2.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("_R_gn");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction1, coreFunction1);
      CoreFunction coreFunction2 = new CoreFunction(15, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction1.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction2.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant((Number) null);
      QName qName0 = new QName("c2d\tFJ`]VJc7+tsF/", "i)5\"EWkE}(;~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, extensionFunction0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationLessThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[3] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1526), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(968);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1526()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("_R_gn");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      expressionPath0.createContextForStep((EvalContext) null, 819, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(968, expressionArray0);
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Step step0 = new Step(994, nodeTypeTest0, expressionArray0);
      QName qName0 = new QName("Xw.4qmI");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2123), expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(968, expressionArray1);
      CoreFunction coreFunction3 = new CoreFunction(9, expressionArray1);
      coreFunction3.getFunctionName();
      coreFunction0.getArgumentCount();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("_R_gn");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationOr0);
      CoreFunction coreFunction2 = new CoreFunction((-1064), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1064));
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant((Number) null);
      QName qName0 = new QName("][:%1'8dZsl$L.]SQ");
      QName qName1 = new QName("=#tQg5!c5");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-958), expressionArray0);
      QName qName2 = new QName("4CD7>8c2JG0");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      CoreFunction coreFunction2 = new CoreFunction(11, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-958()", string0);
      
      coreFunction2.getArgumentCount();
      assertEquals(11, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1526), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("]BQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(20, nodeNameTest0, expressionArray0);
      Step step1 = new Step((-2233), nodeNameTest0, expressionArray0);
      Step step2 = new Step(8, nodeNameTest0, expressionArray0);
      Step step3 = new Step(17, nodeNameTest0, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[2];
      stepArray0[0] = step2;
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      QName qName1 = new QName("Incorrect number of arguments: ", "]BQ");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "*QuB6x2.reHB]w");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      precedingOrFollowingContext0.reset();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      QName qName0 = new QName("_R_gn");
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(45, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Invalid expression type. '");
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction45()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int int0 = (-2233);
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("2]<%dt?-=4l:X");
      VariableReference variableReference0 = new VariableReference(qName0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, variableReference0);
      coreFunction0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2233()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("_R_gn");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction2.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("_R_gn");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-645), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-4418), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant((Number) null);
      QName qName0 = new QName("][:%1'8dZsl$L.]SQ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      QName qName1 = new QName("][:%1'8dZsl$L.]SQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, extensionFunction0);
      CoreFunction coreFunction2 = new CoreFunction(15, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("floor", string0);
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "i)5\"EWkE}(;~";
      QName qName0 = new QName("y( A0'G}Vofu#G", "$v");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction((-2070), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1526), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1526()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("]BQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1563);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationNotEqual0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant("]BQ");
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[4]);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationMod0, expressionArray0[0]);
      expressionArray0[5] = (Expression) nameAttributeTest1;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[5], expressionArray0, stepArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath1, coreOperationNotEqual0);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1563, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant((Number) null);
      QName qName0 = new QName("c2d\tFJ`]VJc7+tsF/", "i)5\"EWkE}(;~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, extensionFunction0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationLessThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[3] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with((org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004) * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, andorg.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000008 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004), 'null', -(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000008), org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 + (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000006) + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000009 + org.apache.commons.jxpath.ri.compiler.Constant@0000000010 + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000011 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000012 + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000013), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000011 = (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000006))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Constant constant1 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression");
      expressionArray0[1] = (Expression) constant1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1911), expressionArray0);
      coreFunction0.getFunctionCode();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, false, (NodeTest) null);
      nodeSetContext0.getValue();
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      coreOperationMultiply0.iterate(ancestorContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1911()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression', org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("]BQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      QName qName1 = new QName("Incorrect number of arguments: ", "Incorrect number of arguments: ");
      ExpressionPath expressionPath1 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ExpressionPath expressionPath2 = new ExpressionPath(expressionPath1, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Incorrect number of arguments: ");
      expressionPath1.createContextForStep((EvalContext) null, 0, processingInstructionTest0);
      coreFunction0.compute((EvalContext) null);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2233()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      QName qName0 = new QName("_R_gn");
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.getFunctionCode();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(1, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      Step step2 = new Step(3270, processingInstructionTest0, expressionArray0);
      QName qName0 = new QName("x;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      Step step4 = new Step(0, processingInstructionTest0, expressionArray0);
      Step step5 = new Step(5264, processingInstructionTest0, expressionArray0);
      Step step6 = new Step(0, processingInstructionTest0, expressionArray0);
      Step step7 = new Step(0, processingInstructionTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2535);
      Step step8 = new Step(8, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step1;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-645), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-645()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("]BQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      QName qName1 = new QName("Incorrect number of arguments: ", "Incorrect number of arguments: ");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "Incorrect number of arguments: ");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest1, false);
      precedingOrFollowingContext0.reset();
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(814, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(404, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2827);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction404()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(968, expressionArray0);
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      Step step0 = new Step(994, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(994, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      expressionPath0.createContextForStep(attributeContext0, 3913, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      int int0 = 2;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position($, '', org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 mod org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-645), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-645()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      int int0 = (-2233);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("2]<%dt?-=4l:X");
      VariableReference variableReference0 = new VariableReference(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2233()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      int int0 = (-2233);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("2]<%dt?-=4l:X");
      VariableReference variableReference0 = new VariableReference(qName0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, variableReference0);
      variableReference0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2233()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-645), (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("r", "r");
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-645()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = (-2233);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("2]<%dt?-=4l:X");
      VariableReference variableReference0 = new VariableReference(qName0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, variableReference0);
      variableReference0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("_R_gn");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1128), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.getFunctionCode();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(1, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      Step step2 = new Step(3270, processingInstructionTest0, expressionArray0);
      QName qName0 = new QName("x;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      Step step4 = new Step(0, processingInstructionTest0, expressionArray0);
      Step step5 = new Step(5264, processingInstructionTest0, expressionArray0);
      Step step6 = new Step(0, processingInstructionTest0, expressionArray0);
      Step step7 = new Step(0, processingInstructionTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2535);
      Step step8 = new Step(8, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step1;
      stepArray0[2] = step3;
      stepArray0[3] = step1;
      stepArray0[4] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 1, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      int int0 = (-2233);
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("2]<%dt?-=4l:X");
      VariableReference variableReference0 = new VariableReference(qName0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, variableReference0);
      variableReference0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2233()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      QName qName0 = new QName("_R_gn");
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 > org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1526), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1526()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(selfContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(4680, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[0] = null;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, expression0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreFunction0, coreOperationMultiply0);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction1 = new CoreFunction(767, expressionArray0);
      assertEquals(767, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      constant0.toString();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationMod0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getFunctionCode();
      coreFunction0.getFunctionCode();
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("''");
      Step step0 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-2529), nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(1122, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationMod0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationMod0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreOperationMod0;
      Step step8 = new Step((-1853), nodeTypeTest0, expressionArray1);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 1, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last($, '', org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 mod org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 - org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-862), (Expression[]) null);
      Step[] stepArray0 = new Step[7];
      int int0 = 4862;
      QName qName0 = new QName("Invalid argument type for 'sum': ", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(4862, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-862), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[7];
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.args = null;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int int0 = (-2233);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2233), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("2]<%dt?-=4l:X");
      VariableReference variableReference0 = new VariableReference(qName0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, variableReference0);
      variableReference0.toString();
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[0] = null;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-1455), expressionArray0);
      expressionArray0[3] = (Expression) coreFunction1;
      QName qName0 = new QName("!Ht:KWW", "!Ht:KWW");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      Expression expression1 = coreFunction0.getArg1();
      expressionArray0[5] = expression1;
      Expression expression2 = coreFunction1.getArg1();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expression2, expression1);
      expressionArray0[6] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = expression1;
      expressionArray1[1] = expression1;
      expressionArray1[2] = (Expression) coreFunction1;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[7] = (Expression) coreOperationUnion0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction2 = new CoreFunction((-1455), expressionArray0);
      assertEquals((-1455), coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("*d");
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("*d");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      Step step0 = new Step(282, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(4012, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(421, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(4012, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(421, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(282, nodeNameTest0, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[2], expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray1[3]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Constant constant1 = new Constant("name");
      expressionArray0[2] = (Expression) constant1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, nameAttributeTest0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(282, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(282, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("]BQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      QName qName1 = new QName("Incorrect number of arguments: ", "Incorrect number of arguments: ");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "Incorrect number of arguments: ");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest1, false);
      precedingOrFollowingContext0.reset();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Expression[] expressionArray1 = new Expression[7];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = null;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, expressionArray1[0]);
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      expressionArray1[3] = null;
      expressionArray1[4] = null;
      expressionArray1[5] = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[6] = (Expression) coreOperationAdd0;
      Step step0 = new Step(3, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(3, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1260), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = null;
      expressionArray2[1] = null;
      expressionArray2[2] = (Expression) coreOperationSubtract0;
      Step step5 = new Step(3, processingInstructionTest0, expressionArray2);
      stepArray0[5] = step5;
      Step step6 = new Step(0, processingInstructionTest0, expressionArray2);
      stepArray0[6] = step6;
      Step step7 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(69, processingInstructionTest0, expressionArray1);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      AncestorContext ancestorContext0 = new AncestorContext(unionContext0, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-645), (Expression[]) null);
      QName qName0 = new QName("r", "r");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-645()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("+&I(XpvJz|w('yTY=bY");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationSubtract0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationSubtract1;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      Step step0 = new Step((-1792), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step3 = new Step(0, nodeNameTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(20, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(0, nodeNameTest1, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step((-2427), nodeNameTest1, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step((-1792), nodeNameTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      Expression[] expressionArray2 = new Expression[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray2, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }
}
