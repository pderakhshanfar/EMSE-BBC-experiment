/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 03:57:27 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      String string0 = "\"number\"";
      QName qName0 = new QName("\"number\"", "\"number\"");
      assertNotNull(qName0);
      assertEquals("\"number\"", qName0.getName());
      assertEquals("\"number\"", qName0.getPrefix());
      assertEquals("\"number\":\"number\"", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("\"number\"", qName0.getName());
      assertEquals("\"number\"", qName0.getPrefix());
      assertEquals("\"number\":\"number\"", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals("\"number\"", qName0.getName());
      assertEquals("\"number\"", qName0.getPrefix());
      assertEquals("\"number\":\"number\"", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext0);
      assertEquals("\"number\"", qName0.getName());
      assertEquals("\"number\"", qName0.getPrefix());
      assertEquals("\"number\":\"number\"", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '\"number\":\"number\"'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[2];
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "R8F9CO,+#W");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Step step0 = new Step((-54), (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      assertEquals((-54), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(4, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(4, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreFunction0, expressionArray0[0]);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreOperationLessThanOrEqual1);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(predicateContext0);
      assertNotSame(predicateContext0, evalContext0);
      assertNotSame(evalContext0, predicateContext0);
      assertNotSame(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual1);
      assertNotSame(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      assertFalse(evalContext0.equals((Object)predicateContext0));
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(evalContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      coreOperationLessThanOrEqual1.args = expressionArray0;
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(evalContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-18), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-18), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-18), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-18), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("line.separator", "JBW|IC");
      assertNotNull(qName0);
      assertEquals("line.separator", qName0.getPrefix());
      assertEquals("line.separator:JBW|IC", qName0.toString());
      assertEquals("JBW|IC", qName0.getName());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "JBW|IC", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("line.separator", qName0.getPrefix());
      assertEquals("line.separator:JBW|IC", qName0.toString());
      assertEquals("JBW|IC", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-18), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("line.separator", qName0.getPrefix());
      assertEquals("line.separator:JBW|IC", qName0.toString());
      assertEquals("JBW|IC", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-18), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("line.separator", qName0.getPrefix());
      assertEquals("line.separator:JBW|IC", qName0.toString());
      assertEquals("JBW|IC", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-18), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("line.separator", qName0.getPrefix());
      assertEquals("line.separator:JBW|IC", qName0.toString());
      assertEquals("JBW|IC", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "WMd9i-6?xHyP]Fo;");
      assertNotNull(nodeNameTest0);
      assertEquals("line.separator", qName0.getPrefix());
      assertEquals("line.separator:JBW|IC", qName0.toString());
      assertEquals("JBW|IC", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("line.separator:JBW|IC", nodeNameTest0.toString());
      assertEquals("WMd9i-6?xHyP]Fo;", nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext(initialContext0, true, nodeNameTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(descendantContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-18), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("line.separator", qName0.getPrefix());
      assertEquals("line.separator:JBW|IC", qName0.toString());
      assertEquals("JBW|IC", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("line.separator:JBW|IC", nodeNameTest0.toString());
      assertEquals("WMd9i-6?xHyP]Fo;", nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: line.separator:JBW|IC
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "R8ZF9CO,++W");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) nameAttributeTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("ancestor");
      assertNotNull(qName0);
      assertEquals("ancestor", qName0.toString());
      assertEquals("ancestor", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("ancestor", qName0.toString());
      assertEquals("ancestor", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("ancestor", qName0.toString());
      assertEquals("ancestor", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(descendantContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals("ancestor", qName0.toString());
      assertEquals("ancestor", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      
      NodePointer nodePointer0 = nodeSetContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertEquals("ancestor", qName0.toString());
      assertEquals("ancestor", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, descendantContext0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ancestor", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(initialContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("ancestor", qName0.toString());
      assertEquals("ancestor", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3352, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3352, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationNotEqual0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], constant0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationGreaterThan0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(40);
      assertEquals(40, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Constant constant1 = new Constant("local-namelocal-name");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-877), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-877), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-1835), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1835), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1835), coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()('local-namelocal-name', 40)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Constant constant0 = new Constant("{");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("{");
      assertNotNull(qName0);
      assertEquals("{", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("{", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(733, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(733, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[0], expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, expressionArray1[2]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationDivide0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray1[5] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray1[6] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2640);
      assertNotNull(nodeTypeTest0);
      assertEquals(2640, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(48, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(step0);
      assertEquals(2640, nodeTypeTest0.getNodeType());
      assertEquals(48, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(48, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(step1);
      assertEquals(2640, nodeTypeTest0.getNodeType());
      assertEquals(48, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray1[7] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(48, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(48, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      coreFunction0.args = expressionArray0;
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Short short0 = new Short((short) (-1100));
      assertEquals((short) (-1100), (short)short0);
      assertNotNull(short0);
      
      Constant constant1 = new Constant(short0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((short) (-1100), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1100), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertEquals((-1100), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      nameAttributeTest0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Constant constant0 = new Constant("local-namelocal-name");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-6), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-6), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals((-6), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Constant constant0 = new Constant("local-nmelocal-nam`efalse");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      QName qName0 = new QName("false", "a,38m-C?+_3a,38m-C?+_3");
      assertNotNull(qName0);
      assertEquals("false", qName0.getPrefix());
      assertEquals("a,38m-C?+_3a,38m-C?+_3", qName0.getName());
      assertEquals("false:a,38m-C?+_3a,38m-C?+_3", qName0.toString());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("false", qName0.getPrefix());
      assertEquals("a,38m-C?+_3a,38m-C?+_3", qName0.getName());
      assertEquals("false:a,38m-C?+_3a,38m-C?+_3", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("false", qName0.getPrefix());
      assertEquals("a,38m-C?+_3a,38m-C?+_3", qName0.getName());
      assertEquals("false:a,38m-C?+_3a,38m-C?+_3", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertTrue(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2517()('local-nmelocal-nam`efalse', 'local-nmelocal-nam`efalse')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("0swO4:D,c", "0swO4:D,c");
      assertNotNull(qName0);
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest0.toString());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      Step step0 = new Step(1823, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step0);
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest0.toString());
      assertEquals(1823, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest0.toString());
      assertEquals(32, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(32, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(32, step2.getAxis());
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest0.toString());
      
      stepArray0[2] = step2;
      Step step3 = new Step(32, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step3);
      assertEquals(32, step3.getAxis());
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest0.toString());
      
      stepArray0[3] = step3;
      Step step4 = new Step(100, nodeNameTest0, expressionArray1);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step4);
      assertEquals(100, step4.getAxis());
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest0.toString());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-434), nodeNameTest0, expressionArray1);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step5);
      assertEquals((-434), step5.getAxis());
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest0.toString());
      
      stepArray0[5] = step5;
      Step step6 = new Step(100, nodeNameTest0, expressionArray1);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step6);
      assertEquals(100, step6.getAxis());
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest0.toString());
      
      stepArray0[6] = step6;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "0swO4:D,c");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("0swO4:D,c", nodeNameTest1.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest1.toString());
      
      Step step7 = new Step(19, nodeNameTest1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step7);
      assertEquals("0swO4:D,c:0swO4:D,c", qName0.toString());
      assertEquals("0swO4:D,c", qName0.getPrefix());
      assertEquals("0swO4:D,c", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("0swO4:D,c", nodeNameTest1.getNamespaceURI());
      assertEquals("0swO4:D,c:0swO4:D,c", nodeNameTest1.toString());
      assertEquals(19, step7.getAxis());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(8, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[3]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1823, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1823, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Constant constant1 = new Constant("local-namelocal-name");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-877), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-877), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-1808), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-1808), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("l-namelocal-name", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals((-1808), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(5, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name('local-namelocal-name', 5)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant constant0 = new Constant("3");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3736, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3736, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("ue", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(3736, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("trueR8ZF9CO,++W", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object2.equals((Object)object0));
      assertEquals("", object2);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2517()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'R8ZF9CO,++W')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("true", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertTrue(object1.equals((Object)object0));
      assertEquals("true", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertEquals("", object2);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2517()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2574), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2574), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("true", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-2574), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-1964), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1964), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Constant constant0 = new Constant("k|ss");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1240, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1240, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1240, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], constant0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant1 = new Constant((String) null);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(318, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(318, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(318, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(318, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(318, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction318()('null', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("true", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2517()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Constant constant0 = new Constant("{");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(750, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(750, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Constant constant0 = new Constant("Kd9fJC^#,");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(226, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string0 = constant0.toString();
      assertEquals("'Kd9fJC^#,'", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      int int0 = 3;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[5] = (Expression) coreFunction0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(22, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "^~y2ELuU&{k,sS*");
      assertNotNull(nodeNameTest0);
      assertEquals("^~y2ELuU&{k,sS*", nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("^~y2ELuU&{k,sS*", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("namespace-uri", "tru");
      assertNotNull(qName0);
      assertEquals("tru", qName0.getName());
      assertEquals("namespace-uri", qName0.getPrefix());
      assertEquals("namespace-uri:tru", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("tru", qName0.getName());
      assertEquals("namespace-uri", qName0.getPrefix());
      assertEquals("namespace-uri:tru", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationDivide1);
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(1059, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1059, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Constant constant0 = new Constant("<");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(226, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PIhT:vRP~Slr|/cj");
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((-174), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-174), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction226()('<', '<')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Constant constant0 = new Constant("local-namelocal-name");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant constant0 = new Constant("local-namelocal-name");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(false, object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'local-namelocal-name')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(226, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(226, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("", "descendant");
      assertNotNull(qName0);
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      
      Step step0 = new Step(142, nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      assertEquals(142, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(142, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      assertEquals(142, step1.getAxis());
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      Step step2 = new Step(2, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step2);
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      assertEquals(2, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeNameTest0, expressionArray1);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step3);
      assertEquals(2, step3.getAxis());
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      
      stepArray0[3] = step3;
      Step step4 = new Step(142, nodeNameTest0, expressionArray1);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step4);
      assertEquals(142, step4.getAxis());
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-781), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step5);
      assertEquals((-781), step5.getAxis());
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-781), nodeNameTest0, expressionArray1);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step6);
      assertEquals((-781), step6.getAxis());
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      
      stepArray0[6] = step6;
      Step step7 = new Step(226, nodeNameTest0, expressionArray1);
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step7);
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      assertEquals(226, step7.getAxis());
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertNotNull(expressionPath0);
      
      QName qName1 = new QName("");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "C)Tguf*d");
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("C)Tguf*d", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, (-781), nodeNameTest1);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(qName1, qName0);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(2, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertNull(evalContext0);
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("C)Tguf*d", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      Object object0 = coreFunction0.functionContains(precedingOrFollowingContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(qName0, qName1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals("descendant", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":descendant", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":descendant", nodeNameTest0.toString());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      EvalContext evalContext1 = null;
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotSame(expressionArray0, expressionArray1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(true, object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(226, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction226()('', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("true", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("local-namelocal-name", "local-namelocal-name");
      assertNotNull(qName0);
      assertEquals("local-namelocal-name:local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertEquals("local-namelocal-name", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("local-namelocal-name:local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertEquals("local-namelocal-name", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction1);
      assertEquals("local-namelocal-name:local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertEquals("local-namelocal-name", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-3), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-3), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Constant constant0 = new Constant("local-namelocal-name");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(226, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction226()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'local-namelocal-name')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(226, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction226()('', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant constant0 = new Constant("O");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1576), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1576), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals((-1576), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) constant0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      Locale locale0 = new Locale("", "", "2 _xN`d-@V&");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("2 _xN`d-@V&", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("2 _xN`d-@V&", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(nullPointer0, qName0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("2 _xN`d-@V&", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(rootContext0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("2 _xN`d-@V&", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(rootContext1, rootContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(rootContext1);
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("2 _xN`d-@V&", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(rootContext1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Constant constant0 = new Constant("{");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      nameAttributeTest0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(754, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(754, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      nameAttributeTest0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3719);
      assertNotNull(nodeTypeTest0);
      assertEquals(3719, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(3719, nodeTypeTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(3719, nodeTypeTest0.getNodeType());
      assertEquals(3719, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(3719, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(3719, nodeTypeTest0.getNodeType());
      assertEquals(3719, step1.getAxis());
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      Step step2 = new Step(3719, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(4, expressionArray1.length);
      assertNotNull(step2);
      assertEquals(3719, nodeTypeTest0.getNodeType());
      assertEquals(3719, step2.getAxis());
      
      stepArray0[2] = step2;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Step step3 = new Step(3719, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step3);
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(3719, step3.getAxis());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      stepArray0[3] = step3;
      Step step4 = new Step(2048, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step4);
      assertEquals(2048, step4.getAxis());
      assertEquals(3719, nodeTypeTest0.getNodeType());
      
      stepArray0[4] = step4;
      Step step5 = new Step(3719, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step5);
      assertEquals(3719, nodeTypeTest0.getNodeType());
      assertEquals(3719, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(41, nodeNameTest0, expressionArray1);
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(4, expressionArray1.length);
      assertNotNull(step6);
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(41, step6.getAxis());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      stepArray0[6] = step6;
      Step step7 = new Step(15, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step7);
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(15, step7.getAxis());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      stepArray0[7] = step7;
      Expression[] expressionArray2 = new Expression[6];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationAnd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      expressionArray2[1] = (Expression) variableReference0;
      expressionArray2[2] = (Expression) coreOperationAnd0;
      expressionArray2[3] = (Expression) coreOperationAnd0;
      expressionArray2[4] = (Expression) coreOperationAnd0;
      expressionArray2[5] = (Expression) coreOperationAnd0;
      Step step8 = new Step(102, nodeTypeTest0, expressionArray2);
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(6, expressionArray2.length);
      assertNotNull(step8);
      assertEquals(102, step8.getAxis());
      assertEquals(3719, nodeTypeTest0.getNodeType());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals(4, expressionArray1.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(3719, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(3719, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variableReference0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[0], (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ParentContext parentContext0 = new ParentContext(rootContext0, nodeTypeTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(parentContext0);
      assertEquals(3719, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      // Undeclared exception!
      coreFunction0.functionFalse(parentContext0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("3RX", "5Q0SLCmzs)`SdJYG~");
      assertNotNull(qName0);
      assertEquals("3RX", qName0.getPrefix());
      assertEquals("5Q0SLCmzs)`SdJYG~", qName0.getName());
      assertEquals("3RX:5Q0SLCmzs)`SdJYG~", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("3RX", qName0.getPrefix());
      assertEquals("5Q0SLCmzs)`SdJYG~", qName0.getName());
      assertEquals("3RX:5Q0SLCmzs)`SdJYG~", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("3RX", qName0.getPrefix());
      assertEquals("5Q0SLCmzs)`SdJYG~", qName0.getName());
      assertEquals("3RX:5Q0SLCmzs)`SdJYG~", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      Constant constant1 = new Constant("5Q0SLCmzs)`SdJYG~");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[3] = (Expression) constant1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, variableReference0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("3RX", qName0.getPrefix());
      assertEquals("5Q0SLCmzs)`SdJYG~", qName0.getName());
      assertEquals("3RX:5Q0SLCmzs)`SdJYG~", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("3RX", qName0.getPrefix());
      assertEquals("5Q0SLCmzs)`SdJYG~", qName0.getName());
      assertEquals("3RX:5Q0SLCmzs)`SdJYG~", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      assertEquals(6, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1823, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1823, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1701), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1701), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-1701), nodeTypeTest0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals((-1701), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1701), nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals((-1701), step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals((-1701), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(predicateContext0);
      assertEquals((-1701), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(13);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotNull(nodeTypeTest1);
      assertEquals(13, nodeTypeTest1.getNodeType());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(predicateContext0, (-1701), nodeTypeTest1);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNull(evalContext0);
      assertEquals((-1701), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(13, nodeTypeTest1.getNodeType());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionNot(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("{");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("{", " true");
      assertNotNull(qName0);
      assertEquals("{", qName0.getPrefix());
      assertEquals(" true", qName0.getName());
      assertEquals("{: true", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("{", qName0.getPrefix());
      assertEquals(" true", qName0.getName());
      assertEquals("{: true", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(754, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(754, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationMultiply0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionArray0[0]);
      assertEquals(8, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("key");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[4] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction1);
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction1;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationOr0, extensionFunction0);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(nameAttributeTest1);
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest1, coreOperationNegate0);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, nameAttributeTest1);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(32767, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(32767, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "~$=#TOH");
      assertNotNull(nodeNameTest0);
      assertEquals("~$=#TOH", nodeNameTest0.getNamespaceURI());
      assertEquals("key", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.toString());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("~$=#TOH", nodeNameTest0.getNamespaceURI());
      assertEquals("key", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("key", qName0.toString());
      
      // Undeclared exception!
      coreFunction0.functionNull(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-3190), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-3190), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionLang(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-2725), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-2725), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(2, expressionArray0.length);
      assertNull(expression0);
      assertEquals((-2725), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = null;
      QName qName0 = new QName("true");
      assertNotNull(qName0);
      assertEquals("true", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("true", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2725), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-2725), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("U`|L..>");
      assertNotNull(qName0);
      assertEquals("U`|L..>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("U`|L..>", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("U`|L..>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("U`|L..>", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer");
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(748, processingInstructionTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", processingInstructionTest0.getTarget());
      assertEquals(748, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1439), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("org.apache.commons.jxpath.ri.model.dom.DOMNodePointer", processingInstructionTest0.getTarget());
      assertEquals((-1439), step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("U`|L..>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("U`|L..>", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("U`|L..>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("U`|L..>", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("U`|L..>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("U`|L..>", qName0.getName());
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, expressionArray0[3]);
      assertEquals(9, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("U`|L..>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("U`|L..>", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[6] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[6]);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationOr1;
      CoreFunction coreFunction0 = new CoreFunction(748, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(748, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short) (-2903), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2903), coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-2903()", string0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2903), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2903), coreFunction0.getFunctionCode());
      
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertFalse(object1.equals((Object)string0));
      assertEquals("0", object1);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2903), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      String string0 = coreOperationAdd0.toString();
      assertNotSame(coreOperationAdd0, coreOperationAdd1);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      int int0 = 3667;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("not", "not");
      assertNotNull(qName0);
      assertEquals("not", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals("not:not", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("not", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals("not:not", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[1]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(extensionFunction1);
      assertEquals("not", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals("not:not", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], extensionFunction1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(6, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("not", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals("not:not", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], coreOperationNotEqual0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(6, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreOperationMod0);
      assertEquals("not", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals("not:not", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract0, extensionFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("not", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals("not:not", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationMod0, nameAttributeTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals(6, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreOperationNotEqual1);
      assertEquals("not", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals("not:not", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(618, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(618, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(200, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(200, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(200, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("p!hW!L;f", "p!hW!L;f");
      assertNotNull(qName0);
      assertEquals("p!hW!L;f", qName0.getName());
      assertEquals("p!hW!L;f", qName0.getPrefix());
      assertEquals("p!hW!L;f:p!hW!L;f", qName0.toString());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, decimalFormat0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("p!hW!L;f", qName0.getName());
      assertEquals("p!hW!L;f", qName0.getPrefix());
      assertEquals("p!hW!L;f:p!hW!L;f", qName0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(200, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("p!hW!L;f", qName0.getName());
      assertEquals("p!hW!L;f", qName0.getPrefix());
      assertEquals("p!hW!L;f:p!hW!L;f", qName0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(rootContext0);
      assertEquals(200, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("p!hW!L;f", qName0.getName());
      assertEquals("p!hW!L;f", qName0.getPrefix());
      assertEquals("p!hW!L;f:p!hW!L;f", qName0.toString());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionRound(rootContext0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("", "attribute");
      assertNotNull(qName0);
      assertEquals(":attribute", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("attribute", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(":attribute", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("attribute", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction1);
      assertEquals(":attribute", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("attribute", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[2]);
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(":attribute", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("attribute", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[3], expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction1, coreOperationLessThanOrEqual0);
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(":attribute", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("attribute", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(58, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(58, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNull(jXPathContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      InitialContext initialContext0 = new InitialContext(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertNotNull(initialContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      boolean boolean0 = initialContext0.hasNext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertFalse(boolean0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(1, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertEquals(0.0, object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(1, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("ThY@@r*0", "ThY@@r*0");
      assertNotNull(qName0);
      assertEquals("ThY@@r*0", qName0.getPrefix());
      assertEquals("ThY@@r*0", qName0.getName());
      assertEquals("ThY@@r*0:ThY@@r*0", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(extensionFunction0);
      assertEquals("ThY@@r*0", qName0.getPrefix());
      assertEquals("ThY@@r*0", qName0.getName());
      assertEquals("ThY@@r*0:ThY@@r*0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionArray1[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, coreOperationOr0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("ThY@@r*0", qName0.getPrefix());
      assertEquals("ThY@@r*0", qName0.getName());
      assertEquals("ThY@@r*0:ThY@@r*0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[3], expressionArray1[3]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant0 = new Constant("ThY@@r*0");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("Gt");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-3179), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-3179), coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(Double.NaN, object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationUnion1);
      assertEquals("|", coreOperationUnion1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion1;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(137);
      assertNotNull(nodeTypeTest0);
      assertEquals(137, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(16, nodeTypeTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(137, nodeTypeTest0.getNodeType());
      assertEquals(16, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-4314), nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(137, nodeTypeTest0.getNodeType());
      assertEquals((-4314), step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte) (-76);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)6, (byte)9, (byte)29, (byte)48, (byte)18, (byte) (-76)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(">\"%:[\"RUEE|");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(31, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(31, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(31, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(50, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(50, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName(";eL BFCo2zkmGFo", ";eL BFCo2zkmGFo");
      assertNotNull(qName0);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", nodeNameTest0.toString());
      
      Step step0 = new Step(721, nodeNameTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", nodeNameTest0.toString());
      assertEquals(721, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(721, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", nodeNameTest0.toString());
      assertEquals(721, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(721, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", nodeNameTest0.toString());
      assertEquals(721, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(721, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(721, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction721()", string0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(721, coreFunction0.getFunctionCode());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      ChildContext childContext0 = new ChildContext(ancestorContext0, nodeNameTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      
      SelfContext selfContext0 = new SelfContext(childContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", qName0.toString());
      assertEquals(";eL BFCo2zkmGFo", qName0.getPrefix());
      assertEquals(";eL BFCo2zkmGFo", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(";eL BFCo2zkmGFo:;eL BFCo2zkmGFo", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("local-nmelocal-nam`e");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(997, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(997, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("local-nmelocal-nam`e", "local-nmelocal-nam`e");
      assertNotNull(qName0);
      assertEquals("local-nmelocal-nam`e:local-nmelocal-nam`e", qName0.toString());
      assertEquals("local-nmelocal-nam`e", qName0.getName());
      assertEquals("local-nmelocal-nam`e", qName0.getPrefix());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, expressionArray0.length);
      assertNotNull(beanPointer0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(997, coreFunction0.getFunctionCode());
      assertEquals("local-nmelocal-nam`e:local-nmelocal-nam`e", qName0.toString());
      assertEquals("local-nmelocal-nam`e", qName0.getName());
      assertEquals("local-nmelocal-nam`e", qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(997, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("local-nmelocal-nam`e:local-nmelocal-nam`e", qName0.toString());
      assertEquals("local-nmelocal-nam`e", qName0.getName());
      assertEquals("local-nmelocal-nam`e", qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(rootContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(997, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("local-nmelocal-nam`e:local-nmelocal-nam`e", qName0.toString());
      assertEquals("local-nmelocal-nam`e", qName0.getName());
      assertEquals("local-nmelocal-nam`e", qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step0 = new Step(535, processingInstructionTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(535, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(535, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(535, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1462), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step2);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-1462), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1348, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step3);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(1348, step3.getAxis());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(4, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], locationPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(535, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(535, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(",C");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("/b*-Mg^$zm^Dsk");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("/b*-Mg^$zm^Dsk", qName0.getName());
      assertEquals("/b*-Mg^$zm^Dsk", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("/b*-Mg^$zm^Dsk", qName0.getName());
      assertEquals("/b*-Mg^$zm^Dsk", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("/b*-Mg^$zm^Dsk", nodeNameTest0.toString());
      
      Step step0 = new Step(29, nodeNameTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("/b*-Mg^$zm^Dsk", qName0.getName());
      assertEquals("/b*-Mg^$zm^Dsk", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("/b*-Mg^$zm^Dsk", nodeNameTest0.toString());
      assertEquals(29, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step1);
      assertNull(qName0.getPrefix());
      assertEquals("/b*-Mg^$zm^Dsk", qName0.getName());
      assertEquals("/b*-Mg^$zm^Dsk", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("/b*-Mg^$zm^Dsk", nodeNameTest0.toString());
      assertEquals(0, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertNotSame(evalContext0, predicateContext0);
      assertFalse(evalContext0.equals((Object)predicateContext0));
      assertEquals(3, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(evalContext0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", object0);
      assertNotNull(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2894, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2894, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2894, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(false, object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2894, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2894()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "!V-])AYRR");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("!V-])AYRR", "$Ax@l_@|0>`]z-8].");
      assertNotNull(qName0);
      assertEquals("!V-])AYRR", qName0.getPrefix());
      assertEquals("!V-])AYRR:$Ax@l_@|0>`]z-8].", qName0.toString());
      assertEquals("$Ax@l_@|0>`]z-8].", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("!V-])AYRR", qName0.getPrefix());
      assertEquals("!V-])AYRR:$Ax@l_@|0>`]z-8].", qName0.toString());
      assertEquals("$Ax@l_@|0>`]z-8].", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("!V-])AYRR:$Ax@l_@|0>`]z-8].", nodeNameTest0.toString());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("!V-])AYRR", qName0.getPrefix());
      assertEquals("!V-])AYRR:$Ax@l_@|0>`]z-8].", qName0.toString());
      assertEquals("$Ax@l_@|0>`]z-8].", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("!V-])AYRR:$Ax@l_@|0>`]z-8].", nodeNameTest0.toString());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)evalContext0.getJXPathContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-132774720), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-132774720), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(evalContext0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("2[.}pQR&%A");
      assertNotNull(qName0);
      assertEquals("2[.}pQR&%A", qName0.getName());
      assertEquals("2[.}pQR&%A", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("2[.}pQR&%A", qName0.getName());
      assertEquals("2[.}pQR&%A", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, variableReference0);
      assertNotNull(coreOperationEqual0);
      assertEquals("2[.}pQR&%A", qName0.getName());
      assertEquals("2[.}pQR&%A", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      QName qName1 = new QName("2[.}pQR&%A", "2[.}pQR&%A");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("2[.}pQR&%A", qName1.getPrefix());
      assertEquals("2[.}pQR&%A", qName1.getName());
      assertEquals("2[.}pQR&%A:2[.}pQR&%A", qName1.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("2[.}pQR&%A", qName1.getPrefix());
      assertEquals("2[.}pQR&%A", qName1.getName());
      assertEquals("2[.}pQR&%A:2[.}pQR&%A", qName1.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2894, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2894, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2894, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Byte byte0 = new Byte((byte) (-92));
      assertEquals((byte) (-92), (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2378, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2378, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2378, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2378, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNull(jXPathContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      boolean boolean0 = evalContext0.hasNext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(boolean0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction(1834, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1834, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1834, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      boolean boolean0 = evalContext0.setPosition((-385));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(boolean0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals((-385), evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction((-385), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-385), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals((-385), evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-385), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(0.0, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      nameAttributeTest0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionCount(namespaceContext0);
      assertEquals(1.0, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("De1Xg8WJC8aHFv`");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3483), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3483), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1.0, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3483), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      assertNotNull(childContext0);
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionStringLength(attributeContext0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction1 = new CoreFunction(1560, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1560, coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction1.functionCount(childContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object1.equals((Object)object0));
      assertEquals(0.0, object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1560, coreFunction1.getFunctionCode());
      
      coreFunction1.args = expressionArray0;
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1560, coreFunction1.getFunctionCode());
      
      Object object2 = coreFunction1.functionLocalName(childContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object2);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1560, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      String string0 = coreOperationOr0.toString();
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(199, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(199, coreFunction0.getFunctionCode());
      
      CoreOperationOr coreOperationOr1 = (CoreOperationOr)coreFunction0.getArg1();
      assertSame(coreOperationOr1, coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(199, coreFunction0.getFunctionCode());
      assertEquals("or", coreOperationOr1.getSymbol());
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("\b");
      assertNotNull(qName0);
      assertEquals("\b", qName0.toString());
      assertEquals("\b", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("\b", qName0.toString());
      assertEquals("\b", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("\b", qName0.toString());
      assertEquals("\b", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd1);
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction(1629, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1629, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(",C");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg3();
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(expression0, constant0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(expression0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expression0, expressionArray1[4]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray1[5]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction1.functionConcat(predicateContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(",C,C,C,C,C,C,C", object0);
      assertEquals(7, expressionArray1.length);
      assertNotNull(object0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(',C', ',C', ',C', ',C', ',C', ',C', ',C')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("JI-,u^7k.\"p", "floor");
      assertNotNull(qName0);
      assertEquals("JI-,u^7k.\"p", qName0.getPrefix());
      assertEquals("JI-,u^7k.\"p:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("JI-,u^7k.\"p", qName0.getPrefix());
      assertEquals("JI-,u^7k.\"p:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("JI-,u^7k.\"p", qName0.getPrefix());
      assertEquals("JI-,u^7k.\"p:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      coreOperationMultiply0.args = expressionArray0;
      assertEquals("JI-,u^7k.\"p", qName0.getPrefix());
      assertEquals("JI-,u^7k.\"p:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("JI-,u^7k.\"p", qName0.getPrefix());
      assertEquals("JI-,u^7k.\"p:floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(953, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(953, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNull(jXPathContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("normalize-space", "normalize-space");
      assertNotNull(qName0);
      assertEquals("normalize-space:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertEquals("normalize-space:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, nullPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getConstantContext(locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Boolean boolean1 = (Boolean)coreFunction0.functionTrue(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      assertNotNull(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(612, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(612, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(604, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(604, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = (CoreOperationLessThanOrEqual)coreFunction0.getArg1();
      assertSame(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(604, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = (CoreOperationLessThanOrEqual)coreFunction0.getArg1();
      assertSame(coreOperationLessThanOrEqual2, coreOperationLessThanOrEqual0);
      assertSame(coreOperationLessThanOrEqual2, coreOperationLessThanOrEqual1);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual2);
      assertEquals(604, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual2.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual2;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals(604, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 <= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 <= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 <= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, -org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000004, $)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = (-399);
      CoreFunction coreFunction0 = new CoreFunction((-399), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-399), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-399), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-399), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-399), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-399), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.compute(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-399), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction1 = new CoreFunction(41, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(41, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short) (-2903));
      assertEquals((short) (-2903), (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-7), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-7()", string0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionFloor((EvalContext) null);
      assertEquals((-2903.0), object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(object2.equals((Object)string0));
      assertEquals("-2903", object2);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1560, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1560, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      Object object0 = coreFunction1.functionStringLength(nodeSetContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(1560, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      
      CoreFunction coreFunction2 = new CoreFunction(1560, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1560, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      ChildContext childContext0 = new ChildContext(attributeContext0, (NodeTest) null, false, false);
      assertNotNull(childContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction1.functionStringLength(attributeContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction2 = new CoreFunction((-3379), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals((-3379), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(rootContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(rootContext1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext1, true, (NodeTest) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(ancestorContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      RootContext rootContext2 = ancestorContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(rootContext2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      
      Double double0 = (Double)coreFunction0.functionCeiling(rootContext2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, expressionArray0.length);
      assertNotNull(double0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("sum", string0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, (Step[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      assertNotNull(nodeTypeTest0);
      assertEquals(6, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, nodeTypeTest0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(descendantContext0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(6, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      evalContextArray0[0] = (EvalContext) descendantContext0;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(8, expressionArray0.length);
      assertEquals(2, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(unionContext0, 24, nodeTypeTest0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertEquals(2, evalContextArray0.length);
      assertNull(evalContext0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(6, nodeTypeTest0.getNodeType());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      boolean boolean0 = unionContext0.nextSet();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean0);
      assertEquals(8, expressionArray0.length);
      assertEquals(2, evalContextArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(6, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(2, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertTrue(boolean0);
      assertEquals(0, expressionArray1.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("unknownFunction");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      QName qName0 = new QName("unknownFunction");
      assertNotNull(qName0);
      assertEquals("unknownFunction", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("unknownFunction", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      String string0 = coreOperationMod0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(303, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(303, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("format-number", string0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      String string0 = coreOperationEqual0.toString();
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      boolean boolean2 = coreOperationLessThanOrEqual0.computeContextDependent();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string1 = coreFunction0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(string1);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      boolean boolean3 = coreFunction0.computeContextDependent();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(2, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      assertNotNull(nodeTypeTest0);
      assertEquals(6, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("DI*,diXr 57)", "DI*,diXr 57)");
      assertNotNull(qName0);
      assertEquals("DI*,diXr 57)", qName0.getName());
      assertEquals("DI*,diXr 57)", qName0.getPrefix());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("DI*,diXr 57)", qName0.getName());
      assertEquals("DI*,diXr 57)", qName0.getPrefix());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", qName0.toString());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("DI*,diXr 57)", qName0.getName());
      assertEquals("DI*,diXr 57)", qName0.getPrefix());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", qName0.toString());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals("DI*,diXr 57)", qName0.getName());
      assertEquals("DI*,diXr 57)", qName0.getPrefix());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", qName0.toString());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      
      boolean boolean1 = nodeSetContext0.setPosition(7);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("DI*,diXr 57)", qName0.getName());
      assertEquals("DI*,diXr 57)", qName0.getPrefix());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", qName0.toString());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(7, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, nodeNameTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("DI*,diXr 57)", qName0.getName());
      assertEquals("DI*,diXr 57)", qName0.getPrefix());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", qName0.toString());
      assertEquals("DI*,diXr 57):DI*,diXr 57)", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(7, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(precedingOrFollowingContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("not", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction((-506), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-506), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[6];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], coreOperationGreaterThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("p@|$GD]8");
      assertNotNull(qName0);
      assertEquals("p@|$GD]8", qName0.toString());
      assertEquals("p@|$GD]8", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("p@|$GD]8", qName0.toString());
      assertEquals("p@|$GD]8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[3], variableReference0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("p@|$GD]8", qName0.toString());
      assertEquals("p@|$GD]8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("p@|$GD]8", qName0.toString());
      assertEquals("p@|$GD]8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      boolean boolean2 = coreOperationMultiply0.isContextDependent();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(6, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("p@|$GD]8", qName0.toString());
      assertEquals("p@|$GD]8", qName0.getName());
      assertNull(qName0.getPrefix());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(133, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(133, coreFunction0.getFunctionCode());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<EOF>");
      assertNotNull(nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("p@|$GD]8", nodeNameTest0.toString());
      assertEquals("<EOF>", nodeNameTest0.getNamespaceURI());
      assertEquals("p@|$GD]8", qName0.toString());
      assertEquals("p@|$GD]8", qName0.getName());
      assertNull(qName0.getPrefix());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("p@|$GD]8", nodeNameTest0.toString());
      assertEquals("<EOF>", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("p@|$GD]8", qName0.toString());
      assertEquals("p@|$GD]8", qName0.getName());
      assertNull(qName0.getPrefix());
      
      // Undeclared exception!
      coreFunction0.functionFloor(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1560, coreFunction1.getFunctionCode());
      
      NodeTest nodeTest0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      boolean boolean0 = false;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      Object object0 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      Object object1 = coreFunction0.functionPosition(precedingOrFollowingContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, object1);
      assertNotNull(object1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 1560;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1560, coreFunction1.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1560, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(29, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(29, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1560, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("sum", string0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1081);
      assertNotNull(nodeTypeTest0);
      assertEquals(1081, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(9, nodeTypeTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(1081, nodeTypeTest0.getNodeType());
      assertEquals(9, step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step1 = new Step(138, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(step1);
      assertEquals(1081, nodeTypeTest0.getNodeType());
      assertEquals(138, step1.getAxis());
      
      stepArray0[1] = step1;
      QName qName0 = new QName("sum", "sum");
      assertNotNull(qName0);
      assertEquals("sum", qName0.getName());
      assertEquals("sum:sum", qName0.toString());
      assertEquals("sum", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("sum", qName0.getName());
      assertEquals("sum:sum", qName0.toString());
      assertEquals("sum", qName0.getPrefix());
      assertEquals("sum:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step2 = new Step(9, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step2);
      assertEquals("sum", qName0.getName());
      assertEquals("sum:sum", qName0.toString());
      assertEquals("sum", qName0.getPrefix());
      assertEquals("sum:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(9, step2.getAxis());
      
      stepArray0[2] = step2;
      Expression[] expressionArray2 = new Expression[5];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) coreFunction0;
      expressionArray2[4] = (Expression) coreFunction0;
      Step step3 = new Step(93, nodeTypeTest0, expressionArray2);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(5, expressionArray2.length);
      assertNotNull(step3);
      assertEquals(93, step3.getAxis());
      assertEquals(1081, nodeTypeTest0.getNodeType());
      
      stepArray0[3] = step3;
      Step step4 = new Step(23, nodeTypeTest0, expressionArray1);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(step4);
      assertEquals(1081, nodeTypeTest0.getNodeType());
      assertEquals(23, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(138, nodeTypeTest0, expressionArray2);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(5, expressionArray2.length);
      assertNotNull(step5);
      assertEquals(1081, nodeTypeTest0.getNodeType());
      assertEquals(138, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-673), nodeTypeTest0, expressionArray2);
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(5, expressionArray2.length);
      assertNotNull(step6);
      assertEquals(1081, nodeTypeTest0.getNodeType());
      assertEquals((-673), step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step(138, nodeNameTest0, expressionArray2);
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(5, expressionArray2.length);
      assertNotNull(step7);
      assertEquals("sum", qName0.getName());
      assertEquals("sum:sum", qName0.toString());
      assertEquals("sum", qName0.getPrefix());
      assertEquals("sum:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(138, step7.getAxis());
      
      stepArray0[7] = step7;
      Expression[] expressionArray3 = new Expression[6];
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      
      expressionArray3[0] = (Expression) coreFunction0;
      expressionArray3[1] = (Expression) coreFunction0;
      expressionArray3[2] = (Expression) coreFunction0;
      expressionArray3[3] = (Expression) coreFunction0;
      expressionArray3[4] = (Expression) coreFunction0;
      expressionArray3[5] = (Expression) coreFunction0;
      Step step8 = new Step((-673), nodeNameTest0, expressionArray3);
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step6));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertEquals(6, expressionArray3.length);
      assertNotNull(step8);
      assertEquals((-673), step8.getAxis());
      assertEquals("sum", qName0.getName());
      assertEquals("sum:sum", qName0.toString());
      assertEquals("sum", qName0.getPrefix());
      assertEquals("sum:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 138, nodeTypeTest0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray0, expressionArray2);
      assertNotSame(expressionArray0, expressionArray3);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNull(evalContext1);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1081, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      nameAttributeTest0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction((-38), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-38), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      int int0 = 2;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName0 = new QName("\"translate\"");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("\"translate\"", qName0.toString());
      assertEquals("\"translate\"", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("\"translate\"", qName0.toString());
      assertEquals("\"translate\"", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"translate\"", nodeNameTest0.toString());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertNull(qName0.getPrefix());
      assertEquals("\"translate\"", qName0.toString());
      assertEquals("\"translate\"", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\"translate\"", nodeNameTest0.toString());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("The comment \"", "The comment \"");
      assertNotNull(qName0);
      assertEquals("The comment \"", qName0.getName());
      assertEquals("The comment \"", qName0.getPrefix());
      assertEquals("The comment \":The comment \"", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("The comment \"", qName0.getName());
      assertEquals("The comment \"", qName0.getPrefix());
      assertEquals("The comment \":The comment \"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("The comment \"", qName0.getName());
      assertEquals("The comment \"", qName0.getPrefix());
      assertEquals("The comment \":The comment \"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-328), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-328), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("R8Z9CO,|N|++W");
      assertNotNull(qName0);
      assertEquals("R8Z9CO,|N|++W", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("R8Z9CO,|N|++W", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("R8Z9CO,|N|++W", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("R8Z9CO,|N|++W", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      int int0 = 3;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[5] = (Expression) coreFunction0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("sum", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("R8ZF9CO,+sW");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1492, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1492, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1492, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1492, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      int int0 = (-21);
      CoreFunction coreFunction0 = new CoreFunction((-21), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-21), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(16384, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(16384, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("$lHf(UWh*C*LNua#");
      assertNotNull(processingInstructionTest0);
      assertEquals("$lHf(UWh*C*LNua#", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("$lHf(UWh*C*LNua#", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("$lHf(UWh*C*LNua#", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 24;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("last", "GyY'lQH}qj");
      assertNotNull(qName0);
      assertEquals("GyY'lQH}qj", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:GyY'lQH}qj", qName0.toString());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertEquals("GyY'lQH}qj", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:GyY'lQH}qj", qName0.toString());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals("GyY'lQH}qj", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:GyY'lQH}qj", qName0.toString());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext0);
      assertEquals("GyY'lQH}qj", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertEquals("last:GyY'lQH}qj", qName0.toString());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-750), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-750), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant(",C");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(',C', null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      EvalContext evalContext0 = null;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Byte byte0 = new Byte((byte) (-68));
      assertEquals((byte) (-68), (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMultiply1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(nameAttributeTest0, coreOperationMultiply1);
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply1));
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(nameAttributeTest1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      
      expressionArray0[3] = (Expression) nameAttributeTest1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("R8ZFCO,>+W");
      assertNotNull(qName0);
      assertEquals("R8ZFCO,>+W", qName0.getName());
      assertEquals("R8ZFCO,>+W", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("R8ZFCO,>+W", qName0.getName());
      assertEquals("R8ZFCO,>+W", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("R8ZFCO,>+W", qName0.getName());
      assertEquals("R8ZFCO,>+W", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("R8ZFCO,>+W", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("R8ZFCO,>+W", qName0.getName());
      assertEquals("R8ZFCO,>+W", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("R8ZFCO,>+W", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.compute(selfContext0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,++W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2517, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1118), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1118), coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(1, expressionArray0.length);
      assertNull(expression0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1118), coreFunction0.getFunctionCode());
      
      expressionArray0[0] = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expression0, coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1118), coreFunction0.getFunctionCode());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1118), coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreFunction0, expression0);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1118), coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(1471, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1471, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(18, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(18, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      String string0 = ",C";
      Constant constant0 = new Constant(",C");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("sum", "sum");
      assertNotNull(qName0);
      assertEquals("sum", qName0.getPrefix());
      assertEquals("sum:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("sum", qName0.getPrefix());
      assertEquals("sum:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("sum", qName0.getPrefix());
      assertEquals("sum:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, parentContext0, nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string0 = (String)coreFunction0.compute(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("root", string0);
      assertNotNull(string0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = 7;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      
      expressionArray0[5] = (Expression) coreFunction1;
      expressionArray0[6] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(16, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1560, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1560, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, false);
      assertNotNull(childContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction1.functionStringLength(attributeContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(1560, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction2 = new CoreFunction(1560, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(1560, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      Object object1 = coreFunction2.functionName(attributeContext0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals("", object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(1560, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      Object object2 = coreFunction2.functionLocalName(childContext0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals("", object2);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1560, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("Gt");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("F&kUr,MCsW=>E7e");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("F&kUr,MCsW=>E7e");
      assertNotNull(processingInstructionTest0);
      assertEquals("F&kUr,MCsW=>E7e", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(2739, processingInstructionTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("F&kUr,MCsW=>E7e", processingInstructionTest0.getTarget());
      assertEquals(2739, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2739, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("F&kUr,MCsW=>E7e", processingInstructionTest0.getTarget());
      assertEquals(2739, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("F&kUr,MCsW=>E7e", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      ChildContext childContext0 = new ChildContext(namespaceContext0, processingInstructionTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals("F&kUr,MCsW=>E7e", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertNotNull(coreOperationNegate0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(304, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(304, step0.getAxis());
      
      Step step1 = new Step((-528), processingInstructionTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-528), step1.getAxis());
      
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Step step2 = new Step(11, processingInstructionTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(11, step2.getAxis());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("", processingInstructionTest1.getTarget());
      
      Step step3 = new Step((-2394), processingInstructionTest0, (Expression[]) null);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2394), step3.getAxis());
      
      CoreFunction coreFunction1 = new CoreFunction((-500), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-500), coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest1);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(ancestorContext0);
      assertEquals("", processingInstructionTest1.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Constant constant0 = new Constant("96vpYT%#??~");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("local-namelocal-name", "");
      assertNotNull(qName0);
      assertEquals("local-namelocal-name", qName0.getPrefix());
      assertEquals("local-namelocal-name:", qName0.toString());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("local-namelocal-name", qName0.getPrefix());
      assertEquals("local-namelocal-name:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("local-namelocal-name:", nodeNameTest0.toString());
      
      Step step0 = new Step((-1), nodeNameTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("local-namelocal-name", qName0.getPrefix());
      assertEquals("local-namelocal-name:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("local-namelocal-name:", nodeNameTest0.toString());
      assertEquals((-1), step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1149), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1149), coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg1();
      assertSame(expression0, expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(expression0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1149), coreFunction0.getFunctionCode());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expression0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1149), coreFunction0.getFunctionCode());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-1), coreFunction1.getFunctionCode());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("local-namelocal-name", qName0.getPrefix());
      assertEquals("local-namelocal-name:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("local-namelocal-name:", nodeNameTest0.toString());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction1.functionSum(selfContext0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(304, processingInstructionTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(304, step0.getAxis());
      
      Step step1 = new Step((-396), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-396), step1.getAxis());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      Step step2 = new Step(7, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step2);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(7, step2.getAxis());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("", processingInstructionTest1.getTarget());
      
      Step step3 = new Step(1709, processingInstructionTest0, expressionArray0);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step3);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1709, step3.getAxis());
      
      int int0 = 23;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName((String) null, "4H");
      assertNotNull(qName0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationEqual0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, coreOperationEqual0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationNotEqual0);
      assertNotNull(coreOperationDivide0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, variableReference0);
      assertNotNull(nameAttributeTest0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, coreOperationEqual0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(variableReference0, nameAttributeTest0);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertNotNull(coreOperationDivide1);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreOperationDivide coreOperationDivide2 = new CoreOperationDivide(coreOperationDivide0, coreOperationDivide1);
      assertFalse(coreOperationDivide2.equals((Object)coreOperationDivide1));
      assertFalse(coreOperationDivide2.equals((Object)coreOperationDivide0));
      assertFalse(coreOperationDivide0.equals((Object)coreOperationDivide1));
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertNotNull(coreOperationDivide2);
      assertEquals("div", coreOperationDivide2.getSymbol());
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationDivide2;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, expressionArray0[4]);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("4H", qName0.toString());
      assertEquals("4H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(8, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1139), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1139), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(",C");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1417), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals((-1417), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(boolean0);
      assertEquals(1, expressionArray1.length);
      assertEquals((-1417), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, expressionArray1.length);
      assertEquals((-1417), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, (Expression) null);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, expressionArray0[1]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[2], coreOperationNotEqual0);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual1);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[1]);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(22, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(1, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(",C");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(',C', null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Constant constant0 = new Constant("R8ZF9CO,+#W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[5];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationAdd0;
      expressionArray0[2] = (Expression) coreOperationAdd0;
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(4, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertNotNull(coreOperationNegate0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(304, processingInstructionTest0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(304, step0.getAxis());
      
      Step step1 = new Step(304, processingInstructionTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(304, step1.getAxis());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      Step step2 = new Step((-1459), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(step2);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1459), step2.getAxis());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("", processingInstructionTest1.getTarget());
      
      Step step3 = new Step(11, processingInstructionTest1, (Expression[]) null);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals("", processingInstructionTest1.getTarget());
      assertEquals(11, step3.getAxis());
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(311, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(311, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertNull(object0);
      assertEquals(311, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("CF;l,fjbc`", (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertEquals("CF;l,fjbc`", qName0.getPrefix());
      assertEquals("CF;l,fjbc`:null", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getName());
      assertEquals("CF;l,fjbc`", qName0.getPrefix());
      assertEquals("CF;l,fjbc`:null", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(126, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(126, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Constant constant0 = new Constant("R8F9CO,+W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      nameAttributeTest0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(980, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(980, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      CoreFunction coreFunction1 = new CoreFunction(21856246, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(21856246, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, expressionArray0.length);
      assertNotNull(initialContext0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string0 = (String)coreFunction0.functionName(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("root", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("Dvz#Ny5ZWc$M\"E$", "Dvz#Ny5ZWc$M\"E$");
      assertNotNull(qName0);
      assertEquals("Dvz#Ny5ZWc$M\"E$:Dvz#Ny5ZWc$M\"E$", qName0.toString());
      assertEquals("Dvz#Ny5ZWc$M\"E$", qName0.getPrefix());
      assertEquals("Dvz#Ny5ZWc$M\"E$", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("Dvz#Ny5ZWc$M\"E$:Dvz#Ny5ZWc$M\"E$", qName0.toString());
      assertEquals("Dvz#Ny5ZWc$M\"E$", qName0.getPrefix());
      assertEquals("Dvz#Ny5ZWc$M\"E$", qName0.getName());
      assertEquals("Dvz#Ny5ZWc$M\"E$:Dvz#Ny5ZWc$M\"E$", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(22, nodeNameTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("Dvz#Ny5ZWc$M\"E$:Dvz#Ny5ZWc$M\"E$", qName0.toString());
      assertEquals("Dvz#Ny5ZWc$M\"E$", qName0.getPrefix());
      assertEquals("Dvz#Ny5ZWc$M\"E$", qName0.getName());
      assertEquals("Dvz#Ny5ZWc$M\"E$:Dvz#Ny5ZWc$M\"E$", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(22, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(49, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(49, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationAdd0;
      expressionArray0[2] = (Expression) coreOperationAdd0;
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(47, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "AuJVpIRdEzzw");
      assertNotNull(qName0);
      assertEquals(":AuJVpIRdEzzw", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("AuJVpIRdEzzw", qName0.getName());
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant(" ");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      nameAttributeTest0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1576), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1576), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(976, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(976, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 10;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction1.compute(attributeContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      Object object1 = coreFunction1.functionStringLength(descendantContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object1);
      assertNotNull(object1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("sum", string0);
      assertNotNull(string0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("", "name");
      assertNotNull(qName0);
      assertEquals("name", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":name", qName0.toString());
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(41, coreFunction1.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(4, expressionArray0.length);
      assertNull(expression0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction1, coreFunction1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(41, coreFunction1.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(41, coreFunction1.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = null;
      Expression expression1 = coreFunction1.getArg2();
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNull(expression1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(41, coreFunction1.getFunctionCode());
      
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) coreFunction1;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray1);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction2);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(3, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction((-826), expressionArray1);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction3);
      assertEquals(7, coreFunction3.getArgumentCount());
      assertEquals((-826), coreFunction3.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1518));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1518), nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals((-1518), nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction2.compute(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(unknownFunction41()(null, null, null, null), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 > org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002, null, null, unknownFunction41()(null, null, null, null), format-number(null, null, null, null), unknownFunction41()(null, null, null, null))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[1], coreOperationUnion0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[8] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("string-length", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(4, expressionArray0.length);
      assertNull(expression0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(1494, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1494, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("", "AuJVpIRdEzzw");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("AuJVpIRdEzzw", qName0.getName());
      assertEquals(":AuJVpIRdEzzw", qName0.toString());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(4, coreFunction2.getArgumentCount());
      
      Expression expression0 = coreFunction2.getArg1();
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNull(expression0);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(4, coreFunction2.getArgumentCount());
      
      expressionArray1[3] = null;
      CoreFunction coreFunction3 = new CoreFunction(1494, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(4, expressionArray1.length);
      assertNotNull(coreFunction3);
      assertEquals(1494, coreFunction3.getFunctionCode());
      assertEquals(4, coreFunction3.getArgumentCount());
      
      CoreFunction coreFunction4 = new CoreFunction(25, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertEquals(4, expressionArray1.length);
      assertNotNull(coreFunction4);
      assertEquals(25, coreFunction4.getFunctionCode());
      assertEquals(4, coreFunction4.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      assertNotNull(nodeTypeTest0);
      assertEquals(30, nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(30, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction4.compute(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(unknownFunction1494()(null, null, null, null), format-number(null, null, null, null), unknownFunction1494()(null, null, null, null), null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      int int0 = 1494;
      CoreFunction coreFunction0 = new CoreFunction(1494, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1494, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "AuJVpIRdEzzw");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("AuJVpIRdEzzw", qName0.getName());
      assertEquals(":AuJVpIRdEzzw", qName0.toString());
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      int int1 = 19;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-653));
      assertNotNull(nodeTypeTest0);
      assertEquals((-653), nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals((-653), nodeTypeTest0.getNodeType());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(1494, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(1494, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "AuJVpIRdEzzw");
      assertNotNull(qName0);
      assertEquals(":AuJVpIRdEzzw", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("AuJVpIRdEzzw", qName0.getName());
      
      int int0 = 30;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      assertNotNull(nodeTypeTest0);
      assertEquals(19, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(19, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("", "AuJVpIRdEzzw");
      assertNotNull(qName0);
      assertEquals(":AuJVpIRdEzzw", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("AuJVpIRdEzzw", qName0.getName());
      
      int int0 = 4;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(4, coreFunction1.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(47);
      assertNotNull(nodeTypeTest0);
      assertEquals(47, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(47, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertNotNull(iterator0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = null;
      try {
        jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ''
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("round", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(3667, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(3667, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int int0 = 8;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, coreOperationMod0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("string", string0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionString(nodeSetContext0);
      assertEquals("", object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(19, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(1513, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1513, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1513, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, int0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1513, coreFunction0.getFunctionCode());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int1 = coreFunction0.getArgumentCount();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1513, coreFunction0.getFunctionCode());
      
      int int2 = coreFunction0.getArgumentCount();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1513, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction1513()(+org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)");
      assertNotNull(processingInstructionTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      
      // Undeclared exception!
      try { 
        precedingOrFollowingContext0.getValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("DA<VSvD3R'W");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("", "DA<VSvD3R'W");
      assertNotNull(qName0);
      assertEquals("DA<VSvD3R'W", qName0.getName());
      assertEquals(":DA<VSvD3R'W", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("DA<VSvD3R'W", qName0.getName());
      assertEquals(":DA<VSvD3R'W", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-4154), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-4154), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(108, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(108, coreFunction1.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("unknownFunction108()", string0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNull(object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(108, coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction1.functionRound((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(108, coreFunction1.getFunctionCode());
      
      int int0 = (-317);
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(48, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(48, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(1, expressionArray0.length);
      assertNull(expression0);
      assertEquals(48, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(48, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(48, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(74, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = (-40);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-40), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-40), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-40), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-40), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1459), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertNotNull(coreOperationNegate0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-1459), processingInstructionTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1459), step0.getAxis());
      
      Step step1 = new Step((-1459), processingInstructionTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1459), step1.getAxis());
      
      Step step2 = new Step(4897, processingInstructionTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(4897, step2.getAxis());
      
      boolean boolean0 = coreOperationMultiply0.isContextDependent();
      assertFalse(boolean0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Step step3 = new Step(2391, processingInstructionTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(2391, step3.getAxis());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      
      int int0 = coreFunction1.getFunctionCode();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, int0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(unknownFunction-1459()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-14), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-14), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = "B^n1l[5<VbY8o";
      QName qName0 = new QName("B^n1l[5<VbY8o");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("B^n1l[5<VbY8o", qName0.toString());
      assertEquals("B^n1l[5<VbY8o", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("B^n1l[5<VbY8o", qName0.toString());
      assertEquals("B^n1l[5<VbY8o", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("B^n1l[5<VbY8o", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertNull(qName0.getPrefix());
      assertEquals("B^n1l[5<VbY8o", qName0.toString());
      assertEquals("B^n1l[5<VbY8o", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("B^n1l[5<VbY8o", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(namespaceContext0);
      assertNull(qName0.getPrefix());
      assertEquals("B^n1l[5<VbY8o", qName0.toString());
      assertEquals("B^n1l[5<VbY8o", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("B^n1l[5<VbY8o", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      int int0 = 10;
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertEquals("starts-with()", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      int int1 = coreFunction0.getArgumentCount();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(5, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      int int2 = unionContext0.getCurrentPosition();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(5, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)17;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)9, (byte)17}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("position", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, false);
      assertNotNull(childContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      CoreFunction coreFunction1 = new CoreFunction(109, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(109, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(4, coreFunction2.getArgumentCount());
      assertEquals(14, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionStringLength(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(5316, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5316, coreFunction0.getFunctionCode());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5316, coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction2 = new CoreFunction((-40), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-40), coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      String string0 = coreOperationAdd0.toString();
      assertNotSame(coreOperationAdd0, coreOperationAdd1);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(3667, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(3667, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction((-3596), expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-3596), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3596()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 24;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("sum", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      int int0 = 1560;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1560, coreFunction1.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      assertNotNull(childContext0);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionNumber(attributeContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(Double.NaN, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1560()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2517, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], (Expression) null);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("local-namelocal-name");
      assertNotNull(qName0);
      assertEquals("local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      String string0 = coreOperationLessThanOrEqual0.toString();
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals("local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      coreOperationLessThanOrEqual0.args = expressionArray0;
      assertEquals("local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("local-namelocal-name", qName0.toString());
      assertEquals("local-namelocal-name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(47, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals("0", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("LlK(Ge-It/");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[3] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("%&dZ: |H");
      assertNotNull(qName0);
      assertEquals("%&dZ: |H", qName0.toString());
      assertEquals(" |H", qName0.getName());
      assertEquals("%&dZ", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("%&dZ: |H", qName0.toString());
      assertEquals(" |H", qName0.getName());
      assertEquals("%&dZ", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[5] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(78, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(78, coreFunction0.getFunctionCode());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("=/^|Dm`k&");
      assertNotNull(processingInstructionTest0);
      assertEquals("=/^|Dm`k&", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext(unionContext0, true, processingInstructionTest0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertNotNull(ancestorContext0);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("=/^|Dm`k&", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      SelfContext selfContext0 = new SelfContext(ancestorContext0, processingInstructionTest0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertNotNull(selfContext0);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("=/^|Dm`k&", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      Object object0 = coreFunction0.computeValue(selfContext0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertNull(object0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(78, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("=/^|Dm`k&", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1459), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertNotNull(coreOperationNegate0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(11, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(11, step0.getAxis());
      
      Step step1 = new Step((-3723), processingInstructionTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-3723), step1.getAxis());
      
      Step step2 = new Step(4897, processingInstructionTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(4897, step2.getAxis());
      
      Step step3 = new Step(2391, processingInstructionTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(2391, step3.getAxis());
      
      Step step4 = new Step(13, processingInstructionTest0, (Expression[]) null);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(13, step4.getAxis());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3723), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-3723), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionString((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-3723), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-2323), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-2323), coreFunction0.getFunctionCode());
      
      int int0 = new Integer((-2323));
      assertEquals((-2323), int0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2323), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-2323), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      Expression expression0 = coreFunction1.getArg3();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNull(expression0);
      assertEquals((-2323), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction((-43), expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-43), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(50, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], (Expression) null);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(129, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(129, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("", "?RCH/q`(");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":?RCH/q`(", qName0.toString());
      assertEquals("?RCH/q`(", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":?RCH/q`(", qName0.toString());
      assertEquals("?RCH/q`(", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":?RCH/q`(", nodeNameTest0.toString());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":?RCH/q`(", qName0.toString());
      assertEquals("?RCH/q`(", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":?RCH/q`(", nodeNameTest0.toString());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      assertNotNull(childContext0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":?RCH/q`(", qName0.toString());
      assertEquals("?RCH/q`(", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":?RCH/q`(", nodeNameTest0.toString());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short) (-2903));
      assertEquals((short) (-2903), (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-7), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-7()", string0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertNull(object0);
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionNumber((EvalContext) null);
      assertEquals((short) (-2903), object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(object2.equals((Object)string0));
      assertEquals("-2903", object2);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object2);
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(31, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(31, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(31, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(50, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(50, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1560, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      assertNotNull(childContext0);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(109, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(109, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      Object object0 = coreFunction2.functionStringLength(attributeContext0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0.0, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(109, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      Object object1 = coreFunction2.functionSum(childContext0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(object1.equals((Object)object0));
      assertEquals(0.0, object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(109, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      Object object2 = coreFunction2.functionNot(childContext0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(object2.equals((Object)boolean0));
      assertEquals(true, object2);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object2);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(109, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      Object object3 = coreFunction2.functionNormalizeSpace(attributeContext0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals("", object3);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object3);
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(109, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-862), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-862), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertEquals(3, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      EvalContext evalContext0 = null;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, (Expression) null);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, (Expression) null);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      QName qName0 = new QName(";x");
      assertNotNull(qName0);
      assertEquals(";x", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(";x", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2224), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2224), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2224()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(86, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(86, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction86()()", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(86, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction86()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertNotNull(coreOperationNotEqual1);
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationNotEqual coreOperationNotEqual2 = new CoreOperationNotEqual((Expression) null, nameAttributeTest0);
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual1));
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationNotEqual2);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("!=", coreOperationNotEqual2.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual2;
      CoreFunction coreFunction0 = new CoreFunction(308, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(308, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = 1;
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2945), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-2945), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      CoreOperationNotEqual coreOperationNotEqual1 = (CoreOperationNotEqual)coreFunction0.getArg1();
      assertSame(coreOperationNotEqual1, coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNotEqual1);
      assertEquals((-2945), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual2 = new CoreOperationNotEqual(expressionArray0[1], coreOperationNotEqual0);
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual1));
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNotEqual2);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual2.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual2;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationAdd1, coreOperationNotEqual2);
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationNotEqual0.equals((Object)coreOperationNotEqual2));
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual1));
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual0));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual2.getSymbol());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd0));
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAdd2);
      assertEquals("+", coreOperationAdd2.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd2;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2143, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2143, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      QName qName0 = new QName("m7u+@/mQT16}E!hJ)M", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("m7u+@/mQT16}E!hJ)M", qName0.getPrefix());
      assertEquals("m7u+@/mQT16}E!hJ)M:", qName0.toString());
      
      QName qName1 = new QName("");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variableReference0);
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, coreOperationLessThan0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      expressionArray1[3] = (Expression) expressionPath0;
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      expressionArray1[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null[null][null][null][null], org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004, org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000001 - (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000009), null[null][null][null][null], org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000001 < org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000001, org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertEquals("floor()", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1459), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertNotNull(coreOperationNegate0);
      assertEquals((-1459), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      int int0 = 11;
      Step step0 = new Step(11, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(11, step0.getAxis());
      
      Step step1 = new Step((-3723), processingInstructionTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-3723), step1.getAxis());
      
      Step step2 = new Step(4897, processingInstructionTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(4897, step2.getAxis());
      
      Step step3 = new Step(2391, processingInstructionTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(2391, step3.getAxis());
      
      Step step4 = new Step(13, processingInstructionTest0, (Expression[]) null);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(13, step4.getAxis());
      
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-2312), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-2312), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction28()()", string0);
      assertNotNull(string0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(28, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionFalse(ancestorContext0);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      Object object1 = coreFunction0.functionStringLength(ancestorContext0);
      assertEquals(0.0, object1);
      assertNotNull(object1);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-40), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-40), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-432), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-432), coreFunction1.getFunctionCode());
      
      String string0 = coreFunction1.toString();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("unknownFunction-432()()", string0);
      assertNotNull(string0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-432), coreFunction1.getFunctionCode());
      
      Constant constant0 = new Constant("BeanInfo [class = ");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = coreFunction1.getFunctionCode();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals((-432), int0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-432), coreFunction1.getFunctionCode());
      
      QName qName0 = new QName("unknownFunction-432()()", (String) null);
      assertNotNull(qName0);
      assertEquals("unknownFunction-432()()", qName0.getPrefix());
      assertEquals("unknownFunction-432()():null", qName0.toString());
      assertNull(qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("unknownFunction-432()()", qName0.getPrefix());
      assertEquals("unknownFunction-432()():null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction-432()():null", nodeNameTest0.toString());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("unknownFunction-432()()", qName0.getPrefix());
      assertEquals("unknownFunction-432()():null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction-432()():null", nodeNameTest0.toString());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionTrue(parentContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-40), coreFunction0.getFunctionCode());
      assertEquals("unknownFunction-432()()", qName0.getPrefix());
      assertEquals("unknownFunction-432()():null", qName0.toString());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("unknownFunction-432()():null", nodeNameTest0.toString());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      String string1 = coreFunction0.getFunctionName();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("unknownFunction-40()", string1);
      assertNotNull(string1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-40), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)10}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSum((EvalContext) null);
      assertEquals(0.0, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      int int0 = 11;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("contains", string0);
      assertNotNull(string0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      CoreFunction coreFunction0 = new CoreFunction(3278, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3278, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-614), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-614), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-614()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1560, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1560, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1560()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNull((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertNull(object0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionNull((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertNull(object1);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Object object2 = coreFunction1.functionNull((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNull(object2);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(226, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-174), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-174), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(226, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-174()('', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      EvalContext evalContext0 = null;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      QName qName0 = new QName(";x");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals(";x", qName0.toString());
      assertEquals(";x", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[14];
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      assertEquals(14, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(14, coreFunction0.getArgumentCount());
      assertEquals(50, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction50()(null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionFalse((EvalContext) null);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant(",C");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(',C', null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-718), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-718), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals("ceiling(null, null, null, null)", string0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      Constant constant0 = new Constant("ceiling(null, null, null, null)");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(26, int0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("namespace-uri", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1560, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1560, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      assertNotNull(childContext0);
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction2 = new CoreFunction(30, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(30, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1560()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, (Expression) null);
      assertNotNull(coreOperationEqual0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(",C");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(',C', ',C', ',C', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 + org.apache.commons.jxpath.ri.compiler.Constant@0000000001 + org.apache.commons.jxpath.ri.compiler.Constant@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000002 + org.apache.commons.jxpath.ri.compiler.Constant@0000000001 + org.apache.commons.jxpath.ri.compiler.Constant@0000000001 + org.apache.commons.jxpath.ri.compiler.Constant@0000000001 + org.apache.commons.jxpath.ri.compiler.Constant@0000000001, ',C', ',C', ',C', ',C')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("substring-after", string0);
      assertNotNull(string0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(31, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(31, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction31()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-666), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-666), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-666()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(1302, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1302, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      QName qName0 = new QName(";x");
      assertNotNull(qName0);
      assertEquals(";x", qName0.toString());
      assertEquals(";x", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-85);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)114, (byte)13, (byte)29, (byte)43, (byte)16, (byte) (-85)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationAnd0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      QName qName0 = new QName("/:]U^)SQ^Y_/^C^K,", (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertEquals("/:]U^)SQ^Y_/^C^K,:null", qName0.toString());
      assertEquals("/:]U^)SQ^Y_/^C^K,", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getName());
      assertEquals("/:]U^)SQ^Y_/^C^K,:null", qName0.toString());
      assertEquals("/:]U^)SQ^Y_/^C^K,", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("/:]U^)SQ^Y_/^C^K,:null", nodeNameTest0.toString());
      
      CoreFunction coreFunction0 = new CoreFunction(2023, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(2023, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(4, expressionArray0.length);
      assertNull(expression0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(2023, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(2023, int0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(2023, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, expressionPath0);
      QName qName0 = new QName("", "?RCH/q`(");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, (Expression) null);
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, (Expression) null);
      QName qName0 = new QName(";x");
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, variableReference0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationNegate0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd1, variableReference0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, coreOperationDivide0);
      CoreFunction coreFunction0 = new CoreFunction(16809983, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(16809983, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreFunction coreFunction0 = new CoreFunction(1610612736, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-344), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, coreOperationUnion0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationAnd0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationOr0;
      QName qName0 = new QName("round");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("ceiling()", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      int int0 = 1612;
      CoreFunction coreFunction0 = new CoreFunction(1612, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-40), (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-1511), (Expression[]) null);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      expressionArray0[3] = (Expression) coreFunction1;
      expressionArray0[4] = (Expression) coreFunction1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationAdd0);
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd((Expression[]) null);
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, expressionArray0[2]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationNegate0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction1, expressionArray0[4]);
      CoreFunction coreFunction2 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(unknownFunction-40()(), unknownFunction-40()(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002 + org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002, unknownFunction-1511()(), unknownFunction-1511()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(true, object0);
      
      coreFunction0.functionNull((EvalContext) null);
      assertEquals(20, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      int int0 = 20;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2175, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2175()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("S5G-joH.X", "2GZd?wpo16#V eMk");
      QName qName1 = new QName("S5G-joH.X");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext");
      attributeContext0.toString();
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeNameTest1, false, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-14), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-15), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-15()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(511, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction511()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("local-name", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(",C");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("C-${h:rSNsVj 7C&", "C-${h:rSNsVj 7C&");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[0]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(',C', $C-${h:rSNsVj 7C&:C-${h:rSNsVj 7C&, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      QName qName0 = new QName("", "/:]U^)SQ^Y_/^C^K,");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeNameTest0, false, false);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("format-number()", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      int int0 = 47;
      Expression[] expressionArray0 = null;
      Expression[] expressionArray1 = new Expression[1];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray1[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-2430), expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-1196), expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      QName qName0 = new QName("", "AuJVpIRdEzzw");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("B!s");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      CoreFunction coreFunction1 = new CoreFunction(47, expressionArray0);
      coreFunction1.functionNull((EvalContext) null);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction47()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(",C");
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName("boolean", "n");
      QName qName1 = new QName("n");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "]x\"TMa(e");
      attributeContext0.toString();
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest1, true, false);
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-314), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationNegate0);
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationGreaterThan0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/>]");
      Step step0 = new Step(64, processingInstructionTest0, expressionArray0);
      Step step1 = new Step((-713), processingInstructionTest0, expressionArray0);
      Step step2 = new Step((-713), processingInstructionTest0, expressionArray0);
      Step step3 = new Step(0, processingInstructionTest0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply2 = new CoreOperationMultiply(coreOperationMultiply0, coreOperationMultiply0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply2, coreOperationMultiply1);
      CoreFunction coreFunction1 = new CoreFunction(56, (Expression[]) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(892, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      assertEquals(892, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("string-length");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(48, expressionArray0);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals(48, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction((-1459), (Expression[]) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(11, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step((-3723), processingInstructionTest0, (Expression[]) null);
      Step step2 = new Step(4897, processingInstructionTest0, (Expression[]) null);
      Step step3 = new Step(2391, processingInstructionTest0, (Expression[]) null);
      Step step4 = new Step(13, processingInstructionTest0, (Expression[]) null);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, (Expression) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction1.functionNamespaceURI((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1459()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(711, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1452), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-666), expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, coreOperationOr0);
      QName qName0 = new QName("m7u+@/mQT16}E!hJ)M", "m7u+@/mQT16}E!hJ)M");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, variableReference0);
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("F");
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("F");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationAnd1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], coreOperationOr0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationLessThan0);
      expressionArray0[8] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(16809983, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-14), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-14()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("lang()", string0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.args = expressionArray0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      QName qName0 = new QName("S5G-joH.X", "2GZd?wpo16#V eMk");
      QName qName1 = new QName("S5G-joH.X");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext");
      attributeContext0.toString();
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeNameTest1, false, true);
      CoreFunction coreFunction1 = new CoreFunction((-713), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2894, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-14), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-3723), processingInstructionTest0, expressionArray0);
      Step step1 = new Step(14, processingInstructionTest0, expressionArray0);
      Step step2 = new Step((-3723), processingInstructionTest0, expressionArray0);
      Step step3 = new Step((-1620), processingInstructionTest0, expressionArray0);
      Step step4 = new Step(0, processingInstructionTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationMultiply0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2740), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/>]");
      Step step0 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(3, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("count(null)", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(2517, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("T9bdP$&N+b]<\"f");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "T9bdP$&N+b]<\"f");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T9bdP$&N+b]<\"f");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(242);
      nodeTypeTest0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction((-1509), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1509()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1560, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(1560, (Expression[]) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, false);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(1560, expressionArray0);
      coreFunction2.functionStringLength(attributeContext0);
      CoreFunction coreFunction3 = new CoreFunction(1560, expressionArray0);
      coreFunction2.functionLocalName(childContext0);
      assertEquals(1560, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1964, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      QName qName0 = new QName("", "/:]U^)SQ^Y_/^C^K,");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeNameTest0, false, false);
      CoreFunction coreFunction0 = new CoreFunction((-713), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-713()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(121, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction121()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.args = expressionArray0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(31, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction31()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Constant constant1 = new Constant(double0);
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction0.getFunctionCode();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray0[0]);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.AttributeContext", "org.apache.commons.jxpath.ri.axes.AttributeContext");
      Locale locale0 = Locale.CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[1], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[2], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, processingInstructionTest0);
      attributeContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2147483648()(0, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(883, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction883()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-40), (Expression[]) null);
      QName qName0 = new QName("T9bdP$&N+b]<\"f");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "T9bdP$&N+b]<\"f");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T9bdP$&N+b]<\"f");
      UnionContext unionContext0 = new UnionContext(namespaceContext0, (EvalContext[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, basicNodeSet0);
      NodeSetContext nodeSetContext1 = new NodeSetContext(unionContext0, basicNodeSet0);
      CoreFunction coreFunction1 = new CoreFunction((-1239), (Expression[]) null);
      coreFunction1.functionStringLength(namespaceContext0);
      CoreFunction coreFunction2 = new CoreFunction(4978, (Expression[]) null);
      coreFunction0.functionNull(nodeSetContext0);
      coreFunction0.getArgumentCount();
      assertEquals((-40), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(98, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("string");
      Expression[] expressionArray1 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, expressionArray1[0]);
      expressionArray1[2] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray1[0]);
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationAdd1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[5] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant("string");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd2;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd1, nameAttributeTest0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2846));
      Step step0 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-2846), nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) nameAttributeTest0;
      Step step3 = new Step((-2846), nodeTypeTest0, expressionArray2);
      stepArray0[3] = step3;
      Expression[] expressionArray3 = new Expression[2];
      expressionArray3[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray3[1] = (Expression) coreOperationAdd1;
      Step step4 = new Step((-2846), nodeTypeTest0, expressionArray3);
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.ExpressionPath");
      Step step5 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("!}");
      Expression[] expressionArray4 = new Expression[8];
      expressionArray4[0] = (Expression) extensionFunction0;
      expressionArray4[1] = (Expression) coreFunction0;
      expressionArray4[2] = (Expression) extensionFunction0;
      expressionArray4[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray4[4] = (Expression) coreOperationLessThan0;
      expressionArray4[5] = (Expression) coreOperationAdd1;
      expressionArray4[6] = (Expression) coreOperationLessThanOrEqual0;
      Expression expression0 = coreFunction0.getArg3();
      expressionArray4[7] = expression0;
      Step step6 = new Step(0, processingInstructionTest1, expressionArray4);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray1, stepArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, nameAttributeTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(predicateContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(string(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000008 | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000009) | org.apache.commons.jxpath.ri.compiler.Constant@0000000010 | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000011) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000012), org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000008 + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000009) + org.apache.commons.jxpath.ri.compiler.Constant@0000000010 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000011 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000012), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 <= org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 + (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000004) + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006 + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007, $string), org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000008 = org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003, 'string', org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000008 + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000009) + org.apache.commons.jxpath.ri.compiler.Constant@0000000010 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000011 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000012), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006 < (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNotEqual0, coreOperationAdd0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationMod0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      Expression[] expressionArray2 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[2], expressionArray1[2]);
      expressionArray2[0] = (Expression) coreOperationEqual0;
      expressionArray2[1] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray2);
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray1, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray2[0], expressionArray1[1]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], expressionArray1[2]);
      expressionArray0[2] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      coreFunction0.getArg2();
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2569), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1081, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(",C");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("C-${h:rSNsVj 7C&", "C-${h:rSNsVj 7C&");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[0]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3034, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3034()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("F");
      Step step0 = new Step(4183, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-545), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-673), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2897), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-673), processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 3232, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3642, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationSubtract0, coreOperationNegate0);
      expressionArray0[7] = (Expression) coreOperationSubtract1;
      CoreOperationSubtract coreOperationSubtract2 = new CoreOperationSubtract(coreOperationSubtract1, coreOperationEqual0);
      expressionArray0[8] = (Expression) coreOperationSubtract2;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000002) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005) | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006) | (org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007) | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000008) | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000009), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003) + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004 + org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005 + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006) + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007 + org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000008 + org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000009, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000008 and org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000009, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003) mod org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000002 - (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005, -org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000005 - org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000008 - (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-5909), (Expression[]) null);
      coreFunction0.functionNull((EvalContext) null);
      assertEquals((-5909), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      coreFunction0.getArgumentCount();
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName("T9bdP$&N+b]<\"f");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "T9bdP$&N+b]<\"f");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("T9bdP$&N+b]<\"f");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, processingInstructionTest0, false);
      coreFunction0.functionNull(precedingOrFollowingContext0);
      coreFunction0.getArgumentCount();
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, (Step[]) null);
      expressionArray0[1] = (Expression) expressionPath1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      Byte byte0 = new Byte((byte)0);
      Constant constant0 = new Constant(byte0);
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4496, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, basicNodeSet0);
      QName qName0 = new QName("tr5H,W;/k;.HO5_P", "tr5H,W;/k;.HO5_P");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeNameTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(511, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction511()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21856246, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction21856246()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, coreOperationUnion0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, coreOperationUnion0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      evalContext0.hasNext();
      CoreFunction coreFunction0 = new CoreFunction(2048, expressionArray0);
      coreFunction0.functionNamespaceURI(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Integer integer0 = new Integer(2228);
      Constant constant0 = new Constant(integer0);
      expressionArray0[1] = (Expression) constant0;
      Constant constant1 = new Constant("@?H");
      expressionArray0[2] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], coreOperationLessThan0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      Constant constant2 = new Constant("@?H");
      expressionArray0[5] = (Expression) constant2;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("@?H");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "@?H");
      Step step0 = new Step((-2132), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2228, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2228, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(3358, expressionArray0);
      coreFunction0.getArg1();
      assertEquals(3358, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, rootContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreFunction coreFunction0 = new CoreFunction(1834, expressionArray0);
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertEquals(2, evalContext0.getPosition());
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertEquals(1, evalContext0.getPosition());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      QName qName0 = new QName("", "AuJVpIRdEzzw");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeNameTest0, false, true);
      Object object0 = coreFunction0.functionLast(childContext0);
      assertEquals(1, childContext0.getPosition());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("sum()", string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      int int0 = 11;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      coreFunction0.toString();
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("contains", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      assertEquals(11, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("U!XU!Z8?");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationEqual0);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, expressionArray0[3]);
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(102, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("Factory could not create object path: ");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1024, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(561, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1175, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-1085), (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(1024, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      Byte byte0 = new Byte((byte)0);
      Constant constant0 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant0;
      VariableReference variableReference1 = new VariableReference((QName) null);
      expressionArray0[3] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, (NodeTest) null);
      ChildContext childContext0 = new ChildContext(attributeContext0, (NodeTest) null, true, true);
      // Undeclared exception!
      coreFunction0.functionPosition(childContext0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2128, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(2896, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2896()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | org.apache.commons.jxpath.ri.compiler.Constant@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005), '', org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 and org.apache.commons.jxpath.ri.compiler.Constant@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 + org.apache.commons.jxpath.ri.compiler.Constant@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) + (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1620), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1620()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathContext");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathContext");
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4897, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4897);
      Step step0 = new Step(4897, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(4897, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(31, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(4897, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      ChildContext childContext0 = new ChildContext(evalContext0, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction-1()(null, null, null, null, null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2377), (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals((-2377), coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2165), (Expression[]) null);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(754, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1560, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-1680), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1680()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1315), expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals((-1315), coreFunction0.getFunctionCode());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(773, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction773()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.getArg1();
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("!=");
      Step step0 = new Step((-18), processingInstructionTest0, expressionArray0);
      processingInstructionTest0.toString();
      step0.toString();
      stepArray0[0] = step0;
      processingInstructionTest0.toString();
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray0);
      locationPath0.isSimplePath();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }
}
