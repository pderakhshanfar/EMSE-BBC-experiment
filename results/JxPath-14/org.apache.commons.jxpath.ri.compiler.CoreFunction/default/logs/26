* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.CoreFunction
* Starting Client-0
* Connecting to master process on port 21587
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-14/target/classes
  - subjects/buggy-versions/JxPath-14/src/java
  - subjects/buggy-versions/JxPath-14/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/junit-3.8.2.jar
  - subjects/buggy-versions/JxPath-14/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.CoreFunction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1832
* Using seed 4167418895
* Starting evolution
* Initial Number of Goals in DynaMOSA = 654 / 1832
[MASTER] 10:32:11.047 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
Number of times BBC is called in total: 0
* Search finished after 605s and 156 generations, 67378 statements, best individual has fitness: 795.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 64%
* Total number of goals: 344
* Number of covered goals: 219
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 72%
* Total number of goals: 355
* Number of covered goals: 255
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 94%
* Total number of goals: 112
* Number of covered goals: 105
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 48%
* Total number of goals: 616
* Number of covered goals: 298
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 29%
* Total number of goals: 82
* Number of covered goals: 24
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 78%
* Total number of goals: 40
* Number of covered goals: 31
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 71%
* Total number of goals: 355
* Number of covered goals: 253
* Generated 200 tests with total length 773
* Resulting test suite's coverage: 63% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:43:33.111 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7652666666666667% of time used, but only 6/200 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 10:44:17.618 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:17.619 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
assertNotNull(coreOperationAnd0);
assertEquals("and", coreOperationAnd0.getSymbol());
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationAnd0;
CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals(15, coreFunction0.getFunctionCode());
assertEquals(1, expressionArray0.length);

coreFunction0.compute((EvalContext) null);

[MASTER] 10:44:18.305 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:18.307 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
assertNotNull(coreOperationAdd0);
assertEquals("+", coreOperationAdd0.getSymbol());
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationAdd0;
CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(41, coreFunction0.getFunctionCode());
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals(1, expressionArray0.length);

coreFunction0.computeContextDependent();

[MASTER] 10:44:18.885 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:18.888 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[7];
QName qName0 = new QName("mod");
assertNotNull(qName0);
assertEquals("mod", qName0.toString());
assertEquals("mod", qName0.getName());
assertNull(qName0.getPrefix());

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNotNull(extensionFunction0);
assertEquals("mod", qName0.toString());
assertEquals("mod", qName0.getName());
assertNull(qName0.getPrefix());
assertTrue(extensionFunction0.computeContextDependent());
assertEquals(7, expressionArray0.length);

expressionArray0[1] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(7, coreFunction0.getArgumentCount());
assertEquals(26, coreFunction0.getFunctionCode());
assertEquals(7, expressionArray0.length);

coreFunction0.computeValue((EvalContext) null);

[MASTER] 10:44:20.032 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:20.034 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
QName qName0 = new QName("W", "@i*bNI1z");
assertNotNull(qName0);
assertEquals("W:@i*bNI1z", qName0.toString());
assertEquals("W", qName0.getPrefix());
assertEquals("@i*bNI1z", qName0.getName());

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNotNull(extensionFunction0);
assertEquals("W:@i*bNI1z", qName0.toString());
assertEquals("W", qName0.getPrefix());
assertEquals("@i*bNI1z", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(117, coreFunction0.getFunctionCode());
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals(1, expressionArray0.length);

DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
assertNotNull(descendantContext0);
assertEquals(0, descendantContext0.getPosition());
assertEquals(0, descendantContext0.getDocumentOrder());
assertTrue(descendantContext0.isChildOrderingRequired());

NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, (NodeTest) null);
assertNotNull(namespaceContext0);
assertEquals(0, descendantContext0.getPosition());
assertEquals(0, descendantContext0.getDocumentOrder());
assertTrue(descendantContext0.isChildOrderingRequired());
assertEquals(1, namespaceContext0.getDocumentOrder());
assertTrue(namespaceContext0.isChildOrderingRequired());
assertEquals(0, namespaceContext0.getPosition());

ParentContext parentContext0 = new ParentContext(namespaceContext0, (NodeTest) null);
assertNotNull(parentContext0);
assertEquals(0, descendantContext0.getPosition());
assertEquals(0, descendantContext0.getDocumentOrder());
assertTrue(descendantContext0.isChildOrderingRequired());
assertEquals(1, namespaceContext0.getDocumentOrder());
assertTrue(namespaceContext0.isChildOrderingRequired());
assertEquals(0, namespaceContext0.getPosition());
assertTrue(parentContext0.isChildOrderingRequired());
assertEquals(1, parentContext0.getCurrentPosition());
assertEquals(0, parentContext0.getPosition());
assertEquals((-1), parentContext0.getDocumentOrder());

SelfContext selfContext0 = new SelfContext(parentContext0, (NodeTest) null);
assertNotNull(selfContext0);
assertEquals(0, descendantContext0.getPosition());
assertEquals(0, descendantContext0.getDocumentOrder());
assertTrue(descendantContext0.isChildOrderingRequired());
assertEquals(1, namespaceContext0.getDocumentOrder());
assertTrue(namespaceContext0.isChildOrderingRequired());
assertEquals(0, namespaceContext0.getPosition());
assertTrue(parentContext0.isChildOrderingRequired());
assertEquals(1, parentContext0.getCurrentPosition());
assertEquals(0, parentContext0.getPosition());
assertEquals((-1), parentContext0.getDocumentOrder());
assertTrue(selfContext0.isChildOrderingRequired());
assertEquals(0, selfContext0.getPosition());
assertEquals(1, selfContext0.getDocumentOrder());

coreFunction0.functionCeiling(selfContext0);

[MASTER] 10:44:23.006 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:23.008 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[2];
QName qName0 = new QName("", "");
assertNotNull(qName0);
assertEquals("", qName0.getPrefix());
assertEquals(":", qName0.toString());
assertEquals("", qName0.getName());

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNotNull(extensionFunction0);
assertEquals("", qName0.getPrefix());
assertEquals(":", qName0.toString());
assertEquals("", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertEquals(2, expressionArray0.length);

expressionArray0[1] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(2, coreFunction0.getArgumentCount());
assertEquals(3, coreFunction0.getFunctionCode());
assertEquals(2, expressionArray0.length);

coreFunction0.functionCount((EvalContext) null);

[MASTER] 10:44:27.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:27.548 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
QName qName0 = new QName("W", "@i*bNI1z");
assertNotNull(qName0);
assertEquals("W", qName0.getPrefix());
assertEquals("@i*bNI1z", qName0.getName());
assertEquals("W:@i*bNI1z", qName0.toString());

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNotNull(extensionFunction0);
assertEquals("W", qName0.getPrefix());
assertEquals("@i*bNI1z", qName0.getName());
assertEquals("W:@i*bNI1z", qName0.toString());
assertTrue(extensionFunction0.computeContextDependent());
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(117, coreFunction0.getFunctionCode());
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals(1, expressionArray0.length);

DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
assertNotNull(descendantContext0);
assertTrue(descendantContext0.isChildOrderingRequired());
assertEquals(0, descendantContext0.getPosition());
assertEquals(0, descendantContext0.getDocumentOrder());

coreFunction0.functionLocalName(descendantContext0);

[MASTER] 10:44:28.515 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:28.517 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[5];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
assertNotNull(coreOperationUnion0);
assertEquals("|", coreOperationUnion0.getSymbol());
assertEquals(5, expressionArray0.length);

CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion0);
assertNotNull(coreOperationLessThanOrEqual0);
assertEquals("|", coreOperationUnion0.getSymbol());
assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
assertEquals(5, expressionArray0.length);

Step[] stepArray0 = new Step[2];
ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
assertNotNull(expressionPath0);
assertEquals("|", coreOperationUnion0.getSymbol());
assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
assertEquals(5, expressionArray0.length);
assertEquals(2, stepArray0.length);

expressionArray0[0] = (Expression) expressionPath0;
CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(2, coreFunction0.getFunctionCode());
assertEquals(5, coreFunction0.getArgumentCount());
assertEquals(5, expressionArray0.length);

coreFunction0.functionName((EvalContext) null);

[MASTER] 10:44:30.200 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:30.202 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[22];
Constant constant0 = new Constant("-nXhsp3}beaH^Z1zl");
assertNotNull(constant0);
assertFalse(constant0.isContextDependent());
assertFalse(constant0.computeContextDependent());

CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
assertNotNull(coreOperationLessThanOrEqual0);
assertFalse(constant0.isContextDependent());
assertFalse(constant0.computeContextDependent());
assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());

ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, (Step[]) null);
assertNotNull(expressionPath0);
assertFalse(constant0.isContextDependent());
assertFalse(constant0.computeContextDependent());
assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
assertEquals(22, expressionArray0.length);

expressionArray0[0] = (Expression) expressionPath0;
CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(0, coreFunction0.getFunctionCode());
assertEquals(22, coreFunction0.getArgumentCount());
assertEquals(22, expressionArray0.length);

coreFunction0.functionNot((EvalContext) null);

[MASTER] 10:44:31.444 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:44:31.447 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[3];
CoreFunction coreFunction0 = new CoreFunction((-1741), expressionArray0);
assertNotNull(coreFunction0);
assertEquals(3, coreFunction0.getArgumentCount());
assertEquals((-1741), coreFunction0.getFunctionCode());
assertEquals(3, expressionArray0.length);

QName qName0 = new QName("2,s1(mK[jWyxZD");
assertNotNull(qName0);
assertNull(qName0.getPrefix());
assertEquals("2,s1(mK[jWyxZD", qName0.toString());
assertEquals("2,s1(mK[jWyxZD", qName0.getName());

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNotNull(extensionFunction0);
assertNull(qName0.getPrefix());
assertEquals("2,s1(mK[jWyxZD", qName0.toString());
assertEquals("2,s1(mK[jWyxZD", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertEquals(3, expressionArray0.length);

expressionArray0[1] = (Expression) extensionFunction0;
coreFunction0.functionNumber((EvalContext) null);

[MASTER] 10:44:31.733 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 9
* Writing tests to file
* Writing JUnit test case 'CoreFunction_ESTest' to results/JxPath-14/org.apache.commons.jxpath.ri.compiler.CoreFunction/default/tests/26
* Done!

* Computation finished
