* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.CoreFunction
* Starting Client-0
* Connecting to master process on port 7053
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-14/target/classes
  - subjects/buggy-versions/JxPath-14/src/java
  - subjects/buggy-versions/JxPath-14/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/junit-3.8.2.jar
  - subjects/buggy-versions/JxPath-14/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.CoreFunction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1832
* Using seed 2893281648
* Starting evolution
* Initial Number of Goals in DynaMOSA = 654 / 1832
[MASTER] 10:25:43.913 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 10:25:46.378 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.JXPathContextReferenceImpl due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.AncestorContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.UnionContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.ParentContext due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:25:46.395 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.NamespaceResolver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.JXPathContextReferenceImpl due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.ChildContext due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:25:46.475 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.JXPathContextReferenceImpl due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.PredicateContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.SelfContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.UnionContext due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called in total: 0
* Search finished after 604s and 511 generations, 198401 statements, best individual has fitness: 622.0
* Minimizing test suite
[MASTER] 10:36:55.199 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 73%
* Total number of goals: 344
* Number of covered goals: 252
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 81%
* Total number of goals: 355
* Number of covered goals: 286
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 148
* Number of covered goals: 148
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 64%
* Total number of goals: 616
* Number of covered goals: 397
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 35%
* Total number of goals: 82
* Number of covered goals: 29
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 40
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 81%
* Total number of goals: 355
* Number of covered goals: 286
* Generated 461 tests with total length 4462
* Resulting test suite's coverage: 73% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:37:38.509 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.667% of time used, but only 69/461 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 10:38:19.435 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:19.438 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[4];
CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, coreOperationMultiply0);
expressionArray0[0] = (Expression) coreOperationMod0;
ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
expressionArray0[1] = (Expression) extensionFunction0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
expressionArray0[2] = (Expression) coreOperationLessThan0;
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
expressionArray0[3] = (Expression) coreOperationNegate0;
CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, processingInstructionTest0);
PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreOperationNegate0);
ChildContext childContext0 = new ChildContext(predicateContext0, processingInstructionTest0, true, true);
coreFunction0.functionNumber(childContext0);

[MASTER] 10:38:25.100 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:25.102 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[4];
Constant constant0 = new Constant("");
CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
expressionArray0[0] = (Expression) coreOperationGreaterThan0;
Step[] stepArray0 = new Step[5];
QName qName0 = new QName("JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates", "org.apache.commons.jxpath.ri.model.beans.PropertyPointer");
NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
Step step0 = new Step(10, nodeNameTest0, expressionArray0);
stepArray0[0] = step0;
Step step1 = new Step(0, nodeNameTest0, expressionArray0);
stepArray0[1] = step1;
Expression[] expressionArray1 = new Expression[2];
expressionArray1[0] = (Expression) constant0;
expressionArray1[1] = (Expression) coreOperationGreaterThan0;
Step step2 = new Step(0, nodeNameTest0, expressionArray1);
stepArray0[2] = step2;
Step step3 = new Step(10, nodeNameTest0, expressionArray1);
stepArray0[3] = step3;
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
Step step4 = new Step(0, processingInstructionTest0, expressionArray1);
stepArray0[4] = step4;
LocationPath locationPath0 = new LocationPath(true, stepArray0);
expressionArray0[1] = (Expression) locationPath0;
CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, expressionArray1[1]);
expressionArray0[2] = (Expression) coreOperationMod0;
LocationPath locationPath1 = new LocationPath(true, stepArray0);
expressionArray0[3] = (Expression) locationPath1;
CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, true, processingInstructionTest0);
coreFunction0.functionSubstring(descendantContext0);

[MASTER] 10:38:25.438 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:25.444 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[2];
CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationAdd0);
expressionArray0[0] = (Expression) coreOperationLessThan0;
CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
expressionArray0[1] = (Expression) coreOperationAnd0;
CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
expressionPath0.createContextForStep(ancestorContext0, 22, processingInstructionTest0);
CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
coreFunction0.functionSubstring((EvalContext) null);

[MASTER] 10:38:30.140 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:30.142 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[3];
CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
expressionArray0[0] = (Expression) coreOperationAnd0;
QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl", "");
VariableReference variableReference0 = new VariableReference(qName0);
expressionArray0[1] = (Expression) variableReference0;
Expression[] expressionArray1 = new Expression[0];
ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray1, (Step[]) null);
expressionArray0[2] = (Expression) expressionPath0;
CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
coreFunction0.functionSubstring((EvalContext) null);

[MASTER] 10:38:31.031 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:31.032 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[0] = (Expression) coreOperationOr0;
CoreFunction coreFunction0 = new CoreFunction((-75), expressionArray0);
coreFunction0.functionBoolean((EvalContext) null);

[MASTER] 10:38:31.537 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:31.539 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[4];
CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, coreOperationMultiply0);
expressionArray0[0] = (Expression) coreOperationMod0;
ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
expressionArray0[1] = (Expression) extensionFunction0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
expressionArray0[2] = (Expression) coreOperationLessThan0;
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
expressionArray0[3] = (Expression) coreOperationNegate0;
CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, processingInstructionTest0);
PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreOperationNegate0);
ChildContext childContext0 = new ChildContext(predicateContext0, processingInstructionTest0, true, true);
coreFunction0.functionNamespaceURI(namespaceContext0);

[MASTER] 10:38:32.457 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:32.459 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CoreFunction coreFunction0 = new CoreFunction(232, (Expression[]) null);
Expression[] expressionArray0 = new Expression[2];
expressionArray0[0] = (Expression) coreFunction0;
QName qName0 = new QName((String) null, "R");
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
expressionArray0[1] = (Expression) extensionFunction0;
CoreFunction coreFunction1 = new CoreFunction(2819, expressionArray0);
NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2819);
SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
AncestorContext ancestorContext0 = new AncestorContext(selfContext0, true, nodeTypeTest0);
coreFunction1.functionStringLength(ancestorContext0);

[MASTER] 10:38:33.614 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:33.615 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[3];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
assertEquals(3, expressionArray0.length);
assertEquals("|", coreOperationUnion0.getSymbol());
assertNotNull(coreOperationUnion0);

expressionArray0[0] = (Expression) coreOperationUnion0;
QName qName0 = new QName("floor", "'1,R^9b&e4aTg #m");
assertEquals("floor:'1,R^9b&e4aTg #m", qName0.toString());
assertEquals("'1,R^9b&e4aTg #m", qName0.getName());
assertEquals("floor", qName0.getPrefix());
assertNotNull(qName0);

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertEquals(3, expressionArray0.length);
assertEquals("floor:'1,R^9b&e4aTg #m", qName0.toString());
assertEquals("'1,R^9b&e4aTg #m", qName0.getName());
assertEquals("floor", qName0.getPrefix());
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);

expressionArray0[1] = (Expression) extensionFunction0;
VariableReference variableReference0 = new VariableReference(qName0);
assertEquals("floor:'1,R^9b&e4aTg #m", qName0.toString());
assertEquals("'1,R^9b&e4aTg #m", qName0.getName());
assertEquals("floor", qName0.getPrefix());
assertFalse(variableReference0.isContextDependent());
assertFalse(variableReference0.computeContextDependent());
assertNotNull(variableReference0);

expressionArray0[2] = (Expression) variableReference0;
CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
assertEquals(3, expressionArray0.length);
assertEquals(19, coreFunction0.getFunctionCode());
assertEquals(3, coreFunction0.getArgumentCount());
assertNotNull(coreFunction0);

coreFunction0.functionNot((EvalContext) null);

[MASTER] 10:38:37.119 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:37.121 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[4];
ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
assertEquals(4, expressionArray0.length);
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);

expressionArray0[1] = (Expression) extensionFunction0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
assertEquals(4, expressionArray0.length);
assertEquals("<", coreOperationLessThan0.getSymbol());
assertNotNull(coreOperationLessThan0);

expressionArray0[2] = (Expression) coreOperationLessThan0;
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
assertEquals(4, expressionArray0.length);
assertEquals("<", coreOperationLessThan0.getSymbol());
assertEquals("-", coreOperationNegate0.getSymbol());
assertNotNull(coreOperationNegate0);

expressionArray0[3] = (Expression) coreOperationNegate0;
CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
assertEquals(4, expressionArray0.length);
assertEquals(4, coreFunction0.getArgumentCount());
assertEquals(3, coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);

ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
assertEquals("", processingInstructionTest0.getTarget());
assertNotNull(processingInstructionTest0);

ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
assertEquals("", processingInstructionTest1.getTarget());
assertNotNull(processingInstructionTest1);

PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest1, false);
assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
assertEquals("", processingInstructionTest1.getTarget());
assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
assertEquals(0, precedingOrFollowingContext0.getPosition());
assertNotNull(precedingOrFollowingContext0);

coreFunction0.functionNumber(precedingOrFollowingContext0);

[MASTER] 10:38:40.888 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:38:40.890 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[23];
ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
assertEquals(23, expressionArray0.length);
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);

expressionArray0[1] = (Expression) extensionFunction0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
assertEquals(23, expressionArray0.length);
assertEquals("<", coreOperationLessThan0.getSymbol());
assertNotNull(coreOperationLessThan0);

expressionArray0[2] = (Expression) coreOperationLessThan0;
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
assertEquals(23, expressionArray0.length);
assertEquals("<", coreOperationLessThan0.getSymbol());
assertEquals("-", coreOperationNegate0.getSymbol());
assertNotNull(coreOperationNegate0);

expressionArray0[3] = (Expression) coreOperationNegate0;
CoreFunction coreFunction0 = new CoreFunction((-20), expressionArray0);
assertEquals(23, expressionArray0.length);
assertEquals((-20), coreFunction0.getFunctionCode());
assertEquals(23, coreFunction0.getArgumentCount());
assertNotNull(coreFunction0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

EvalContext evalContext0 = null;
NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
assertNull(nodeNameTest0.getNamespaceURI());
assertNotNull(nodeNameTest0);

coreFunction0.functionSubstringAfter((EvalContext) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 10
* Writing tests to file
* Writing JUnit test case 'CoreFunction_ESTest' to results/JxPath-14/org.apache.commons.jxpath.ri.compiler.CoreFunction/default/tests/8
* Done!

* Computation finished
