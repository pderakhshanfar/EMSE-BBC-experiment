* EvoSuite 1.1.1-SNAPSHOT
* Configuration: default
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.CoreFunction
* Starting Client-0
* Connecting to master process on port 11884
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-14/target/classes
  - subjects/buggy-versions/JxPath-14/src/java
  - subjects/buggy-versions/JxPath-14/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/junit-3.8.2.jar
  - subjects/buggy-versions/JxPath-14/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.CoreFunction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1832
* Using seed 1241267761
* Starting evolution
* Initial Number of Goals in DynaMOSA = 654 / 1832
[MASTER] 10:25:24.490 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 10:27:59.649 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.NamespaceResolver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.JXPathContextReferenceImpl due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.NamespaceContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.InitialContext due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:32:25.424 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.NamespaceResolver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.JXPathContextReferenceImpl due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.UnionContext due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
[MASTER] 10:33:34.393 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.SelfContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.ChildContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.AncestorContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.ParentContext due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
Number of times BBC is called in total: 0
* Search finished after 604s and 914 generations, 389621 statements, best individual has fitness: 396.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 87%
* Total number of goals: 344
* Number of covered goals: 298
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 89%
* Total number of goals: 355
* Number of covered goals: 317
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 154
* Number of covered goals: 150
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 84%
* Total number of goals: 616
* Number of covered goals: 519
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 35%
* Total number of goals: 82
* Number of covered goals: 29
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 40
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 355
* Number of covered goals: 317
* Generated 280 tests with total length 1456
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:37:02.004 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.95475% of time used, but only 136/280 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 49%
* Compiling and checking tests
[MASTER] 10:37:12.823 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 10:37:12.823 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_149_1627641432823
[MASTER] 10:37:42.656 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:42.657 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
expressionArray0[0] = (Expression) coreOperationAnd0;
CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
coreFunction0.compute((EvalContext) null);

[MASTER] 10:37:43.344 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:43.346 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[2];
CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
expressionArray0[0] = (Expression) coreOperationAnd0;
CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
expressionArray0[1] = (Expression) coreOperationAnd1;
CoreFunction coreFunction0 = new CoreFunction(1452, expressionArray0);
coreFunction0.computeContextDependent();

[MASTER] 10:37:45.150 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:45.151 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
assertEquals("or", coreOperationOr0.getSymbol());
assertNotNull(coreOperationOr0);
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationOr0;
CoreFunction coreFunction0 = new CoreFunction(843, expressionArray0);
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals(843, coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);
assertEquals(1, expressionArray0.length);

coreFunction0.functionBoolean((EvalContext) null);

[MASTER] 10:37:45.851 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:45.852 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[4];
QName qName0 = new QName("2T2S>D$FO3", "2T2S>D$FO3");
assertEquals("2T2S>D$FO3", qName0.getPrefix());
assertEquals("2T2S>D$FO3", qName0.getName());
assertEquals("2T2S>D$FO3:2T2S>D$FO3", qName0.toString());
assertNotNull(qName0);

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertEquals("2T2S>D$FO3", qName0.getPrefix());
assertEquals("2T2S>D$FO3", qName0.getName());
assertEquals("2T2S>D$FO3:2T2S>D$FO3", qName0.toString());
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);
assertEquals(4, expressionArray0.length);

expressionArray0[1] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
assertEquals(4, coreFunction0.getArgumentCount());
assertEquals(2, coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);
assertEquals(4, expressionArray0.length);

NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "2T2S>D$FO3");
assertEquals("2T2S>D$FO3", qName0.getPrefix());
assertEquals("2T2S>D$FO3", qName0.getName());
assertEquals("2T2S>D$FO3:2T2S>D$FO3", qName0.toString());
assertEquals("2T2S>D$FO3", nodeNameTest0.getNamespaceURI());
assertEquals("2T2S>D$FO3:2T2S>D$FO3", nodeNameTest0.toString());
assertFalse(nodeNameTest0.isWildcard());
assertNotNull(nodeNameTest0);

PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
assertEquals("2T2S>D$FO3", qName0.getPrefix());
assertEquals("2T2S>D$FO3", qName0.getName());
assertEquals("2T2S>D$FO3:2T2S>D$FO3", qName0.toString());
assertEquals("2T2S>D$FO3", nodeNameTest0.getNamespaceURI());
assertEquals("2T2S>D$FO3:2T2S>D$FO3", nodeNameTest0.toString());
assertFalse(nodeNameTest0.isWildcard());
assertEquals(0, precedingOrFollowingContext0.getPosition());
assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
assertNotNull(precedingOrFollowingContext0);

ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, nodeNameTest0);
assertEquals("2T2S>D$FO3", qName0.getPrefix());
assertEquals("2T2S>D$FO3", qName0.getName());
assertEquals("2T2S>D$FO3:2T2S>D$FO3", qName0.toString());
assertEquals("2T2S>D$FO3", nodeNameTest0.getNamespaceURI());
assertEquals("2T2S>D$FO3:2T2S>D$FO3", nodeNameTest0.toString());
assertFalse(nodeNameTest0.isWildcard());
assertEquals(0, precedingOrFollowingContext0.getPosition());
assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
assertTrue(parentContext0.isChildOrderingRequired());
assertEquals(1, parentContext0.getCurrentPosition());
assertEquals((-1), parentContext0.getDocumentOrder());
assertEquals(0, parentContext0.getPosition());
assertNotNull(parentContext0);

coreFunction0.functionCeiling(parentContext0);

[MASTER] 10:37:46.823 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:46.825 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[11];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
assertEquals("|", coreOperationUnion0.getSymbol());
assertNotNull(coreOperationUnion0);
assertEquals(11, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationUnion0;
CoreFunction coreFunction0 = new CoreFunction(54, expressionArray0);
assertEquals(54, coreFunction0.getFunctionCode());
assertEquals(11, coreFunction0.getArgumentCount());
assertNotNull(coreFunction0);
assertEquals(11, expressionArray0.length);

coreFunction0.functionConcat((EvalContext) null);

[MASTER] 10:37:47.559 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:47.560 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[2];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
assertEquals("or", coreOperationOr0.getSymbol());
assertNotNull(coreOperationOr0);
assertEquals(2, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationOr0;
CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
assertEquals(2, coreFunction0.getArgumentCount());
assertEquals(17, coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);
assertEquals(2, expressionArray0.length);

coreFunction0.functionContains((EvalContext) null);

[MASTER] 10:37:48.070 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:48.071 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
QName qName0 = new QName("string-length");
assertNull(qName0.getPrefix());
assertEquals("string-length", qName0.toString());
assertEquals("string-length", qName0.getName());
assertNotNull(qName0);

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNull(qName0.getPrefix());
assertEquals("string-length", qName0.toString());
assertEquals("string-length", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction((-1471), expressionArray0);
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals((-1471), coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);
assertEquals(1, expressionArray0.length);

coreFunction0.functionCount((EvalContext) null);

[MASTER] 10:37:48.551 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:48.552 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[6];
QName qName0 = new QName("A CDATA is not allowed at the document root");
assertNull(qName0.getPrefix());
assertEquals("A CDATA is not allowed at the document root", qName0.toString());
assertEquals("A CDATA is not allowed at the document root", qName0.getName());
assertNotNull(qName0);

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNull(qName0.getPrefix());
assertEquals("A CDATA is not allowed at the document root", qName0.toString());
assertEquals("A CDATA is not allowed at the document root", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);
assertEquals(6, expressionArray0.length);

expressionArray0[2] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction((-3981), expressionArray0);
assertEquals((-3981), coreFunction0.getFunctionCode());
assertEquals(6, coreFunction0.getArgumentCount());
assertNotNull(coreFunction0);
assertEquals(6, expressionArray0.length);

coreFunction0.functionCount((EvalContext) null);

[MASTER] 10:37:50.020 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:50.021 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
assertEquals("+", coreOperationAdd0.getSymbol());
assertNotNull(coreOperationAdd0);
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationAdd0;
CoreFunction coreFunction0 = new CoreFunction((-3096), expressionArray0);
assertEquals((-3096), coreFunction0.getFunctionCode());
assertEquals(1, coreFunction0.getArgumentCount());
assertNotNull(coreFunction0);
assertEquals(1, expressionArray0.length);

QName qName0 = new QName("");
assertNull(qName0.getPrefix());
assertEquals("", qName0.getName());
assertEquals("", qName0.toString());
assertNotNull(qName0);

NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
assertNull(qName0.getPrefix());
assertEquals("", qName0.getName());
assertEquals("", qName0.toString());
assertNull(nodeNameTest0.getNamespaceURI());
assertEquals("", nodeNameTest0.toString());
assertFalse(nodeNameTest0.isWildcard());
assertNotNull(nodeNameTest0);

DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
assertNull(qName0.getPrefix());
assertEquals("", qName0.getName());
assertEquals("", qName0.toString());
assertNull(nodeNameTest0.getNamespaceURI());
assertEquals("", nodeNameTest0.toString());
assertFalse(nodeNameTest0.isWildcard());
assertEquals(0, descendantContext0.getPosition());
assertTrue(descendantContext0.isChildOrderingRequired());
assertEquals(0, descendantContext0.getDocumentOrder());
assertNotNull(descendantContext0);

AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeNameTest0);
assertNull(qName0.getPrefix());
assertEquals("", qName0.getName());
assertEquals("", qName0.toString());
assertNull(nodeNameTest0.getNamespaceURI());
assertEquals("", nodeNameTest0.toString());
assertFalse(nodeNameTest0.isWildcard());
assertEquals(0, descendantContext0.getPosition());
assertTrue(descendantContext0.isChildOrderingRequired());
assertEquals(0, descendantContext0.getDocumentOrder());
assertTrue(attributeContext0.isChildOrderingRequired());
assertEquals(1, attributeContext0.getDocumentOrder());
assertEquals(0, attributeContext0.getPosition());
assertNotNull(attributeContext0);

coreFunction0.functionFloor(attributeContext0);

[MASTER] 10:37:54.777 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:54.777 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
assertEquals("or", coreOperationOr0.getSymbol());
assertNotNull(coreOperationOr0);
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationOr0;
CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals(108, coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);
assertEquals(1, expressionArray0.length);

coreFunction0.functionLocalName((EvalContext) null);

[MASTER] 10:37:55.067 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:55.069 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(1394, expressionArray0);
assertEquals(1394, coreFunction0.getFunctionCode());
assertEquals(1, coreFunction0.getArgumentCount());
assertNotNull(coreFunction0);
assertEquals(1, expressionArray0.length);

coreFunction0.functionName((EvalContext) null);

[MASTER] 10:37:55.817 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:55.818 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
assertEquals("|", coreOperationUnion0.getSymbol());
assertNotNull(coreOperationUnion0);
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationUnion0;
CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
assertEquals(13, coreFunction0.getFunctionCode());
assertEquals(1, coreFunction0.getArgumentCount());
assertNotNull(coreFunction0);
assertEquals(1, expressionArray0.length);

coreFunction0.functionName((EvalContext) null);

[MASTER] 10:37:56.975 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:56.976 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
assertEquals("|", coreOperationUnion0.getSymbol());
assertNotNull(coreOperationUnion0);
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationUnion0;
CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals(29, coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);
assertEquals(1, expressionArray0.length);

coreFunction0.functionNamespaceURI((EvalContext) null);

[MASTER] 10:37:57.780 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:57.780 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
assertEquals("|", coreOperationUnion0.getSymbol());
assertNotNull(coreOperationUnion0);
assertEquals(1, expressionArray0.length);

expressionArray0[0] = (Expression) coreOperationUnion0;
CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
assertEquals(1, coreFunction0.getArgumentCount());
assertEquals(29, coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);
assertEquals(1, expressionArray0.length);

coreFunction0.functionNormalizeSpace((EvalContext) null);

[MASTER] 10:37:58.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:58.800 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[3];
QName qName0 = new QName("trgT<`(", (String) null);
assertEquals("trgT<`(:null", qName0.toString());
assertEquals("trgT<`(", qName0.getPrefix());
assertNull(qName0.getName());
assertNotNull(qName0);

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertEquals("trgT<`(:null", qName0.toString());
assertEquals("trgT<`(", qName0.getPrefix());
assertNull(qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);
assertEquals(3, expressionArray0.length);

expressionArray0[1] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
assertEquals(11, coreFunction0.getFunctionCode());
assertEquals(3, coreFunction0.getArgumentCount());
assertNotNull(coreFunction0);
assertEquals(3, expressionArray0.length);

coreFunction0.functionNot((EvalContext) null);

[MASTER] 10:37:59.722 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 10:37:59.723 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[3];
ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
assertTrue(extensionFunction0.computeContextDependent());
assertNotNull(extensionFunction0);
assertEquals(3, expressionArray0.length);

expressionArray0[2] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction((-1604), expressionArray0);
assertEquals(3, coreFunction0.getArgumentCount());
assertEquals((-1604), coreFunction0.getFunctionCode());
assertNotNull(coreFunction0);
assertEquals(3, expressionArray0.length);

coreFunction0.functionNull((EvalContext) null);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'CoreFunction_ESTest' to results/JxPath-14/org.apache.commons.jxpath.ri.compiler.CoreFunction/default/tests/4
* Done!

* Computation finished
