/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:42:21 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      coreOperationAnd0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2881), expressionArray1);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2881), expressionArray1);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2881()(, )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2881), expressionArray1);
      coreFunction0.functionConcat((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2881), expressionArray1);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Locale locale0 = Locale.ITALY;
      QName qName0 = new QName("l$|+[O2L~");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      evalContextArray0[8] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(descendantContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2869), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2869), expressionArray1);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2869()(, )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.getCurrentPosition();
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      QName qName0 = new QName("starts-with");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Cannot convert value of class ");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(Integer.MIN_VALUE);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      coreFunction0.functionTrue((EvalContext) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2869), expressionArray1);
      EvalContext evalContext0 = null;
      coreOperationSubtract0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Locale locale0 = Locale.TAIWAN;
      QName qName0 = new QName("]uiuw");
      CoreFunction coreFunction0 = new CoreFunction((-3450), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Integer integer0 = new Integer((-3450));
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, integer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      SelfContext selfContext0 = new SelfContext(rootContext0, (NodeTest) null);
      EvalContext evalContext0 = rootContext0.getConstantContext(selfContext0);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, (NodeTest) null);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(35, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("U'kRmsTq:re4oC", "U'kRmsTq:re4oC");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'U'kRmsTq:re4oC:U'kRmsTq:re4oC'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("\"<");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2690), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(346);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[9];
      QName qName0 = new QName((String) null, "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(extensionFunction0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationDivide1;
      Expression[] expressionArray2 = new Expression[4];
      expressionArray2[0] = (Expression) coreOperationDivide0;
      expressionArray2[1] = (Expression) coreOperationDivide1;
      expressionArray2[2] = (Expression) extensionFunction0;
      expressionArray2[3] = (Expression) coreOperationDivide1;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-65), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(432, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray2, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionPath0);
      expressionArray1[2] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[1], coreOperationDivide1);
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[4] = (Expression) extensionFunction1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray2);
      expressionArray1[5] = (Expression) coreOperationAdd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[6] = (Expression) variableReference0;
      Integer integer0 = new Integer(75);
      Constant constant0 = new Constant(integer0);
      expressionArray1[7] = (Expression) constant0;
      Expression[] expressionArray3 = new Expression[8];
      expressionArray3[0] = (Expression) coreOperationAdd0;
      expressionArray3[1] = (Expression) variableReference0;
      expressionArray3[2] = (Expression) coreOperationEqual0;
      expressionArray3[3] = (Expression) constant0;
      expressionArray3[4] = (Expression) coreOperationDivide1;
      expressionArray3[5] = (Expression) coreOperationAdd0;
      expressionArray3[6] = (Expression) coreOperationAdd0;
      expressionArray3[7] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray3);
      expressionArray1[8] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(75, expressionArray1);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray0);
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1024);
      Step step0 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) step0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      EvalContext evalContext1 = expressionPath0.evalSteps(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(evalContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("]Rk^CJ");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      coreOperationGreaterThan0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(2500, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(1144, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(8, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-4103), (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(8, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath1;
      Step[] stepArray1 = new Step[4];
      stepArray1[0] = step1;
      stepArray1[1] = step3;
      stepArray1[2] = step1;
      stepArray1[3] = step0;
      ExpressionPath expressionPath2 = new ExpressionPath(locationPath0, expressionArray0, stepArray1);
      expressionArray0[6] = (Expression) expressionPath2;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[5], expressionArray0[2]);
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(1144, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      Expression[] expressionArray2 = new Expression[4];
      expressionArray2[0] = (Expression) coreOperationAnd0;
      expressionArray2[1] = (Expression) coreOperationAnd0;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray2);
      coreFunction1.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[1];
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-2282), processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1021), processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(23, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-2282), processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(14, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray1[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2013265920, expressionArray1);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      Step[] stepArray0 = new Step[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2055));
      Step step0 = new Step(1286, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(8, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray2 = new Expression[5];
      expressionArray2[0] = (Expression) coreFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) coreFunction0;
      expressionArray2[4] = (Expression) coreFunction0;
      Step step3 = new Step(181, nodeTypeTest0, expressionArray2);
      step3.toString();
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, (Pointer) null);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("\"|\"", "");
      Integer integer0 = new Integer(8);
      Locale locale0 = Locale.GERMANY;
      variablePointerFactory0.createNodePointer(qName0, (Object) integer0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      QName qName1 = new QName("");
      EvalContext evalContext0 = rootContext0.getVariableContext(qName1);
      // Undeclared exception!
      try { 
        coreFunction1.compute(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(88, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(88, (Expression[]) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      basicVariables0.toString();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(88);
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ''
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      QName qName0 = new QName("The element \"", "The element \"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "The element \"");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      QName qName0 = new QName("The element \"", "The element \"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "The element \"");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.setPosition(9);
      CoreFunction coreFunction0 = new CoreFunction((-1614), (Expression[]) null);
      coreFunction0.functionLast(namespaceContext0);
      coreFunction0.functionTrue(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, coreOperationGreaterThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, coreOperationGreaterThan0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThan0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreOperationEqual0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[1], coreOperationEqual0);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreOperationDivide0);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(1488, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      coreOperationAnd0.args = expressionArray0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      coreOperationSubtract0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationNotEqual0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(19, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(18, nodeNameTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2456));
      Step step2 = new Step(2159, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(295, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      stepArray0[4] = step3;
      Step step4 = new Step(2378, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2091));
      Step step0 = new Step((-2091), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(58, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(58, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2043), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(32767, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(30, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(30, nodeTypeTest0, expressionArray0);
      Step step7 = new Step(32767, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(41, nodeTypeTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(58, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Byte byte0 = new Byte((byte)123);
      Constant constant0 = new Constant(byte0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("=Qe");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(547, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-102), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(48, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(24, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("=Qe");
      Step step4 = new Step((-692), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant1 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Constant constant2 = new Constant(byte0);
      expressionArray0[4] = (Expression) constant2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(547, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(parentContext0, processingInstructionTest0, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray1);
      QName qName0 = new QName("M~_f07}QS", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionNormalizeSpace(selfContext0);
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("+s&2bI[");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, extensionFunction0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(1453, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1928, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(1928, (Expression[]) null);
      coreFunction1.isContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("key", "v5M^{:]-)[l(");
      Locale locale0 = new Locale("LGc*f", " 7r)p");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
      coreFunction0.functionLast(evalContext0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      coreOperationAnd0.args = expressionArray0;
      coreOperationSubtract0.args = coreOperationAnd0.args;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(1053, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.computeContextDependent();
      coreOperationAnd0.isContextDependent();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionBoolean(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, constant0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[3]);
      expressionArray0[7] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction((-619), expressionArray0);
      constant0.toString();
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((double) (-102));
      Constant constant0 = new Constant(float0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "~GwSr6cY^qB");
      Step step0 = new Step(18, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      Step step1 = new Step((-102), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-102), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, expressionArray1[3]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-102), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, expressionArray1[0]);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionTrue(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("f8gG");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(2379, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      Expression[] expressionArray2 = new Expression[2];
      expressionArray2[0] = (Expression) coreOperationAnd0;
      expressionArray2[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#>Hvay!zOKX1");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Step step0 = new Step(46, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(21, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.AncestorContext", "#>Hvay!zOKX1");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.AncestorContext");
      Step step2 = new Step(21, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(21, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationOr0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("0.na");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Locale locale0 = Locale.GERMANY;
      QName qName0 = new QName("o?PRboyBiyaQ,/<tX");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "o?PRboyBiyaQ,/<tX");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, nodeNameTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: o?PRboyBiyaQ,/<tX
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Locale locale0 = Locale.GERMANY;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "o?PRboyBiyaQ,/<tX", (Pointer) null);
      QName qName0 = new QName("");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      InitialContext initialContext0 = new InitialContext(evalContextArray0[2]);
      evalContextArray0[7] = (EvalContext) initialContext0;
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName1 = new QName("org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory", "GfT^7bF}0DgO]");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "org.apache.commons.jxpath.ri.model.container.ContainerPointerFactory");
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, nodeNameTest0);
      EvalContext evalContext1 = rootContext0.getConstantContext(ancestorContext0);
      evalContextArray0[8] = evalContext1;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      QName qName0 = new QName("", "@'\u0004w`");
      Locale locale0 = new Locale("Y;|ihAPsN", "substring-before");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "@'\u0004w`");
      Locale.forLanguageTag("<<unknown namespace>>");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      Step[] stepArray1 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "8_9n-.");
      Step step0 = new Step((-2455), nodeNameTest0, expressionArray0);
      stepArray1[0] = step0;
      Step step1 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray1[1] = step1;
      Step step2 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray1[2] = step2;
      Step step3 = new Step((-2455), nodeNameTest0, expressionArray0);
      stepArray1[3] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      Step step4 = new Step(17, nodeNameTest1, expressionArray0);
      stepArray1[4] = step4;
      Step step5 = new Step(2, nodeNameTest1, expressionArray0);
      stepArray1[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray1);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationNegate0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, expressionArray0[4]);
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationEqual0);
      expressionArray0[6] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationSubtract0);
      expressionArray0[4] = (Expression) coreOperationMod0;
      QName qName0 = new QName("starts-with", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-714));
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(47, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr1, expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(105, expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeTypeTest0, false);
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, (NodeSet) null);
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, expressionArray0[0]);
      // Undeclared exception!
      coreFunction0.functionStartsWith(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Locale locale0 = Locale.GERMANY;
      QName qName0 = new QName("o?PRboyBiyaQ,/<tX");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction0.functionNamespaceURI(rootContext0);
      coreFunction0.functionNumber(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationSubtract0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationMod0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, nameAttributeTest0);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      coreOperationAnd0.args = expressionArray1;
      EvalContext evalContext0 = null;
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(105, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      coreOperationSubtract0.computeContextDependent();
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      coreOperationSubtract0.args = expressionArray0;
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(1053, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("B  0)@D';ue");
      Step step0 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(25, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(695, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(1976, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray1, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("Cannot allocate ", "jnLS)}m");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("\"namespace::\"");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      QName qName0 = new QName("\"namespace::\"", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Locale locale0 = Locale.GERMANY;
      QName qName0 = new QName("o?PRboyBiyaQ,/<tX");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(116, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction((-745), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(evalContextArray0[0], (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("s?m");
      processingInstructionTest0.toString();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionID(evalContextArray0[0]);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 1137;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      JXPathContext.newContext((Object) coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationNotEqual0, (Pointer) null);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getAbsoluteRootContext();
      EvalContext evalContext1 = expressionPath0.createContextForStep(evalContext0, 8, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(evalContext1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      coreOperationSubtract0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("\"gs");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreOperationEqual0.args = expressionArray0;
      coreFunction0.getArg2();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\"gs");
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(parentContext0, nodeNameTest0, false, false);
      // Undeclared exception!
      coreFunction0.functionLocalName(childContext0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(88, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(88, (Expression[]) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(88);
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(descendantContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ''
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot register namespaces on a sealed NamespaceResolver");
      QName qName0 = new QName("not");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step((-4390), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(70, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-4390), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(4194304, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(70, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, locationPath0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, coreOperationSubtract0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreOperationNotEqual0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(70, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(88, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.KOREAN;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ChildContext childContext0 = new ChildContext(rootContext1, nodeNameTest0, true, true);
      InitialContext initialContext0 = (InitialContext)rootContext1.getConstantContext(childContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Float float0 = Float.valueOf((float) 2);
      Constant constant0 = new Constant(float0);
      Constant constant1 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant1);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("etBR\"GA%J's_", "9guax");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationSubtract0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNotEqual1;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(15, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(15, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(15, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) constant1;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationSubtract0;
      expressionArray1[5] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray1, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual2 = new CoreOperationNotEqual(locationPath0, expressionArray1[3]);
      expressionArray0[5] = (Expression) coreOperationNotEqual2;
      CoreOperationNotEqual coreOperationNotEqual3 = new CoreOperationNotEqual(constant0, expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationNotEqual3;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName((String) null, "substring-before");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(570, expressionArray0);
      Step[] stepArray0 = new Step[9];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step(570, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(570, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(570, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(78, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-3427), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-3427), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(78, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(78, nodeNameTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      EvalContext evalContext0 = expressionPath0.evalSteps(predicateContext0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, nodeNameTest0, true);
      // Undeclared exception!
      coreFunction0.functionSum(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreOperationAnd0;
      expressionArray2[1] = (Expression) coreOperationAnd0;
      expressionArray2[2] = (Expression) coreOperationSubtract0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)77;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(1053, expressionArray2);
      coreOperationAnd0.iterate((EvalContext) null);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.getArg3();
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Float float0 = new Float((-1673.0365F));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("", "kD+]/Iv,-,[4_Llxu2p");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(264, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.computeValue(parentContext0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(27, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("\"namespace::\"");
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      QName qName0 = new QName("\"namespace::\"", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      Step step0 = new Step(292, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(292, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName((String) null, "HBF2_q`a]Ch");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(20, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray1, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      ExpressionPath expressionPath1 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray1[2] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction((-3129), expressionArray1);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(6, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion1, coreOperationUnion0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion1;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion2;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) expressionPath0;
      expressionArray2[1] = (Expression) coreOperationUnion2;
      expressionArray2[2] = (Expression) coreOperationUnion2;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray2);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[7] = expression0;
      CoreOperationUnion coreOperationUnion3 = new CoreOperationUnion(expressionArray2);
      expressionArray0[8] = (Expression) coreOperationUnion3;
      CoreFunction coreFunction1 = new CoreFunction(568, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationNegate0);
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], coreOperationNegate0);
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.VariablePointerFactory$VariableContextWrapper");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2293), (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2739), expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("$dSc,*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$dSc,*");
      Step step0 = new Step((-2164), nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(15, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      coreFunction1.functionSubstring(ancestorContext0);
      assertEquals((-2739), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray1);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(25, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-330), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName((String) null, (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      Constant constant0 = new Constant("");
      expressionArray0[5] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1868), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      Step step1 = new Step((-352), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-1868), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-352), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[7] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1868), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      coreOperationSubtract0.args = expressionArray0;
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(51, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(14, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      coreOperationSubtract0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(51, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationDivide0);
      // Undeclared exception!
      coreFunction0.functionNumber(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("true");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1181));
      Step step0 = new Step(60, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      Step step1 = new Step(1726, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(60, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(215);
      Step step0 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1952), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(17, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2060, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1952), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, (Step[]) null);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "round");
      CoreFunction coreFunction0 = new CoreFunction((-709), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[6] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[7] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "number");
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference1;
      VariableReference variableReference2 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference2;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], variableReference0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], variableReference0);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(83, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      coreOperationAnd0.args = expressionArray0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray1);
      coreFunction0.functionNot((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(51, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationAnd", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant("");
      expressionArray0[2] = (Expression) constant1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant1, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(851, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3359));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      namespaceContext0.getCurrentNodePointer();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("<<unknown namespace>>", "org.apache.commons.jxpath.ri.model.beans.NullPointer");
      Locale locale0 = Locale.CANADA;
      Integer integer0 = new Integer(980);
      NodePointer.newNodePointer(qName0, integer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, integer0, (Pointer) null);
      Locale locale1 = Locale.TAIWAN;
      Locale locale2 = new Locale("CF", "org.apache.commons.jxpath.ri.model.beans.NullPointer");
      locale1.getDisplayCountry(locale2);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], constant1);
      coreOperationSubtract0.compute(namespaceContext0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
      coreFunction0.functionConcat((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction851()('', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '', org.apache.commons.jxpath.ri.compiler.Constant@0000000003 div org.apache.commons.jxpath.ri.compiler.Constant@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w\"v}G-,=;kfN3mrnq");
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(12, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      CoreFunction coreFunction1 = new CoreFunction((-3813), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)4;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction1.toString();
      CoreFunction coreFunction2 = new CoreFunction((-2147483647), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object0);
      
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(1.0, object1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      Object object0 = coreFunction0.functionNormalizeSpace(selfContext0);
      assertEquals("0", object0);
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray1);
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertNotNull(object1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(6, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(28, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreOperationSubtract0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 25;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 30;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      QName qName0 = new QName("", "ULFoi{4g0M<b a");
      Locale locale0 = Locale.CANADA;
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], (Expression[]) null, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      coreOperationSubtract0.toString();
      coreOperationSubtract0.args = expressionArray0;
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(1391, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      extensionFunction0.args = expressionArray1;
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2365), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      coreOperationSubtract0.toString();
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object0);
      
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      coreOperationSubtract0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.args = expressionArray0;
      String string0 = coreFunction0.getFunctionName();
      assertEquals("number", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      coreOperationAnd0.args = expressionArray1;
      EvalContext evalContext0 = null;
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName((String) null, "");
      VariableReference variableReference0 = new VariableReference(qName0);
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(19, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(7, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1778, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(7, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(15, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1778, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) variableReference0;
      Step step6 = new Step(41, nodeNameTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(27, nodeNameTest0, expressionArray1);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[4], expressionPath0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[3], variableReference0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[4]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-4289), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, nodeNameTest0);
      expressionPath0.createContextForStep(descendantContext0, 817, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionFloor((EvalContext) null);
      assertEquals(0.0, object1);
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContext.newContext((Object) null);
      QName qName0 = new QName("/D`", "/D`");
      Locale locale0 = Locale.CANADA;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionBoolean((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.getArgumentCount();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.functionLocalName((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int int0 = 22;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3084, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(29, (Expression[]) null);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction2.getArgumentCount();
      assertEquals(29, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      coreOperationAnd0.toString();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.computeContextDependent();
      int int0 = new Integer(24);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-621), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) coreOperationAnd0;
      expressionArray2[1] = (Expression) coreOperationAnd0;
      expressionArray2[2] = (Expression) coreOperationAnd0;
      expressionArray2[3] = (Expression) coreOperationAnd0;
      expressionArray2[4] = (Expression) coreOperationAnd0;
      expressionArray2[5] = (Expression) coreOperationAnd0;
      expressionArray2[6] = (Expression) coreOperationAnd0;
      expressionArray2[7] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, expressionArray1[6]);
      expressionArray2[8] = (Expression) coreOperationDivide0;
      Step step1 = new Step((-621), nodeNameTest0, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step(3036, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<;f=z@Z%=v`2eWjt");
      Step step3 = new Step((-3829), processingInstructionTest0, expressionArray2);
      stepArray0[3] = step3;
      Step step4 = new Step(2151, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1549, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2151);
      Step step6 = new Step(2741, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-4030), nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(700, nodeNameTest0, expressionArray2);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray1, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, expressionArray2[1]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionPath0, expressionArray1[2]);
      expressionArray0[2] = (Expression) coreOperationDivide1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-621), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 32;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-after(null, null)");
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(childContext0, basicNodeSet0);
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      VariableReference variableReference0 = new VariableReference((QName) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      coreFunction1.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(evalContextArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false($null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction((-615), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      QName qName0 = new QName("", (String) null);
      Locale locale0 = new Locale("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, decimalFormat0, nodePointer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.toString();
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[2] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(evalContextArray0[7]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionString((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray1);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction1.functionNamespaceURI((EvalContext) null);
      Object object0 = coreFunction1.functionCeiling((EvalContext) null);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1474), (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[ProcessingInstruction: ");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(namespaceContext0, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, processingInstructionTest0, true);
      coreFunction0.functionNumber(precedingOrFollowingContext0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 7;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      VariableReference variableReference0 = new VariableReference((QName) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false($null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("/D`", "/D`");
      Locale locale0 = Locale.CANADA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationSubtract0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      Locale locale1 = Locale.TAIWAN;
      locale0.getDisplayCountry(locale1);
      coreOperationSubtract0.compute((EvalContext) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionName(evalContext0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = coreFunction0.computeValue(evalContext0);
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.functionTrue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("starts-with", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      Step step0 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2950, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(39, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1019, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(39, expressionArray0);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      coreFunction1.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      QName qName0 = new QName("local-name", "local-name");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lang()");
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, processingInstructionTest0);
      RootContext rootContext0 = ancestorContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction1.functionLang(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) coreOperationAnd0;
      expressionArray2[1] = (Expression) coreOperationSubtract0;
      expressionArray2[2] = (Expression) coreOperationAnd0;
      expressionArray2[4] = (Expression) coreOperationSubtract0;
      expressionArray2[5] = (Expression) coreOperationSubtract0;
      expressionArray2[7] = (Expression) coreOperationSubtract0;
      expressionArray2[8] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), , null, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      QName qName0 = new QName("Vg/tWk", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      int int0 = 2191;
      Expression[] expressionArray0 = new Expression[1];
      QName qName1 = new QName("Vg/tWk");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = null;
      expressionArray0[1] = null;
      CoreFunction coreFunction0 = new CoreFunction(1226, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(1399, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      QName qName0 = new QName("K(cZCjsl");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, processingInstructionTest0);
      coreFunction1.functionString(ancestorContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("id", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionBoolean((EvalContext) null);
      coreFunction0.functionNot((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-4926), expressionArray1);
      coreFunction1.functionCeiling((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4926()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationNotEqual0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(19, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(29, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2456));
      Step step2 = new Step(2159, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(296, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      Step step4 = new Step(1, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(2378, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      Integer integer0 = new Integer((-1474));
      QName qName0 = new QName("Invalid argument type for 'sum': ", "]");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, integer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: Invalid argument type for 'sum': :]
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionRound((EvalContext) null);
      coreFunction0.functionBoolean((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jdom.Element");
      EvalContext evalContext0 = null;
      coreOperationSubtract0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      coreOperationAnd0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(51, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      int int0 = 19;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(378, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(378, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      step0.toString();
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      Constant constant0 = new Constant("Cannot compare pointers that do not belong to the same tree: '");
      expressionArray0[1] = (Expression) constant0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(378, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, coreOperationNotEqual0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.functionNull((EvalContext) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.functionNull((EvalContext) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      coreFunction1.getFunctionName();
      coreFunction1.computeContextDependent();
      coreFunction1.toString();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(200, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(200, expressionArray0);
      coreFunction1.iteratePointers((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) variableReference0;
      CoreFunction coreFunction2 = new CoreFunction(6, expressionArray1);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction3 = new CoreFunction(6, expressionArray0);
      coreFunction3.getArg3();
      coreFunction1.getArg2();
      assertEquals(200, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      int int0 = 6;
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionRound((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1716, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      Locale locale0 = Locale.FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, coreFunction0, locale0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = 15;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[=*pI>0o");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction((-845), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-3866), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      CoreFunction coreFunction1 = new CoreFunction(2204, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.Path", "org.apache.commons.jxpath.ri.compiler.Path");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      Step step0 = new Step(1830, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(1830, expressionArray0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreFunction0, expressionArray0[1]);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1830, expressionArray1);
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-30), expressionArray0);
      coreFunction0.getArg1();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, (Expression) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, coreOperationEqual0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-30()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionPath0);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationAdd0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[5] = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[1], expressionArray1[2]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionArray1[2]);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-2485), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationSubtract0, expressionArray0, (Step[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationSubtract0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationAdd0, expressionPath1);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression expression0 = null;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.functionCeiling((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(1103, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, variableReference0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(3196, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[2]);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(predicateContext0, (NodeTest) null, true);
      // Undeclared exception!
      coreFunction0.functionFalse(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Expression[] expressionArray0 = new Expression[3];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(27, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionPath0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, expressionPath0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      QName qName0 = new QName("Fbi%Hk$KI:uKvpWI", "Fbi%Hk$KI:uKvpWI");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, extensionFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationEqual0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, (Step[]) null);
      QName qName1 = new QName("vw");
      CoreFunction coreFunction0 = new CoreFunction(39, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = null;
      expressionArray0[1] = null;
      expressionArray0[2] = null;
      expressionArray0[3] = null;
      expressionArray0[4] = null;
      expressionArray0[5] = null;
      expressionArray0[6] = null;
      expressionArray0[7] = null;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = null;
      int int0 = 28;
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, expressionPath0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, expressionPath0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      coreOperationUnion0.computeContextDependent();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(220, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(10, (Expression[]) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNamespaceURI(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot compare pointers that do not belong to the same tree: '");
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      EvalContext evalContext1 = null;
      CoreFunction coreFunction1 = new CoreFunction(4, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[1] = (Expression) coreOperationUnion1;
      CoreFunction coreFunction0 = new CoreFunction((-2201), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = null;
      expressionArray0[1] = null;
      CoreFunction coreFunction0 = new CoreFunction(1226, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = null;
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction2 = new CoreFunction((-546), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("YrR<Q-R&");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      CoreFunction coreFunction2 = new CoreFunction(93, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      EvalContext evalContext0 = null;
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "lang");
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName1);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreOperationEqual0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationEqual0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreOperationEqual0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, predicateContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, true, nodeNameTest0);
      UnionContext unionContext0 = new UnionContext(ancestorContext0, (EvalContext[]) null);
      EvalContext evalContext1 = rootContext0.getConstantContext(unionContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[1]);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, coreOperationGreaterThan0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_;$y2c@px#DXt\"=*&1");
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, locationPath0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.computeContextDependent();
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1458));
      Step step0 = new Step(16, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-1226), nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-1226), nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step((-1458), nodeTypeTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-508), nodeTypeTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(10, nodeTypeTest0, (Expression[]) null);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, nodeTypeTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(attributeContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 26;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      coreFunction0.getFunctionName();
      boolean boolean0 = false;
      QName qName0 = new QName("ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-546), expressionArray0);
      coreFunction0.functionTrue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-546()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      QName qName0 = new QName("fWVO]\"$J?A4lC");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray1);
      coreFunction0.functionName((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(1226, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1226()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction1, nameAttributeTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, (Step[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      expressionPath0.createContextForStep(predicateContext0, 27, nodeTypeTest0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("true()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true()");
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      int int0 = 8;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      UnionContext unionContext0 = new UnionContext(predicateContext0, (EvalContext[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1833, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1833, expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot compare pointers that do not belong to the same tree: '");
      CoreFunction coreFunction2 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cannot compare pointers that do not belong to the same tree: '");
      CoreFunction coreFunction3 = new CoreFunction(2, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[1] = (Expression) coreOperationUnion1;
      CoreFunction coreFunction0 = new CoreFunction((-8), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionPath0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, expressionPath0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("starts-with(null, null, null, null, null, null, null, null)");
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1833, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1833, expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot compare pointers that do not belong to the same tree: '");
      CoreFunction coreFunction2 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      QName qName0 = new QName("string-length");
      JXPathContext.newContext((Object) null);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      int int0 = coreFunction1.getFunctionCode();
      assertEquals(28, int0);
      
      QName qName1 = new QName("string-length");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      coreFunction1.getArg3();
      coreFunction0.getArg3();
      assertEquals((-4), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1975);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      attributeContext0.getContextNodeList();
      nodeTypeTest0.toString();
      coreFunction0.functionStringLength(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], coreOperationLessThanOrEqual0);
      QName qName0 = new QName("> g\"gG<,zVPX+|k5p\"Q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((byte)6, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((byte)13, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VJ");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((byte)6, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("true()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true()");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-4), expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction1, coreOperationEqual0);
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",\"\"RfPVr2");
      Step step0 = new Step((-4), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-4), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1411, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(14, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1887, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1411, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps((EvalContext) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext1, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-3866), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      PredicateContext predicateContext0 = new PredicateContext(evalContextArray0[1], expressionArray0[0]);
      evalContextArray0[2] = (EvalContext) predicateContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, (NodeSet) null);
      CoreFunction coreFunction1 = new CoreFunction(95, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-537), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionKey(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-537()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationSubtract0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-5323), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[5] = expression0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationUnion1);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, expressionArray0[4]);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationSubtract0, expressionArray0[7]);
      expressionArray0[8] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction1 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[0], coreOperationNegate0);
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      Constant constant0 = new Constant("Cannot create collection of type: ");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, constant0);
      CoreFunction coreFunction3 = new CoreFunction(2134, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction4 = new CoreFunction((-4), expressionArray0);
      coreFunction4.iteratePointers((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction4.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4()(-org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 mod org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 - org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005 | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006) | (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000009) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000010), org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003 - org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004 > org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008) * (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006), (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004) * org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000009)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("> g\"gG<,zVPX+|k5p\"Q");
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-3866), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      PredicateContext predicateContext0 = new PredicateContext(evalContextArray0[1], expressionArray0[0]);
      evalContextArray0[2] = (EvalContext) predicateContext0;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionPath0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, expressionPath0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationNegate0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.toString();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("starts-with(null, null, null, null, null, null, null, null)");
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      int int0 = (-3866);
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3866), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-4), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction1, coreFunction2);
      CoreFunction coreFunction3 = new CoreFunction((-4), expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction3, coreOperationEqual0);
      CoreFunction coreFunction4 = new CoreFunction(14, expressionArray0);
      coreFunction0.iteratePointers((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("R");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction3.functionNamespaceURI(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.toString();
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-3866), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      PredicateContext predicateContext0 = new PredicateContext(evalContextArray0[1], expressionArray0[0]);
      evalContextArray0[2] = (EvalContext) predicateContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      QName qName0 = new QName("true()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "true()");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-4), expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction1, coreOperationEqual0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      coreFunction0.iteratePointers((EvalContext) null);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction3 = new CoreFunction(10, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionPath0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, expressionPath0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationNegate0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.toString();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("key(null, null, null, null, null, null, null, null)");
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-537), expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-5323), expressionArray0);
      coreFunction1.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "null()");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("null()");
      CoreFunction coreFunction2 = new CoreFunction((-537), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], coreOperationLessThanOrEqual0);
      QName qName0 = new QName("> g\"gG<,zVPX+|k5p\"Q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = (-510);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-510), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-510()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNegate0, coreOperationNegate0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Constant constant1 = new Constant(double0);
      expressionArray0[1] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, coreOperationLessThan0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step((-2430), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2430), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-2430), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationAdd0);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2430), expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext0 = new UnionContext(attributeContext0, (EvalContext[]) null);
      PredicateContext predicateContext0 = new PredicateContext(unionContext0, nameAttributeTest0);
      // Undeclared exception!
      coreFunction0.functionKey(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-4), expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction1, coreOperationEqual0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Expression expression0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-725), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(ororg.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreOperationEqual0);
      QName qName0 = new QName("string-length");
      JXPathContext.newContext((Object) null);
      CoreFunction coreFunction1 = new CoreFunction((-4345), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionPath0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, expressionPath0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationNegate0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("key(null, null, null, null, null, null, null, null)");
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte) (-1), (Expression[]) null);
      QName qName0 = new QName("hM4yh3-");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = (-537);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-537), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-537()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte) (-1);
      byte byte0 = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-1), (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((byte)6, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("VJ");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int int0 = (-537);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-537), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-537()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1733, (Expression[]) null);
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1733);
      Step step0 = new Step(3678, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      stepArray0[3] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionLast(namespaceContext0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1733()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-4), expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction1, coreOperationEqual0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      coreFunction0.iteratePointers((EvalContext) null);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction2.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-537), expressionArray0);
      coreFunction0.args = expressionArray0;
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("MB", "~W/nc;b+,{Li");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CANADA;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)112;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((byte) (-119), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-119()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(88, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodePointer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte) (-1), (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("hM4yh3-");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      int int0 = (-2672);
      Expression[] expressionArray0 = new Expression[0];
      int int1 = 3;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-537), expressionArray0);
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("MB", "~W/nc;b+,{Li");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.CANADA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, locale0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, processingInstructionTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) rootContext1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-537()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1733, (Expression[]) null);
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1733);
      Step step0 = new Step(3678, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      Step step3 = new Step(1252, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeTypeTest0);
      coreFunction0.functionPosition(namespaceContext0);
      assertEquals(1733, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(28, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte)11;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(ororg.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionPath0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, expressionPath0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationNegate0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("key(null, null, null, null, null, null, null, null)");
      NodeNameTest nodeNameTest1 = new NodeNameTest((QName) null, "5J");
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, nodeNameTest1);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, coreOperationAdd0);
      QName qName0 = new QName("sum", "sum");
      CoreFunction coreFunction0 = new CoreFunction(1121, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1121()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      QName qName0 = new QName("", "?(ZV,Ob0yv");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-2156), (Expression[]) null);
      coreFunction1.getArgumentCount();
      assertEquals((-2156), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(2741, (Expression[]) null);
      coreFunction1.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "normalize-space");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction2741()()");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], coreOperationLessThanOrEqual0);
      QName qName0 = new QName("> g\"gG<,zVPX+|k5p\"Q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      int int0 = (-4);
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreOperationEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationEqual0);
      QName qName0 = new QName("string-length");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
      JXPathContext.newContext((Object) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], coreOperationLessThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationGreaterThanOrEqual1);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[1]);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, locationPath0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("namespace-uri", "namespace-uri");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("namespace-uri");
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(2690, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2690()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005) + org.apache.commons.jxpath.ri.compiler.Constant@0000000006 + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000007, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 >= org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, $namespace-uri:namespace-uri, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002, 'namespace-uri', (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) mod org.apache.commons.jxpath.ri.compiler.Constant@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1733, (Expression[]) null);
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1733);
      Step step0 = new Step(3678, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      Step step3 = new Step(1252, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeTypeTest0);
      Object object0 = coreFunction0.functionLast(namespaceContext0);
      assertEquals(1, namespaceContext0.getPosition());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1496, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, coreOperationGreaterThan0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      coreFunction0.getArg1();
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Short short0 = new Short((short) (-59));
      Constant constant0 = new Constant(short0);
      expressionArray0[1] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationLessThanOrEqual0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1734, expressionArray0);
      coreFunction0.getFunctionCode();
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("", "new");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2457);
      Step step0 = new Step(1455, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1455, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1455, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[5]);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[4]);
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1455, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionLast(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("", "?(ZV,Ob0yv");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(3, int0);
      assertEquals(10, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      coreOperationNotEqual0.equal(coreOperationOr0, expressionArray0[0]);
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationOr1);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1790), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray0[3]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[3], (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1790()(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) != (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002) > (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2854, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(63, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(ororg.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      Step step0 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(918, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(64, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1387, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(25, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(25, (NodeTest) null, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationMultiply0, coreOperationGreaterThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationEqual1;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      expressionArray0[4] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(918, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction918()", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("b' w{ByEn4-%>pPa");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.RootContext");
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(832, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) variableReference0;
      Step step4 = new Step(9, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("normalize-space");
      Step step5 = new Step(9, processingInstructionTest1, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-537), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-727), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], coreOperationLessThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationGreaterThanOrEqual1);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2672), expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2672()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationNegate1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], coreOperationAdd0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[5], coreOperationNegate0);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1275, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1275, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = (EvalContext) ancestorContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) ancestorContext0;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, processingInstructionTest0, false, false);
      expressionPath0.createContextForStep(childContext0, 1275, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(-org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005) + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 + (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000007) + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008) + org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000009, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 <= org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004, -(org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000009, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 > org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000007) * org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1710), (Expression[]) null);
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("MB", "MB");
      Locale locale0 = Locale.US;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("MB");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, processingInstructionTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      EvalContext evalContext0 = rootContext0.getConstantContext(rootContext1);
      coreFunction0.functionFalse(evalContext0);
      // Undeclared exception!
      try { 
        nodePointer0.getPointerByID(jXPathContextReferenceImpl0, "MB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      VariableReference variableReference0 = new VariableReference((QName) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], variableReference0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      boolean boolean0 = false;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationNegate0, coreOperationNegate0);
      expressionArray1[1] = (Expression) coreOperationDivide1;
      coreOperationDivide0.args = expressionArray1;
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }
}
