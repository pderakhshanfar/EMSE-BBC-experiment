/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:43:10 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[8];
      Byte byte0 = new Byte((byte)2);
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationAnd1;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2073, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(478, expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction478()()");
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("TTTXq");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer1);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'TTTXq'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ePn\"#'x\"[I NA");
      Step step0 = new Step(2073, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationMod0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, float0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.iteratePointers(evalContext0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.computeValue(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 30;
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate('Uqz3)L $+(TK,', 'Uqz3)L $+(TK,', 'Uqz3)L $+(TK,')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.VariablePointerFactory$VariableContextWrapper");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getConstantContext(variablePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'org.apache.commons.jxpath.ri.model.VariablePointerFactory$VariableContextWrapper'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("lang");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("string", "string");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(4, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      Expression expression1 = coreFunction0.getArg3();
      expressionArray0[6] = expression1;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[7] = (Expression) locationPath1;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("true", "|");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step((-3525), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      Step step2 = new Step(935, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1661), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2133), (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(82, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(935, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray2[1] = (Expression) variableReference0;
      expressionArray2[2] = (Expression) coreOperationNegate0;
      Step step8 = new Step((-3525), (NodeTest) null, expressionArray2);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray2);
      expressionArray0[1] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperation");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionPath0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      expressionArray0[4] = (Expression) expressionPath1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationOr0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-3525), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1052), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "NaN0");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "NaN0");
      QName qName0 = new QName("NaN0");
      Locale locale0 = new Locale("NaN0", "NaN0");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "NaN0", locale0);
      nodePointer0.getValuePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: NaN0
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("NaNNaN", "NaNNaN");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1026), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2135), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1026), nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-2135), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1909), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2135), nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-1026), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Constant constant0 = new Constant("k}A#9FPh-oI$S4Gko");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("name", "name");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      Double double0 = new Double(2599.69238);
      Constant constant0 = new Constant(double0);
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-535), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("VW.59t!m>", "VW.59t!m>");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], coreOperationLessThanOrEqual0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-5751), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[4] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(34, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(3273, expressionArray0);
      // Undeclared exception!
      coreFunction2.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(116, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" Size: ");
      Step step0 = new Step((-977), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName(" Size: ", " Size: ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, coreOperationLessThan0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(1135, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("u,m8;RaH]on25j~");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Float float0 = new Float((-1065.20098370092));
      Constant constant1 = new Constant(float0);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray1);
      QName qName0 = new QName("pwqcMa2%BB<>&'9z|4");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionContains(attributeContext0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionName();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()");
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      initialContext0.setPosition((-1114));
      coreFunction0.functionLast(initialContext0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.getFunctionName();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()");
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      QName qName0 = new QName("unknownFunction-1114()", "unknownFunction-1114()");
      Locale locale0 = Locale.CANADA_FRENCH;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction1, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      InitialContext initialContext0 = (InitialContext)rootContext1.getConstantContext(rootContext0);
      InitialContext initialContext1 = (InitialContext)expressionPath0.evalSteps(initialContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(initialContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2199, expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction2199()()");
      QName qName0 = new QName("unknownFunction2199()()");
      Locale locale0 = Locale.KOREA;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "unknownFunction2199()()", locale0);
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newChildNodePointer(beanPointer0, qName0, coreFunction0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer1);
      RootContext rootContext1 = rootContext0.getRootContext();
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: unknownFunction2199()()
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      coreOperationNegate0.args = expressionArray0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(49, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant((String) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("translate", "local-name");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("*+D)+T@");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-994), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("75em8Q0ng'%7f!", "75em8Q0ng'%7f!");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, " No root element");
      Step step0 = new Step(28, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2219, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[3] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2219, expressionArray0);
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName(",]JpTIo|abs", ",]JpTIo|abs");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step(157, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2015, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-4669), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-4669), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",]JpTIo|abs");
      Step step4 = new Step(2848, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-4669), processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-495), nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(157, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-4669), expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, processingInstructionTest0, true);
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionLast(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1177), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("0");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], coreOperationLessThan0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, coreOperationLessThan0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long(576320014815068158L);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("NaN0", "NaN0");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, locationPath0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], coreOperationLessThanOrEqual0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Uvg}_#L=Oepl");
      Step step0 = new Step(195, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1780, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[0];
      Step step3 = new Step(30, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(122880, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(14, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-195), processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(71, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(195, processingInstructionTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      QName qName0 = new QName("Uvg}_#L=Oepl");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(":j$.V(`~cImJeCbfkH");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[3], expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-3314), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      coreFunction0.functionContains((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      coreFunction0.functionStartsWith(evalContextArray0[1]);
      PredicateContext predicateContext0 = new PredicateContext(evalContextArray0[1], expressionArray0[0]);
      coreFunction0.computeValue(evalContextArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(evalContextArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      coreFunction0.functionContains((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      PredicateContext predicateContext0 = new PredicateContext(unionContext0, coreFunction0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant constant0 = new Constant("w6#wC$7Phb!s0%D[");
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang('w6#wC$7Phb!s0%D[', 'w6#wC$7Phb!s0%D[', null, null, 'w6#wC$7Phb!s0%D[', 'w6#wC$7Phb!s0%D[', 'w6#wC$7Phb!s0%D[')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-2270), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(44, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction44()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Integer integer0 = new Integer(28);
      Constant constant0 = new Constant(integer0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.computeContextDependent();
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[8];
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) nameAttributeTest0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray1[2]);
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual0;
      Step step0 = new Step(49, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(49, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(12, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(1929, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(32);
      Step step4 = new Step((-830), nodeTypeTest1, expressionArray1);
      stepArray0[4] = step4;
      NodeTypeTest nodeTypeTest2 = new NodeTypeTest(12);
      Step step5 = new Step(49, nodeTypeTest2, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(49, nodeTypeTest2, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-1443), nodeTypeTest1, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      Long long0 = new Long((-1443));
      Constant constant0 = new Constant(long0);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr1;
      Constant constant1 = new Constant(long0);
      expressionArray0[6] = (Expression) constant1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[3], expressionArray0[6]);
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd((Expression[]) null);
      expressionArray0[8] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction((-1909), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(-org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 div org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float((float) 44);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, constant0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(44, expressionArray0);
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[6] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, constant0);
      expressionArray1[7] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[8] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, processingInstructionTest0);
      expressionPath0.createContextForStep(parentContext0, 0, processingInstructionTest0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      coreFunction0.functionSubstringAfter((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(49, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      coreFunction0.functionSubstringBefore(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("");
      Constant constant1 = new Constant("e:2x;'I#Gy}w:$Tj2m");
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      constant1.toString();
      coreFunction0.computeValue((EvalContext) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "following-sibling");
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("\t");
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("text");
      Step step0 = new Step(2476, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2476, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], (Expression) null);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2476, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float((float) 30);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      Integer integer0 = new Integer(1281);
      QName qName0 = new QName("zB)?%r7fBFGXM");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[0], (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, integer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Float
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 21;
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false('Uqz3)L $+(TK,', 'Uqz3)L $+(TK,', null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 49;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(49, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(49, expressionArray0);
      coreFunction1.functionSubstringAfter((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction((-2995), expressionArray0);
      coreFunction2.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2995()(-org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 div org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-1645), (NodeTest) null, expressionArray0);
      Step step1 = new Step((-1645), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath1;
      Constant constant0 = new Constant("0t8t:=mQyBlvP+q0");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) locationPath1;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) locationPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationOr0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1645), expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, true, (NodeTest) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(descendantContext0, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) descendantContext0;
      evalContextArray0[1] = (EvalContext) nodeSetContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) nodeSetContext0;
      evalContextArray0[4] = null;
      evalContextArray0[5] = (EvalContext) parentContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, (NodeTest) null, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(evalContextArray0[6]);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[25];
      byteArray0[19] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)67;
      byteArray0[5] = (byte)23;
      byteArray0[6] = (byte) (-112);
      byteArray0[8] = (byte) (-28);
      Constant constant0 = new Constant("contains");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("Q7t+jAqu1zF(RA");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "bPE<rClj6UIj4x");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction((byte)23, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number('contains', 'contains')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate1, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("7%]H$", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2292, expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName((String) null, "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.args = expressionArray0;
      expressionArray0[0] = (Expression) extensionFunction0;
      Short short0 = new Short((short)32767);
      Constant constant0 = new Constant(short0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2073, expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(2073, expressionArray0);
      coreFunction1.iteratePointers((EvalContext) null);
      coreFunction1.functionName((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("{");
      Step step0 = new Step((-3839), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(41, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[7], expressionArray0[6]);
      expressionArray0[8] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(3603, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, true, (NodeTest) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(descendantContext0, processingInstructionTest0, true);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.functionSum((EvalContext) null);
      coreFunction0.functionLocalName((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(49, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-2995), expressionArray0);
      coreFunction2.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction49()(-org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 div org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(105, expressionArray0);
      coreFunction0.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "unknownFunction105()()", (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
      QName qName0 = new QName("(A28xpm +&24$n");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, nodeNameTest0);
      ancestorContext0.getCurrentNodePointer();
      JXPathContext.newContext((Object) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("*'", "*'");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      AncestorContext ancestorContext0 = new AncestorContext(unionContext0, true, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction((-544), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-544()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      constant1.toString();
      coreFunction0.computeValue((EvalContext) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, (String) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionContains(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      coreFunction0.isContextDependent();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(689, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationMod0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.computeContextDependent();
      Object object0 = null;
      JXPathContext.newContext((Object) null);
      QName qName0 = null;
      String string0 = null;
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[8];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray1[0] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(constant0);
      expressionArray1[1] = (Expression) coreOperationNegate1;
      QName qName0 = new QName(" _,NtRmX#lBkHF|");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationUnion0);
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(881, expressionArray1);
      expressionArray1[5] = (Expression) coreFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[5], expressionArray1[3]);
      expressionArray1[6] = (Expression) coreOperationSubtract0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[0], expressionArray1[1]);
      expressionArray1[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray1);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1324);
      Step step0 = new Step((-461), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray1, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionPath0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationNotEqual0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[4], coreOperationAnd0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(1504, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, coreOperationGreaterThan0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant constant0 = new Constant("$key");
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction0.computeContextDependent();
      coreFunction0.functionNot(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, decimalFormat0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, , )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("true", "|");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step((-3525), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      Step step2 = new Step(964, (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1661), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2133), (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(82, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(964, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray2[1] = (Expression) variableReference0;
      expressionArray2[2] = (Expression) coreOperationNegate0;
      Step step8 = new Step((-3525), (NodeTest) null, expressionArray2);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray2);
      expressionArray0[1] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperation");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionPath0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      expressionArray0[4] = (Expression) expressionPath1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationOr0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-3525), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-311), expressionArray0);
      coreFunction0.computeContextDependent();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      int int0 = 3;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count('', org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 >= org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002, '', '', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Constant constant0 = new Constant(")!&jEkut(Dd)+H");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(')!&jEkut(Dd)+H')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant constant0 = new Constant(")!&jEkut(Dd)+H");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      BasicVariables basicVariables0 = new BasicVariables();
      coreFunction0.functionName((EvalContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(17);
      nodeTypeTest0.toString();
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionName(namespaceContext0);
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction((-543), (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.getArgumentCount();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("s#<\"yNwC");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-281), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(146, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      coreFunction1.getFunctionName();
      CoreFunction coreFunction3 = new CoreFunction(9, expressionArray0);
      coreFunction3.computeContextDependent();
      CoreFunction coreFunction4 = new CoreFunction(65537, expressionArray0);
      coreFunction2.computeContextDependent();
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Constant constant0 = new Constant(")!&jEkut(Dd)+H");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction1.toString();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("true");
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("a%{&+26N5B=Lf");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1115), expressionArray0);
      coreFunction0.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "k&J5kx@[t[,X0l");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(ancestorContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, extensionFunction0);
      // Undeclared exception!
      coreFunction0.functionStringLength(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Constant constant0 = new Constant(")!&jEkut(Dd)+H");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(114, expressionArray0);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreFunction0.functionCount((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("@EE8!!", ")!&jEkut(Dd)+H");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2137), expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[2] = null;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("@EE8!!");
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction((-1159), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("{", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(3363, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3363, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(26, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3363, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(82);
      Step step4 = new Step(26, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(82, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-401), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(26, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(26, nodeNameTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, coreOperationDivide0);
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, coreOperationDivide0);
      expressionArray1[2] = (Expression) coreOperationDivide1;
      expressionArray1[3] = (Expression) locationPath0;
      expressionArray1[4] = (Expression) locationPath0;
      expressionArray1[5] = (Expression) locationPath0;
      expressionArray1[6] = (Expression) locationPath0;
      expressionArray1[7] = (Expression) locationPath0;
      expressionArray1[8] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(3363, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction1.toString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step(20, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1329, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(20, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1329, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2167), (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1280), (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1329, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-23));
      Step step7 = new Step((-23), nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(1329, nodeTypeTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-23), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-2895), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2895), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath1;
      Constant constant0 = new Constant("0t8t:=mQyBlvP+q0");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) locationPath1;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) locationPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationOr0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2895), expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, true, (NodeTest) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(descendantContext0, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) descendantContext0;
      evalContextArray0[1] = (EvalContext) nodeSetContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) nodeSetContext0;
      evalContextArray0[4] = null;
      evalContextArray0[5] = (EvalContext) parentContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, (NodeTest) null, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      coreFunction0.computeContextDependent();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl", "}~$f#E6,oN]!!^c)");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "id", variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'org.apache.commons.jxpath.ri.JXPathContextFactoryReferenceImpl:}~$f#E6,oN]!!^c)'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant constant0 = new Constant((Number) null);
      constant0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      coreFunction2.computeContextDependent();
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Constant constant0 = new Constant(")!&jEkut(Dd)+H");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("b~O39(>5cl\"5zo4Em");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(')!&jEkut(Dd)+H')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Double double0 = new Double(26);
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      Constant constant1 = new Constant("org.apache.commons.jxpath.JXPathException");
      expressionArray0[2] = (Expression) constant1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], constant1);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, (Step[]) null);
      expressionArray0[4] = (Expression) expressionPath0;
      Constant constant2 = new Constant(double0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, constant2);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, expressionArray0[4]);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("5~ucFvR");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Float float0 = new Float((double) 13);
      Constant constant1 = new Constant(float0);
      constant1.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, (Expression) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThan0);
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Constant constant0 = new Constant("\"|\"");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) coreOperationAnd0;
      expressionArray0[1] = (Expression) coreOperationAnd0;
      expressionArray0[2] = (Expression) coreOperationAnd0;
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.getArg2();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("key");
      Step step0 = new Step(1093, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Constant constant0 = new Constant(")!&jEkut(Dd)+H");
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.computeContextDependent();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionCode();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext.newContext(jXPathContext0, (Object) null);
      Object object0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionBoolean(predicateContext0);
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionNot(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionBoolean(predicateContext0);
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionRound((EvalContext) null);
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_W");
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.getFunctionName();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant constant0 = new Constant((Number) null);
      constant0.toString();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length('null', 'null', 'null', 'null', 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("{SYN^q}PclO");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[3]);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("{SYN^q}PclO");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, constant0);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], coreOperationUnion0);
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2008), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2180), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-2008), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-415), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[8] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2180), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constant0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction0.computeContextDependent();
      coreFunction0.functionFloor((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLang(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      coreFunction1.computeValue(predicateContext0);
      coreFunction1.functionNormalizeSpace(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step(802, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step1 = new Step((byte)20, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((byte)20, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1441792, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1441792, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((byte)20, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((byte)20, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((byte)20, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(802, processingInstructionTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1441792, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      constant1.toString();
      CoreFunction coreFunction1 = new CoreFunction(1604, expressionArray0);
      coreFunction1.functionConcat((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constant0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(927, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      int int0 = 1853;
      Integer integer0 = Integer.getInteger("namespace-uri", 1853);
      Constant constant0 = new Constant(integer0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      QName qName0 = new QName(" reported success creating object for path: ");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], coreOperationMod0);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(927, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, coreOperationAnd0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationUnion0, expressionArray0[3]);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id($, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000003 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, $, $, $)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 69;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(69, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      expressionArray0[2] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("rcc(e=lDc{W5($q1%");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, constant0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[2], coreOperationAnd0);
      expressionArray0[4] = (Expression) coreOperationSubtract1;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationAnd0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[5]);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, constant0);
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      expressionArray1[3] = (Expression) extensionFunction1;
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[7] = (Expression) coreOperationSubtract1;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      coreFunction1.computeContextDependent();
      coreFunction1.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      Step step0 = new Step(1, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[3]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("jxpath.debug", "org.apache.commons.jxpath.PackageFunctions");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.PackageFunctions");
      expressionArray0[4] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate1);
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate2 = new CoreOperationNegate(coreOperationNegate0);
      expressionArray0[7] = (Expression) coreOperationNegate2;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray1[0]);
      expressionArray0[8] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1030, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[4], expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionLocalName(evalContext0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[2];
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray2 = new Expression[6];
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray2[0]);
      expressionArray2[2] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray2);
      expressionArray2[3] = (Expression) coreOperationAdd0;
      expressionArray2[4] = (Expression) constant0;
      expressionArray2[5] = (Expression) constant0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("=''U8GC3nUEC@7");
      Step step0 = new Step((-1537), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(15, processingInstructionTest0, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step((-1537), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Expression[] expressionArray3 = new Expression[2];
      expressionArray3[0] = (Expression) coreOperationAdd0;
      expressionArray3[1] = (Expression) constant0;
      Step step3 = new Step(15, processingInstructionTest0, expressionArray3);
      stepArray0[3] = step3;
      Step step4 = new Step(15, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(15, processingInstructionTest0, expressionArray2);
      stepArray0[5] = step5;
      Step step6 = new Step(239, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray2, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray2);
      expressionArray1[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Constant constant0 = new Constant("#TjCJV\" f:iyJn>pF!");
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 30;
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constant0.toString();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[4], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(30, 30, 30, 30, 30, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-608), expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("l%bv");
      Step step0 = new Step((-608), processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-3782), processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-608), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(5, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-807), processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(childContext0, basicNodeSet0);
      expressionPath0.createContextForStep(nodeSetContext0, (-807), processingInstructionTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(308, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[0] = null;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("6wD`$P|U?j");
      Step step0 = new Step((-1487), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1134, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreFunction0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      processingInstructionTest0.toString();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expression0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002 != org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constant0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      Expression[] expressionArray0 = new Expression[10];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      coreFunction1.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4908, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName((String) null, "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.args = expressionArray0;
      expressionArray0[0] = (Expression) extensionFunction0;
      Short short0 = new Short((short)32767);
      Constant constant0 = new Constant(short0);
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1700), expressionArray0);
      coreFunction1.isContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constant0.toString();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionLang(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(3223, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expression0, coreOperationLessThan0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expression0, expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      constant0.toString();
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLast(initialContext0);
      coreFunction0.toString();
      coreFunction0.functionLast(initialContext0);
      coreFunction0.toString();
      coreFunction0.functionNumber(initialContext0);
      coreFunction0.toString();
      QName qName0 = new QName("unknownFunction-1114()()", "unknownFunction-1114()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction-1114()()");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ChildContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "h1<xaF#~T2,e9d7";
      Float float0 = new Float((float) (-1379));
      Constant constant0 = new Constant(float0);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2867), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2867()(-1379)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      constant0.toString();
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Constant constant0 = new Constant("()");
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLast(initialContext0);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(1975, expressionArray0);
      coreFunction1.functionNumber(initialContext0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("key");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual1, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual2 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual2;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationUnion1, expressionArray0[5]);
      expressionArray0[7] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(556, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThanOrEqual0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, nodeNameTest0);
      selfContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[2], (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "wK<?~bdE~#~c(M01";
      String string1 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2867), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2867()(30)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)53;
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant constant0 = new Constant("substring");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-16), expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("G#");
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wK<?~bdE~#~c(M01");
      int int0 = (-581);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16777216, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[0], coreOperationNotEqual0);
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationNotEqual1);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(29, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(601, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(29, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(601, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, processingInstructionTest0);
      SelfContext selfContext0 = new SelfContext(descendantContext0, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(selfContext0, processingInstructionTest0, true, true);
      // Undeclared exception!
      coreFunction0.functionNull(childContext0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat('key', 'key', 'key', 'key')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], coreOperationNegate0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, nameAttributeTest0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(4501, expressionArray0);
      expressionArray0[6] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      expressionArray0[7] = (Expression) nameAttributeTest1;
      Byte byte0 = new Byte((byte)1);
      Constant constant0 = new Constant(byte0);
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(4501, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wK<?~bdE~#~c(M01");
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      constant0.toString();
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(30)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      QName qName0 = new QName("Y@d&aP:{W");
      QName qName1 = new QName("GZ7l[c!fLe", "pKij=0pjIua,,CwG#r");
      VariableReference variableReference0 = new VariableReference(qName1);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, variableReference0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant0 = new Constant("GZ7l[c!fLe");
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction((-640), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name('key', 'key', 'key', 'key')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      expressionArray0[6] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant1 = new Constant("#.#~q-Oqc-g'");
      CoreFunction coreFunction0 = new CoreFunction((-701), expressionArray0);
      Constant constant2 = new Constant("#.#~q-Oqc-g'");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, expressionArray0[3]);
      CoreFunction coreFunction1 = new CoreFunction((-981), expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(0, 0, 0, 0, 0, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray0);
      coreFunction1.functionNamespaceURI(initialContext0);
      coreFunction1.getFunctionCode();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(726, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction2.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(236);
      Step step0 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(40, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(2631, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(236, expressionArray0);
      Constant constant0 = new Constant("");
      CoreFunction coreFunction1 = new CoreFunction((-732), expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Constant constant0 = new Constant((String) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant1 = new Constant("#.#~q-Oqc-g'");
      CoreFunction coreFunction0 = new CoreFunction(1083, expressionArray0);
      Constant constant2 = new Constant("#.#~q-Oqc-g'");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant2, coreOperationUnion0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(initialContext0, basicNodeSet0);
      coreFunction0.functionLast(nodeSetContext0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      int int0 = 63;
      CoreFunction coreFunction0 = new CoreFunction(63, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "Incorrect number of arguments: ";
      Constant constant0 = new Constant("Incorrect number of arguments: ");
      Constant constant1 = new Constant("Incorrect number of arguments: ");
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) constant1;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant1;
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring('Incorrect number of arguments: ', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000003, 'Incorrect number of arguments: ', 'Incorrect number of arguments: ', 'Incorrect number of arguments: ', 'Incorrect number of arguments: ', 'Incorrect number of arguments: ')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant1 = new Constant("#.#~q-Oqc-g'");
      CoreFunction coreFunction0 = new CoreFunction(1083, expressionArray0);
      Constant constant2 = new Constant("#.#~q-Oqc-g'");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant2, coreOperationUnion0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-921), expressionArray0);
      Constant constant0 = new Constant("");
      CoreFunction coreFunction1 = new CoreFunction(769, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(769, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreFunction2;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreFunction2;
      expressionArray1[7] = (Expression) coreFunction2;
      coreFunction2.args = expressionArray1;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-921()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      Constant constant0 = new Constant("");
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      QName qName0 = new QName("y7", "y7");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant0 = new Constant("y7");
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, $y7:y7, null, $y7:y7, $y7:y7, $y7:y7)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("");
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(1535, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("preceding");
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(1604, expressionArray0);
      coreFunction1.functionConcat((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before('Uqz3)L $+(TK,', 'Uqz3)L $+(TK,')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step(3964, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1870), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("JxFb]<.xVbd", "JxFb]<.xVbd");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step2 = new Step(684, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3964, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3964);
      Step step4 = new Step(684, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1870), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(9, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      Short short0 = new Short((short)560);
      Constant constant0 = new Constant(short0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionPath0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(3964, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest0, false, true);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("Uqz3)L $+(TK,");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      QName qName0 = new QName("Uqz3)L $+(TK,", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Uqz3)L $+(TK,");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.computeValue(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after('Uqz3)L $+(TK,', 'Uqz3)L $+(TK,')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      coreFunction0.functionNumber((EvalContext) null);
      coreFunction1.compute((EvalContext) null);
      coreFunction1.getArg1();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 and org.apache.commons.jxpath.ri.compiler.Constant@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006) and org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000008 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000009, 0, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) div (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), $, org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 or org.apache.commons.jxpath.ri.compiler.Constant@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000007 or org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000008 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000009, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006) != (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) + org.apache.commons.jxpath.ri.compiler.Constant@0000000002 + org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 + (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000006) + (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000007) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000008 + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000009, $)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("Uqz3)L $+(TK,");
      Constant constant1 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "number");
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = 82;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(82, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      nameAttributeTest0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-16), (Expression[]) null);
      Constant constant0 = new Constant("dwj5");
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1486), (Expression[]) null);
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1486()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("hjJg5 ,99");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "hjJg5 ,99");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      Float float0 = new Float((double) 551);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant constant0 = new Constant(float0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationMod0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(551, expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.getFunctionCode();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("b", "b");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant0 = new Constant("");
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Constant constant0 = new Constant("key");
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not('key', -org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, 'key', 'key', 'key', 'key')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant((String) null);
      coreOperationOr0.args = expressionArray0;
      Constant constant1 = new Constant("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant((String) null);
      CoreFunction coreFunction0 = new CoreFunction(67, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("eZDs'|");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, nameAttributeTest0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(nameAttributeTest0, coreOperationNotEqual0);
      expressionArray0[1] = (Expression) coreOperationSubtract1;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2814), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationLessThan0);
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationNotEqual0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreOperationSubtract1;
      expressionArray1[7] = (Expression) coreOperationNotEqual0;
      expressionArray1[8] = (Expression) constant0;
      Step step1 = new Step((-2814), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2814), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1387), nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("boolean");
      Step step5 = new Step(2901, processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step((-1387), processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(14, processingInstructionTest0, expressionArray1);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-2814), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[3]);
      Locale locale0 = new Locale("", "normalize-space");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
      // Undeclared exception!
      coreFunction0.functionTrue(evalContext0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, nameAttributeTest0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("n3z-XFJ|", ".Ng;z<");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[2] = null;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("n3z-XFJ|");
      expressionArray0[5] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Constant constant1 = new Constant("last");
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Expression[] expressionArray1 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray1);
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExtensionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      Constant constant0 = new Constant("");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      Locale locale0 = Locale.US;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, "", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, childContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.computeValue(rootContext0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      coreFunction1.functionRound(predicateContext0);
      coreFunction0.functionNamespaceURI(childContext0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant((String) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("m 7tdH^.t+!");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      JXPathContextReferenceImpl.allocateConditionally("", "");
      coreFunction0.functionLocalName(initialContext0);
      coreFunction0.computeValue(initialContext0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionString(initialContext0);
      coreFunction0.functionFalse(initialContext0);
      coreFunction0.functionStringLength(initialContext0);
      coreFunction0.functionPosition(initialContext0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      Constant constant0 = new Constant("_45(ii8V|K");
      CoreFunction coreFunction2 = new CoreFunction(407, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("key");
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      Constant constant0 = new Constant("key");
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-956), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray1);
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      QName qName0 = new QName("[=", "_45(ii8V|K");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      ancestorContext0.getContextNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "_45(ii8V|K", (Pointer) null);
      EvalContext evalContext1 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionString(initialContext0);
      coreFunction0.functionFalse(initialContext0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray1);
      coreFunction1.functionConcat(initialContext0);
      coreFunction0.functionName(initialContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2784, (Expression[]) null);
      Constant constant0 = new Constant("key");
      CoreFunction coreFunction1 = new CoreFunction(25, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, coreFunction0);
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-1312), expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, coreOperationEqual0);
      coreFunction0.computeValue(predicateContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1312()(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, '', -org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(197, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[0] = null;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expression0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(3180, expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationNegate0);
      Constant constant0 = new Constant("");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, expressionArray0[1]);
      CoreFunction coreFunction2 = new CoreFunction(3180, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3B/Sn/ ?[");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, expression0);
      coreFunction0.computeValue(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = (-1);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = (-1486);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3074);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("b", "b");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Constant constant0 = new Constant("b");
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(2956, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2956()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      Constant constant0 = new Constant("\": ");
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationUnion0);
      int int0 = (-2958);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-16), (Expression[]) null);
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(initialContext0, basicNodeSet0);
      coreFunction0.functionLast(nodeSetContext0);
      JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) initialContext0);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)103;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(evalContext0, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction((-1973), expressionArray0);
      coreFunction0.functionLast(nodeSetContext0);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionString(evalContext0);
      coreFunction0.functionFalse(nodeSetContext0);
      CoreFunction coreFunction1 = new CoreFunction((-188), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-188()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getFunctionName();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CoreFunction coreFunction0 = new CoreFunction((-1486), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1486()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[4];
      Constant constant1 = new Constant("a4");
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, coreOperationAdd0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationGreaterThan0);
      Constant constant0 = new Constant("dwj5");
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("key");
      CoreFunction coreFunction0 = new CoreFunction(1836, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      CoreFunction coreFunction0 = new CoreFunction((-1486), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(initialContext0, basicNodeSet0);
      coreFunction0.functionLast(nodeSetContext0);
      InitialContext initialContext1 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionString(initialContext1);
      coreFunction0.functionFalse(initialContext1);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray1);
      coreFunction1.functionConcat(initialContext1);
      coreFunction1.computeValue(initialContext1);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound(initialContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()(unknownFunction-1114()(), unknownFunction-1114()(), unknownFunction-1114()(), unknownFunction-1114()(), unknownFunction-1114()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      Constant constant0 = new Constant("4S");
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(9, (Expression[]) null);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1097), expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1097()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("Not a collection: ");
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, coreOperationUnion0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, (Expression) null);
      int int0 = 744;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(744);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3~Q*Cm* sq0T@c1]w['");
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3~Q*Cm* sq0T@c1]w['");
      Step step0 = new Step(4023, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(4023, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4023);
      Step step2 = new Step((-725), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray1, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(4023, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      QName qName1 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[4];
      Constant constant1 = new Constant("a4");
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      Double double0 = Expression.ZERO;
      Constant constant2 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()('a4', '', null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionString(initialContext0);
      coreFunction0.functionFalse(initialContext0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray1);
      coreFunction1.functionConcat(initialContext0);
      coreFunction1.computeValue(initialContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()(unknownFunction-1114()(), unknownFunction-1114()(), unknownFunction-1114()(), unknownFunction-1114()(), unknownFunction-1114()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, coreOperationMultiply0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("", "`]a8]K9GL>}-O@p");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2617);
      Step step0 = new Step(159, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(159, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(22);
      Step step2 = new Step(2617, nodeTypeTest1, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, constant0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      Constant constant1 = new Constant("");
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(159, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest1, false, true);
      // Undeclared exception!
      coreFunction0.functionSum(childContext0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "string-length");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("1\"H)=>>!eF#dlab/");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1478));
      Step step0 = new Step((-1478), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1478), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("1\"H)=>>!eF#dlab/");
      expressionArray0[4] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1478), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("|");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      coreFunction0.toString();
      JXPathContext.newContext((Object) constant0);
      QName qName0 = new QName("Zw>xUr}I3:!K");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction50()('|', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreOperationAdd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, coreOperationLessThan0);
      Constant constant0 = new Constant("}}?");
      coreOperationGreaterThanOrEqual0.isContextDependent();
      CoreFunction coreFunction2 = new CoreFunction((-1877), expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationGreaterThanOrEqual0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, (Expression) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction-1114()()");
      JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionString(initialContext0);
      coreFunction0.functionFalse(initialContext0);
      coreFunction0.functionNull(initialContext0);
      coreFunction0.functionNumber(initialContext0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("key");
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 or org.apache.commons.jxpath.ri.compiler.Constant@0000000003, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), 'key')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(445, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, coreFunction0);
      expressionArray1[0] = (Expression) coreOperationEqual0;
      constant0.toString();
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-1312), expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      coreFunction2.functionRound((EvalContext) null);
      coreFunction0.computeValue(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1312()(org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, '', -org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionPath0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("lang");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, coreOperationAnd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationSubtract0, variableReference0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant0 = new Constant("");
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1530), (Expression[]) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      VariablePointer variablePointer1 = new VariablePointer(qName0);
      CoreFunction coreFunction1 = new CoreFunction((-1530), (Expression[]) null);
      Integer integer0 = new Integer(Integer.MIN_VALUE);
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionName();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContext.newContext((Object) "unknownFunction-1114()()");
      QName qName0 = new QName("Zw>xUr}I3:!K");
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CoreFunction coreFunction0 = new CoreFunction((-1486), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1486()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Constant constant0 = new Constant("*(J7vhaJhZu&");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationNegate0);
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, expressionArray0[1]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreOperationNegate0);
      Constant constant1 = new Constant("7H~$@nci6");
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("parent::");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("Not a collection: ");
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, coreOperationUnion0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, (Expression) null);
      Constant constant1 = new Constant("Not a collection: ");
      CoreFunction coreFunction1 = new CoreFunction(2943, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2943()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], coreOperationGreaterThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[3], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      Constant constant1 = new Constant("");
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-365), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.toString();
      JXPathContext.newContext((Object) "unknownFunction-1114()()");
      QName qName0 = new QName("Zw>xUr}I3:!K");
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      coreFunction1.functionNull(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray0);
      coreFunction0.getFunctionCode();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("U\"s(");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      coreFunction0.functionNull((EvalContext) null);
      coreFunction1.iteratePointers((EvalContext) null);
      coreFunction1.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1486), (Expression[]) null);
      coreFunction0.toString();
      JXPathContext.newContext((Object) null);
      QName qName0 = new QName("round");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      QName qName0 = new QName("()", "()");
      QName qName1 = new QName("]<9ZlVu/");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("sum");
      Constant constant1 = new Constant("sum");
      Double double0 = Expression.ZERO;
      Constant constant2 = new Constant(double0);
      CoreFunction coreFunction1 = new CoreFunction(21856255, (Expression[]) null);
      coreFunction0.getFunctionName();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      String string0 = "!=";
      Constant constant0 = new Constant("!=");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, expressionArray0[0]);
      coreOperationEqual0.toString();
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count('!=', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant0 = new Constant("m7KVU\"");
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      constant0.iterate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      int int0 = 2898;
      CoreFunction coreFunction0 = new CoreFunction(2898, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      Constant constant0 = new Constant((String) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationNegate0);
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("q,t");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "q,t");
      Step step0 = new Step(18, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      step1.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, coreOperationNegate1);
      Constant constant1 = new Constant((String) null);
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("q,t");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction2 = new CoreFunction(18, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, constant0);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Constant constant1 = new Constant("");
      expressionArray0[2] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray1);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      int int0 = 9;
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("|");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      Constant constant1 = new Constant("|");
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "|");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("|");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      Constant constant1 = new Constant("|");
      expressionArray0[7] = (Expression) constant1;
      coreOperationGreaterThanOrEqual0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction50()('|', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000005) + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 + (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000007) + org.apache.commons.jxpath.ri.compiler.Constant@0000000008, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003 >= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, -(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000005 != org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, '|')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("|");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      Constant constant1 = new Constant("|");
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(378, expressionArray1);
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(1, int0);
      assertEquals(378, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      QName qName1 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[4];
      Constant constant1 = new Constant("following-sibling::");
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      Double double0 = Expression.ZERO;
      Constant constant2 = new Constant(double0);
      expressionArray0[2] = (Expression) constant2;
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()('following-sibling::', '', 0, $:)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("|");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationNegate0);
      Expression[] expressionArray1 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray1);
      coreFunction0.getArg3();
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], expressionArray1[1]);
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000005 != org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000007))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("|");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      coreOperationGreaterThanOrEqual0.isContextDependent();
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      Constant constant1 = new Constant("|");
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0Z8XW L'");
      int int0 = (-87);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-87), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1420, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("", "");
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2848);
      Step step0 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.evalSteps((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-772), (Expression[]) null);
      coreFunction1.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("|");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      CoreOperationNegate coreOperationNegate2 = new CoreOperationNegate(coreOperationAdd0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationNegate2;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationNegate1;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray1);
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      QName qName0 = new QName("", "");
      QName qName1 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[4];
      Constant constant1 = new Constant("a4");
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      Double double0 = Expression.ZERO;
      Constant constant2 = new Constant(double0);
      expressionArray0[2] = (Expression) constant2;
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()('a4', '', 0, $:)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(28, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "unknownFunction");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreFunction1);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(selfContext0, basicNodeSet0);
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, processingInstructionTest0);
      selfContext0.setPosition(28);
      CoreFunction coreFunction2 = new CoreFunction(28, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionNot(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[19];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "D>FwSL?W:;L#G#7";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("D>FwSL?W:;L#G#7");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(ancestorContext0, processingInstructionTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(207, expressionArray0);
      coreFunction0.toString();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("unknownFunction207()()", "");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      InitialContext initialContext0 = (InitialContext)rootContext1.getAbsoluteRootContext();
      NodeSetContext nodeSetContext0 = new NodeSetContext(initialContext0, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, processingInstructionTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeTypeTest0);
      nodeTypeTest0.toString();
      selfContext0.setPosition(207);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction207()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction");
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("", "");
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2848);
      Step step0 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.evalSteps((EvalContext) null);
      basicVariables0.undeclareVariable("BXuVDtI-T6tQ^bZYYQ");
      nodeTypeTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], coreOperationGreaterThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[3], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      Constant constant1 = new Constant("");
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-365), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-365()('', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, $, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000004 >= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000004, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000004 - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000005), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002) + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000005) + org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000006 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000007 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000008) + org.apache.commons.jxpath.ri.compiler.Constant@0000000009, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000005 <= org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000007, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(207, expressionArray0);
      coreFunction0.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("unknownFunction207()()");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      // Undeclared exception!
      try { 
        variablePointer0.createPath(jXPathContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $unknownFunction207()()
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("|");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      Constant constant1 = new Constant("|");
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.computeValue(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1916), (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, coreOperationMultiply0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationNotEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationAnd0, coreOperationGreaterThan0);
      expressionArray0[1] = (Expression) coreOperationMultiply1;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationMultiply1;
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      expressionArray1[5] = (Expression) coreOperationMultiply0;
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      expressionArray1[7] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, expressionArray1[5]);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      expressionArray0[5] = (Expression) coreFunction1;
      Expression expression1 = coreFunction1.getArg3();
      expressionArray0[6] = expression1;
      CoreFunction coreFunction2 = new CoreFunction(929, expressionArray0);
      assertEquals(929, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, constant0);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Constant constant1 = new Constant("");
      expressionArray0[2] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1173()(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001, |(org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003), '', -(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationGreaterThan0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(1420, processingInstructionTest0, expressionArray0);
      locationPath0.isSimpleStep(step0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("local-name", "M5`13o$mHRaO");
      VariableReference variableReference0 = new VariableReference(qName0);
      coreOperationGreaterThan0.args = expressionArray0;
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(1420, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "M5`13o$mHRaO");
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[0], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1420()(, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 > (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002) > org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003 > org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 > org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002) - org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003) * (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), $local-name:M5`13o$mHRaO)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreOperationGreaterThan0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, processingInstructionTest0);
      selfContext0.setPosition(0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      coreFunction0.computeValue(ancestorContext0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("or");
      Step step2 = new Step(1095, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1477, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1477, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-396), processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(32);
      Step step7 = new Step(0, nodeTypeTest1, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath1;
      Constant constant0 = new Constant("or");
      expressionArray0[4] = (Expression) constant0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[5]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, expressionPath1);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1477, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(1477, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-319), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1114), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1114()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
