/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 05:49:23 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[18];
      CoreFunction coreFunction0 = new CoreFunction((-2607), expressionArray0);
      assertEquals(18, expressionArray0.length);
      assertEquals((-2607), coreFunction0.getFunctionCode());
      assertEquals(18, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2607()(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(2025, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2025, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, expressionArray0[1]);
      assertEquals(9, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      expressionArray0[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("l");
      assertNull(qName0.getPrefix());
      assertEquals("l", qName0.getName());
      assertEquals("l", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("l", qName0.getName());
      assertEquals("l", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("l", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("l", qName0.getName());
      assertEquals("l", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("l", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("l", qName0.getName());
      assertEquals("l", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("l", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction0.functionPosition(predicateContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("l", qName0.getName());
      assertEquals("l", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("l", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("GkVy%e'ODRU\"$pQc");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-324), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-324), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("+\"PaM`}`C1k`g01 91", "yE.zekgm)YRkW");
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", qName0.toString());
      assertEquals("yE.zekgm)YRkW", qName0.getName());
      assertEquals("+\"PaM`}`C1k`g01 91", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", qName0.toString());
      assertEquals("yE.zekgm)YRkW", qName0.getName());
      assertEquals("+\"PaM`}`C1k`g01 91", qName0.getPrefix());
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", qName0.toString());
      assertEquals("yE.zekgm)YRkW", qName0.getName());
      assertEquals("+\"PaM`}`C1k`g01 91", qName0.getPrefix());
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      SelfContext selfContext0 = new SelfContext(attributeContext0, nodeNameTest0);
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", qName0.toString());
      assertEquals("yE.zekgm)YRkW", qName0.getName());
      assertEquals("+\"PaM`}`C1k`g01 91", qName0.getPrefix());
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertNotNull(selfContext0);
      
      Object object0 = coreFunction0.functionNumber(selfContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-324), coreFunction0.getFunctionCode());
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", qName0.toString());
      assertEquals("yE.zekgm)YRkW", qName0.getName());
      assertEquals("+\"PaM`}`C1k`g01 91", qName0.getPrefix());
      assertEquals("+\"PaM`}`C1k`g01 91:yE.zekgm)YRkW", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(Double.NaN, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(28);
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.functionStringLength(precedingOrFollowingContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(436, (Expression[]) null);
      assertEquals(436, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNotNull(nodeSetContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(28);
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionFloor((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionFalse((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-25), (Expression[]) null);
      assertEquals((-25), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-25), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-25), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNull(expression0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(14, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = (CoreFunction)coreFunction1.getArg3();
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNull(expression0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1504), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1504), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply1 = (CoreOperationMultiply)coreFunction0.getArg2();
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1504), coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertSame(coreOperationMultiply1, coreOperationMultiply0);
      assertNotNull(coreOperationMultiply1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1323), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1323), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg1();
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1323), coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertSame(coreOperationAdd1, coreOperationAdd0);
      assertNotNull(coreOperationAdd1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionString((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("true", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNull((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expressionArray0[1]);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("+*B-va?");
      assertNull(qName0.getPrefix());
      assertEquals("+*B-va?", qName0.getName());
      assertEquals("+*B-va?", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("+*B-va?", qName0.getName());
      assertEquals("+*B-va?", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-752), expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-752), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-3083), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-3083), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-94), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-94), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(46, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-724), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-724), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-724()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName((String) null, "org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator");
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.Expression$PointerIterator", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(10, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(7, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(661, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(661, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-324), (Expression[]) null);
      assertEquals((-324), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-324()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("*");
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, expressionArray0[1]);
      assertEquals(4, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, coreOperationDivide0);
      assertEquals(4, expressionArray0.length);
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(namespaceResolver0).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationMultiply0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(4, expressionArray0.length);
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(4, expressionArray0.length);
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(4, expressionArray0.length);
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest");
      assertEquals("org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest", processingInstructionTest0.getTarget());
      assertEquals(0, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[1];
      stepArray0[3] = stepArray0[0];
      stepArray0[4] = stepArray0[3];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertEquals(6, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertNotNull(evalContext0);
      
      CoreFunction coreFunction0 = new CoreFunction((-94), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-94), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-576), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-576), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "PLDD`+c$ q|eUlh.");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("PLDD`+c$ q|eUlh.", "round");
      assertEquals("PLDD`+c$ q|eUlh.", qName0.getPrefix());
      assertEquals("round", qName0.getName());
      assertEquals("PLDD`+c$ q|eUlh.:round", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("PLDD`+c$ q|eUlh.", qName0.getPrefix());
      assertEquals("round", qName0.getName());
      assertEquals("PLDD`+c$ q|eUlh.:round", qName0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertNotNull(nullPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("PLDD`+c$ q|eUlh.", qName0.getPrefix());
      assertEquals("round", qName0.getName());
      assertEquals("PLDD`+c$ q|eUlh.:round", qName0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("PLDD`+c$ q|eUlh.", qName0.getPrefix());
      assertEquals("round", qName0.getName());
      assertEquals("PLDD`+c$ q|eUlh.:round", qName0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: PLDD`+c$ q|eUlh.:round
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(62, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(62, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction62()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "On1(?QE");
      assertEquals("On1(?QE", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("On1(?QE", nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("On1(?QE", nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction0 = new CoreFunction((-886), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-886), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      coreOperationMultiply0.args = expressionArray0;
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("*");
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2304), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-2304), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, evalContextArray0.length);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, unionContext0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, evalContextArray0.length);
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(4, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "*");
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("*", nodeNameTest0.toString());
      assertEquals("*", nodeNameTest0.getNamespaceURI());
      assertTrue(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("*", nodeNameTest0.toString());
      assertEquals("*", nodeNameTest0.getNamespaceURI());
      assertTrue(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeNameTest0, false, true);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertEquals("*", qName0.getName());
      assertEquals("*", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("*", nodeNameTest0.toString());
      assertEquals("*", nodeNameTest0.getNamespaceURI());
      assertTrue(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-1016), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1016), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("descendant", "");
      assertEquals("descendant:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("descendant", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("descendant:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("descendant", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("descendant:", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("descendant:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("descendant", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("descendant:", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, true, nodeNameTest0);
      assertEquals("descendant:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("descendant", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("descendant:", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      coreFunction0.functionNumber(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((byte)27, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("'round'");
      assertEquals("'round'", qName0.toString());
      assertEquals("'round'", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "'round'");
      assertEquals("'round'", qName0.toString());
      assertEquals("'round'", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'round'", nodeNameTest0.toString());
      assertEquals("'round'", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertEquals("'round'", qName0.toString());
      assertEquals("'round'", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'round'", nodeNameTest0.toString());
      assertEquals("'round'", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      assertEquals("'round'", qName0.toString());
      assertEquals("'round'", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'round'", nodeNameTest0.toString());
      assertEquals("'round'", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeNameTest0);
      assertEquals("'round'", qName0.toString());
      assertEquals("'round'", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'round'", nodeNameTest0.toString());
      assertEquals("'round'", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      Pointer pointer0 = nodeSetContext0.getSingleNodePointer();
      assertEquals("'round'", qName0.toString());
      assertEquals("'round'", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'round'", nodeNameTest0.toString());
      assertEquals("'round'", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNull(pointer0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(selfContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("3x~g`TuOV9uW.[|c", "3x~g`TuOV9uW.[|c");
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getPrefix());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getName());
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getPrefix());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getName());
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getPrefix());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getName());
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getPrefix());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getName());
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNotNull(nodeSetContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeTypeTest0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      ParentContext parentContext0 = new ParentContext(selfContext0, nodeTypeTest0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, (Step[]) null);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("Invalid argument type for 'sum': ", "ali+@/");
      assertEquals("ali+@/", qName0.getName());
      assertEquals("Invalid argument type for 'sum': ", qName0.getPrefix());
      assertEquals("Invalid argument type for 'sum': :ali+@/", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("ali+@/", qName0.getName());
      assertEquals("Invalid argument type for 'sum': ", qName0.getPrefix());
      assertEquals("Invalid argument type for 'sum': :ali+@/", qName0.toString());
      assertEquals("Invalid argument type for 'sum': :ali+@/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("ali+@/", qName0.getName());
      assertEquals("Invalid argument type for 'sum': ", qName0.getPrefix());
      assertEquals("Invalid argument type for 'sum': :ali+@/", qName0.toString());
      assertEquals("Invalid argument type for 'sum': :ali+@/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.parser.Token");
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext(unionContext0, nodeNameTest0, true, false);
      assertEquals(0, evalContextArray0.length);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", nodeNameTest0.toString());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      NodeSet nodeSet0 = childContext0.getNodeSet();
      assertEquals(0, evalContextArray0.length);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.parser.Token", nodeNameTest0.toString());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(nodeSet0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(childContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("*");
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "*", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("*", qName0.toString());
      assertEquals("*", qName0.getName());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(initialContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[5];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[4], expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2981), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-2981), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("XmYmGz", "XmYmGz");
      assertEquals("XmYmGz", qName0.getPrefix());
      assertEquals("XmYmGz", qName0.getName());
      assertEquals("XmYmGz:XmYmGz", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("XmYmGz", qName0.getPrefix());
      assertEquals("XmYmGz", qName0.getName());
      assertEquals("XmYmGz:XmYmGz", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("XmYmGz", qName0.getPrefix());
      assertEquals("XmYmGz", qName0.getName());
      assertEquals("XmYmGz:XmYmGz", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, expressionArray0.length);
      assertEquals("XmYmGz", qName0.getPrefix());
      assertEquals("XmYmGz", qName0.getName());
      assertEquals("XmYmGz:XmYmGz", qName0.toString());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(62, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(62, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction62()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(890, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, false);
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, false, (NodeTest) null);
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, ancestorContext0, (Locale) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      nameAttributeTest0.args = expressionArray0;
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(66, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(66, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dU");
      assertEquals("dU", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("dU", processingInstructionTest0.getTarget());
      assertEquals(10, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(46, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(46, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(46);
      assertEquals(46, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      assertEquals(0, expressionArray0.length);
      assertEquals(46, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(46, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      assertEquals(0, expressionArray0.length);
      assertEquals(46, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(46, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1016), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1016), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1016), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1016));
      assertEquals((-1016), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, nodeTypeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1016), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals((-1016), nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-3386), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals((-3386), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[4];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-656), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-656), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      coreFunction0.functionCount(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("bd\tz", "bd\tz");
      assertEquals("bd\tz", qName0.getPrefix());
      assertEquals("bd\tz:bd\tz", qName0.toString());
      assertEquals("bd\tz", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("bd\tz", qName0.getPrefix());
      assertEquals("bd\tz:bd\tz", qName0.toString());
      assertEquals("bd\tz", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("bd\tz:bd\tz", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction0 = new CoreFunction((-420), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-420), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("bd\tz", qName0.getPrefix());
      assertEquals("bd\tz:bd\tz", qName0.toString());
      assertEquals("bd\tz", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("bd\tz:bd\tz", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertNotNull(selfContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      assertEquals("bd\tz", qName0.getPrefix());
      assertEquals("bd\tz:bd\tz", qName0.toString());
      assertEquals("bd\tz", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("bd\tz:bd\tz", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1201), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1201), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1201()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3163, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3163, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNotNull(nodeSetContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeTypeTest0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("3x~g`TuOV9uW.[|c", "3x~g`TuOV9uW.[|c");
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", qName0.toString());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getName());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", qName0.toString());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getName());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "3x~g`TuOV9uW.[|c");
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", qName0.toString());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getName());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("3x~g`TuOV9uW.[|c", nodeNameTest0.getNamespaceURI());
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", qName0.toString());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getName());
      assertEquals("3x~g`TuOV9uW.[|c", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("3x~g`TuOV9uW.[|c", nodeNameTest0.getNamespaceURI());
      assertEquals("3x~g`TuOV9uW.[|c:3x~g`TuOV9uW.[|c", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-327), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-327), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2118), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2118), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(1665, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1665, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(5, expressionArray0.length);
      assertEquals(1665, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction1665()(null, null, null, null, null)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("substring()", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1676), (Expression[]) null);
      assertEquals((-1676), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals((-1676), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2641), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2641), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-1830), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1830), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1830), coreFunction0.getFunctionCode());
      assertNull(expression0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionSum((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3290, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3290, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray1);
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("true", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(1112, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1112, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3269, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(3269, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray1);
      assertEquals(6, expressionArray1.length);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertEquals(6, expressionArray1.length);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-1830), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1830), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1830()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("^W5V:i'j.V[");
      assertEquals("i'j.V[", qName0.getName());
      assertEquals("^W5V", qName0.getPrefix());
      assertEquals("^W5V:i'j.V[", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("i'j.V[", qName0.getName());
      assertEquals("^W5V", qName0.getPrefix());
      assertEquals("^W5V:i'j.V[", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertNotNull(nullPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("i'j.V[", qName0.getName());
      assertEquals("^W5V", qName0.getPrefix());
      assertEquals("^W5V:i'j.V[", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("i'j.V[", qName0.getName());
      assertEquals("^W5V", qName0.getPrefix());
      assertEquals("^W5V:i'j.V[", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("i'j.V[", qName0.getName());
      assertEquals("^W5V", qName0.getPrefix());
      assertEquals("^W5V:i'j.V[", qName0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertFalse(nullPointer0.isContainer());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = new ChildContext(rootContext0, processingInstructionTest0, true, false);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      NodePointer nodePointer0 = childContext0.getCurrentNodePointer();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(1, childContext0.getPosition());
      assertNull(nodePointer0);
      
      Double double0 = (Double)coreFunction0.functionLast(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(1, childContext0.getPosition());
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("substring");
      assertEquals("substring", qName0.getName());
      assertEquals("substring", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, (Locale) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("substring", qName0.getName());
      assertEquals("substring", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("substring", qName0.getName());
      assertEquals("substring", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext("substring");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("substring", qName0.getName());
      assertEquals("substring", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("substring", qName0.getName());
      assertEquals("substring", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(215, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(215, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray1);
      assertEquals(6, expressionArray1.length);
      assertEquals(19, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(6, expressionArray1.length);
      assertEquals(19, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("6K%L4");
      assertEquals("6K%L4", qName0.toString());
      assertEquals("6K%L4", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("6K%L4", qName0.toString());
      assertEquals("6K%L4", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, variableReference0);
      assertEquals("6K%L4", qName0.toString());
      assertEquals("6K%L4", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1785, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1785, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1785, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("EE#ucy", "");
      assertEquals("", qName0.getName());
      assertEquals("EE#ucy:", qName0.toString());
      assertEquals("EE#ucy", qName0.getPrefix());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.getName());
      assertEquals("EE#ucy:", qName0.toString());
      assertEquals("EE#ucy", qName0.getPrefix());
      assertEquals("EE#ucy:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("EE#ucy:", qName0.toString());
      assertEquals("EE#ucy", qName0.getPrefix());
      assertEquals("EE#ucy:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNotNull(nodeSetContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(true(), null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals("string", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreOperationMultiply0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction0.functionTrue(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(true, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, (Locale) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = (Expression) coreFunction0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "|QF2%]`<<Zy(Nf *");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionNamespaceURI(attributeContext0);
      assertEquals((-551), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(28);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }
}
