* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-30
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.CoreFunction
* Starting Client-0
* Connecting to master process on port 21695
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-14/target/classes
  - subjects/buggy-versions/JxPath-14/src/java
  - subjects/buggy-versions/JxPath-14/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/junit-3.8.2.jar
  - subjects/buggy-versions/JxPath-14/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.CoreFunction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1832
* Using seed 355066799
* Starting evolution
bbc usage percentage is: 30%
* Initial Number of Goals in DynaMOSA = 654 / 1832
[MASTER] 08:28:25.421 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
* Search finished after 601s and 848 generations, 344278 statements, best individual has fitness: 559.0
* Minimizing test suite
[MASTER] 08:39:28.967 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 78%
* Total number of goals: 344
* Number of covered goals: 267
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 84%
* Total number of goals: 355
* Number of covered goals: 299
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 161
* Number of covered goals: 161
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 75%
* Total number of goals: 616
* Number of covered goals: 459
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 37%
* Total number of goals: 82
* Number of covered goals: 30
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 88%
* Total number of goals: 40
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 84%
* Total number of goals: 355
* Number of covered goals: 299
* Generated 327 tests with total length 4989
* Resulting test suite's coverage: 74% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:40:11.188 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6685666666666666% of time used, but only 104/327 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 9%
* Compiling and checking tests
[MASTER] 08:40:30.119 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:40:51.520 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:40:51.523 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[0] = (Expression) coreOperationOr0;
CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
coreFunction0.computeContextDependent();

[MASTER] 08:40:52.327 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:40:52.329 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[3];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
expressionArray0[0] = (Expression) coreOperationUnion0;
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
expressionArray0[1] = (Expression) coreOperationNegate0;
QName qName0 = new QName("5~]W", "5~]W");
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
expressionArray0[2] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
Step[] stepArray0 = new Step[3];
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("5~]W");
Step step0 = new Step((-4253), processingInstructionTest0, expressionArray0);
stepArray0[0] = step0;
Step step1 = new Step(4502, processingInstructionTest0, expressionArray0);
stepArray0[1] = step1;
Expression[] expressionArray1 = new Expression[8];
expressionArray1[0] = (Expression) coreOperationNegate0;
expressionArray1[1] = (Expression) coreFunction0;
expressionArray1[2] = (Expression) coreFunction0;
expressionArray1[3] = (Expression) coreOperationNegate0;
expressionArray1[4] = (Expression) coreOperationUnion0;
LocationPath locationPath0 = new LocationPath(false, stepArray0);
expressionArray1[5] = (Expression) locationPath0;
Double double0 = Expression.NOT_A_NUMBER;
Constant constant0 = new Constant(double0);
expressionArray1[6] = (Expression) constant0;
expressionArray1[7] = (Expression) coreFunction0;
Step step2 = new Step((-4253), processingInstructionTest0, expressionArray1);
stepArray0[2] = step2;
ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
expressionPath0.createContextForStep(ancestorContext0, (-4253), processingInstructionTest0);
coreFunction0.functionKey((EvalContext) null);

[MASTER] 08:41:06.976 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:41:06.978 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[7];
QName qName0 = new QName("b[siCx");
assertNotNull(qName0);
assertNull(qName0.getPrefix());
assertEquals("b[siCx", qName0.toString());
assertEquals("b[siCx", qName0.getName());

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNotNull(extensionFunction0);
assertEquals(7, expressionArray0.length);
assertNull(qName0.getPrefix());
assertEquals("b[siCx", qName0.toString());
assertEquals("b[siCx", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());

expressionArray0[0] = (Expression) extensionFunction0;
NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
assertNotNull(nameAttributeTest0);
assertEquals(7, expressionArray0.length);
assertNull(qName0.getPrefix());
assertEquals("b[siCx", qName0.toString());
assertEquals("b[siCx", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertTrue(nameAttributeTest0.computeContextDependent());
assertEquals("=", nameAttributeTest0.getSymbol());

expressionArray0[1] = (Expression) nameAttributeTest0;
CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], extensionFunction0);
assertNotNull(coreOperationSubtract0);
assertEquals(7, expressionArray0.length);
assertNull(qName0.getPrefix());
assertEquals("b[siCx", qName0.toString());
assertEquals("b[siCx", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());
assertEquals("-", coreOperationSubtract0.getSymbol());

expressionArray0[2] = (Expression) coreOperationSubtract0;
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
assertNotNull(coreOperationOr0);
assertEquals(7, expressionArray0.length);
assertEquals("or", coreOperationOr0.getSymbol());

expressionArray0[3] = (Expression) coreOperationOr0;
Double double0 = Expression.ONE;
assertNotNull(double0);
assertEquals(1.0, (double)double0, 0.01);

Constant constant0 = new Constant(double0);
assertNotNull(constant0);
assertFalse(constant0.computeContextDependent());
assertFalse(constant0.isContextDependent());

expressionArray0[4] = (Expression) constant0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
assertNotNull(coreOperationLessThan0);
assertEquals(7, expressionArray0.length);
assertEquals("<", coreOperationLessThan0.getSymbol());

expressionArray0[5] = (Expression) coreOperationLessThan0;
CoreFunction coreFunction0 = new CoreFunction((-3185), expressionArray0);
assertNotNull(coreFunction0);
assertEquals(7, expressionArray0.length);
assertEquals((-3185), coreFunction0.getFunctionCode());
assertEquals(7, coreFunction0.getArgumentCount());

CoreOperationSubtract coreOperationSubtract1 = (CoreOperationSubtract)coreFunction0.getArg3();
assertNotNull(coreOperationSubtract1);
assertEquals(7, expressionArray0.length);
assertSame(coreOperationSubtract1, coreOperationSubtract0);
assertEquals("-", coreOperationSubtract1.getSymbol());
assertEquals((-3185), coreFunction0.getFunctionCode());
assertEquals(7, coreFunction0.getArgumentCount());

expressionArray0[6] = (Expression) coreOperationSubtract1;
CoreFunction coreFunction1 = new CoreFunction((-3185), expressionArray0);
assertNotNull(coreFunction1);
assertEquals(7, expressionArray0.length);
assertFalse(coreFunction1.equals((Object)coreFunction0));
assertEquals((-3185), coreFunction1.getFunctionCode());
assertEquals(7, coreFunction1.getArgumentCount());

boolean boolean0 = coreFunction0.computeContextDependent();
assertEquals(7, expressionArray0.length);
assertNotSame(coreFunction0, coreFunction1);
assertFalse(coreFunction0.equals((Object)coreFunction1));
assertEquals((-3185), coreFunction0.getFunctionCode());
assertEquals(7, coreFunction0.getArgumentCount());
assertTrue(boolean0);

CoreFunction coreFunction2 = new CoreFunction(1568, expressionArray0);
assertNotNull(coreFunction2);
assertEquals(7, expressionArray0.length);
assertFalse(coreFunction2.equals((Object)coreFunction0));
assertFalse(coreFunction2.equals((Object)coreFunction1));
assertEquals(7, coreFunction2.getArgumentCount());
assertEquals(1568, coreFunction2.getFunctionCode());

NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[4], coreFunction2);
assertNotNull(nameAttributeTest1);
assertEquals(7, expressionArray0.length);
assertFalse(coreFunction2.equals((Object)coreFunction0));
assertFalse(coreFunction2.equals((Object)coreFunction1));
assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
assertEquals(7, coreFunction2.getArgumentCount());
assertEquals(1568, coreFunction2.getFunctionCode());
assertEquals("=", nameAttributeTest1.getSymbol());
assertTrue(nameAttributeTest1.computeContextDependent());

CoreFunction coreFunction3 = new CoreFunction((-875), expressionArray0);
assertNotNull(coreFunction3);
assertEquals(7, expressionArray0.length);
assertFalse(coreFunction3.equals((Object)coreFunction0));
assertFalse(coreFunction3.equals((Object)coreFunction1));
assertFalse(coreFunction3.equals((Object)coreFunction2));
assertEquals(7, coreFunction3.getArgumentCount());
assertEquals((-875), coreFunction3.getFunctionCode());

CoreFunction coreFunction4 = new CoreFunction(3238, expressionArray0);
assertNotNull(coreFunction4);
assertEquals(7, expressionArray0.length);
assertFalse(coreFunction4.equals((Object)coreFunction0));
assertFalse(coreFunction4.equals((Object)coreFunction1));
assertFalse(coreFunction4.equals((Object)coreFunction2));
assertFalse(coreFunction4.equals((Object)coreFunction3));
assertEquals(7, coreFunction4.getArgumentCount());
assertEquals(3238, coreFunction4.getFunctionCode());

EvalContext evalContext0 = null;
BasicNodeSet basicNodeSet0 = new BasicNodeSet();
assertNotNull(basicNodeSet0);

NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
assertNotNull(nodeSetContext0);
assertEquals(0, nodeSetContext0.getPosition());
assertEquals(0, nodeSetContext0.getDocumentOrder());
assertFalse(nodeSetContext0.isChildOrderingRequired());

coreFunction1.functionConcat(nodeSetContext0);

[MASTER] 08:41:09.148 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:41:09.149 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[8];
QName qName0 = new QName("Incorrect number of arguments: ");
assertNotNull(qName0);
assertEquals("Incorrect number of arguments", qName0.getPrefix());
assertEquals("Incorrect number of arguments: ", qName0.toString());
assertEquals(" ", qName0.getName());

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
assertNotNull(extensionFunction0);
assertEquals(8, expressionArray0.length);
assertEquals("Incorrect number of arguments", qName0.getPrefix());
assertEquals("Incorrect number of arguments: ", qName0.toString());
assertEquals(" ", qName0.getName());
assertTrue(extensionFunction0.computeContextDependent());

expressionArray0[0] = (Expression) extensionFunction0;
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
assertNotNull(coreOperationNegate0);
assertEquals(8, expressionArray0.length);
assertEquals("-", coreOperationNegate0.getSymbol());

CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
assertNotNull(coreOperationAdd0);
assertEquals(8, expressionArray0.length);
assertEquals("+", coreOperationAdd0.getSymbol());

expressionArray0[2] = (Expression) coreOperationAdd0;
CoreFunction coreFunction0 = new CoreFunction(1740, expressionArray0);
assertNotNull(coreFunction0);
assertEquals(8, expressionArray0.length);
assertEquals(1740, coreFunction0.getFunctionCode());
assertEquals(8, coreFunction0.getArgumentCount());

CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
assertNotNull(coreFunction1);
assertEquals(8, expressionArray0.length);
assertFalse(coreFunction1.equals((Object)coreFunction0));
assertEquals(16, coreFunction1.getFunctionCode());
assertEquals(8, coreFunction1.getArgumentCount());

String string0 = coreFunction0.getFunctionName();
assertNotNull(string0);
assertEquals(8, expressionArray0.length);
assertNotSame(coreFunction0, coreFunction1);
assertFalse(coreFunction0.equals((Object)coreFunction1));
assertEquals(1740, coreFunction0.getFunctionCode());
assertEquals(8, coreFunction0.getArgumentCount());
assertEquals("unknownFunction1740()", string0);

EvalContext evalContext0 = null;
coreFunction1.functionConcat((EvalContext) null);

[MASTER] 08:41:11.345 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'CoreFunction_ESTest' to results/JxPath-14/org.apache.commons.jxpath.ri.compiler.CoreFunction/BBC-F0-opt-30/tests/9
* Done!

* Computation finished
