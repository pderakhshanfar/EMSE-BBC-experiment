/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:32:32 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      QName qName0 = new QName("tGFP2Mm.{\"U##'", "tGFP2Mm.{\"U##'");
      assertNotNull(qName0);
      assertEquals("tGFP2Mm.{\"U##':tGFP2Mm.{\"U##'", qName0.toString());
      assertEquals("tGFP2Mm.{\"U##'", qName0.getName());
      assertEquals("tGFP2Mm.{\"U##'", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("tGFP2Mm.{\"U##':tGFP2Mm.{\"U##'", qName0.toString());
      assertEquals("tGFP2Mm.{\"U##'", qName0.getName());
      assertEquals("tGFP2Mm.{\"U##'", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2769));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-2769), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      assertEquals((-2769), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1710), nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      assertEquals((-1710), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(40, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      assertEquals(40, step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step((-2769), nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      assertEquals((-2769), step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1710), nodeTypeTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1710), step4.getAxis());
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-73), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-73), coreFunction0.getFunctionCode());
      
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      
      RootContext rootContext0 = ancestorContext0.getRootContext();
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext1 = new AncestorContext(rootContext0, false, nodeTypeTest0);
      assertNotNull(ancestorContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertEquals(0, ancestorContext1.getPosition());
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      
      InitialContext initialContext1 = (InitialContext)rootContext0.getConstantContext(ancestorContext1);
      assertNotNull(initialContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertEquals(0, ancestorContext1.getPosition());
      assertEquals((-2769), nodeTypeTest0.getNodeType());
      assertEquals(0, initialContext1.getDocumentOrder());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertEquals(0, initialContext1.getPosition());
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertFalse(initialContext1.equals((Object)initialContext0));
      assertNotSame(initialContext0, initialContext1);
      assertNotSame(ancestorContext0, ancestorContext1);
      assertNotSame(ancestorContext1, ancestorContext0);
      assertNotSame(initialContext1, initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(initialContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: tGFP2Mm.{\"U##':tGFP2Mm.{\"U##'
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)75, (byte)54, (byte)18, (byte)3}, byteArray0);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4183, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(4183, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(4183, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(20);
      assertNotNull(nodeTypeTest0);
      assertEquals(20, nodeTypeTest0.getNodeType());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iJ)Qj} 'w");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = nodeSetContext0.setPosition(1136);
      assertFalse(boolean2);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1136, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, nodeTypeTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1136, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(20, nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      Object object1 = coreFunction0.functionNull(precedingOrFollowingContext0);
      assertNull(object1);
      assertEquals(0, expressionArray0.length);
      assertEquals(4183, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1136, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(20, nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1135, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO", "`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&EoO", qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertEquals("`8w&Ye3+&EoO:`8w&Ye3+&EoO", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&EoO", qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertEquals("`8w&Ye3+&EoO:`8w&Ye3+&EoO", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1184), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1184), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.compute(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO:`8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      expressionArray0[6] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.compute(initialContext0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      Double double0 = (Double)coreFunction0.functionSum(initialContext0);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals("position", string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      String string0 = (String)coreFunction0.functionName(initialContext0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      Double double0 = (Double)coreFunction0.functionCount(initialContext0);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      Double double1 = (Double)coreFunction0.functionSum(initialContext0);
      assertNotNull(double1);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double1, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals((double)double1, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionName(initialContext0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string1 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertNotNull(string1);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      InitialContext initialContext1 = (InitialContext)variableReference0.compute(initialContext0);
      assertNotNull(initialContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertEquals(0, initialContext1.getDocumentOrder());
      assertEquals(0, initialContext1.getPosition());
      assertFalse(initialContext1.equals((Object)initialContext0));
      assertNotSame(initialContext0, initialContext1);
      assertNotSame(initialContext1, initialContext0);
      
      Double double0 = (Double)coreFunction0.functionCount(initialContext0);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(initialContext0.equals((Object)initialContext1));
      assertNotSame(initialContext0, initialContext1);
      
      String string0 = (String)coreFunction0.functionName(initialContext0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(initialContext0.equals((Object)initialContext1));
      assertNotSame(initialContext0, initialContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string1 = (String)coreFunction0.functionLocalName(initialContext0);
      assertNotNull(string1);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string2 = (String)coreFunction0.functionName(initialContext0);
      assertNotNull(string2);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string2);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Double double0 = (Double)coreFunction0.functionSum(initialContext0);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1084, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1084, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(initialContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`8w&Ye3+&EoO");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&EoO", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`8w&Ye3+&EoO", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&EoO
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("4");
      assertNotNull(qName0);
      assertEquals("4", qName0.toString());
      assertEquals("4", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("4", qName0.toString());
      assertEquals("4", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&EoO");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("N", "/k&TAokhxMOwQdo%");
      assertNotNull(qName0);
      assertEquals("N:/k&TAokhxMOwQdo%", qName0.toString());
      assertEquals("/k&TAokhxMOwQdo%", qName0.getName());
      assertEquals("N", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("N:/k&TAokhxMOwQdo%", qName0.toString());
      assertEquals("/k&TAokhxMOwQdo%", qName0.getName());
      assertEquals("N", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(32, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals(32, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(82, (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertEquals(82, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(82, (NodeTest) null, expressionArray0);
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertEquals(82, step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(82, (NodeTest) null, expressionArray0);
      assertNotNull(step3);
      assertEquals(2, expressionArray0.length);
      assertEquals(82, step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNegate0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      Step step4 = new Step((-1172), (NodeTest) null, expressionArray1);
      assertNotNull(step4);
      assertEquals(5, expressionArray1.length);
      assertEquals((-1172), step4.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 32, (NodeTest) null);
      assertNull(evalContext0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[5];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1378");
      assertFalse(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1gD$6/");
      assertNotNull(processingInstructionTest0);
      assertEquals("1gD$6/", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(778, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals("1gD$6/", processingInstructionTest0.getTarget());
      assertEquals(778, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(40, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertEquals("1gD$6/", processingInstructionTest0.getTarget());
      assertEquals(40, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(40, processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertEquals("1gD$6/", processingInstructionTest0.getTarget());
      assertEquals(40, step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      QName qName0 = new QName("1gD$6/", "1gD$6/");
      assertNotNull(qName0);
      assertEquals("1gD$6/", qName0.getPrefix());
      assertEquals("1gD$6/", qName0.getName());
      assertEquals("1gD$6/:1gD$6/", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ",");
      assertNotNull(nodeNameTest0);
      assertEquals("1gD$6/", qName0.getPrefix());
      assertEquals("1gD$6/", qName0.getName());
      assertEquals("1gD$6/:1gD$6/", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("1gD$6/:1gD$6/", nodeNameTest0.toString());
      assertEquals(",", nodeNameTest0.getNamespaceURI());
      
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(2, expressionArray0.length);
      assertEquals("1gD$6/", qName0.getPrefix());
      assertEquals("1gD$6/", qName0.getName());
      assertEquals("1gD$6/:1gD$6/", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("1gD$6/:1gD$6/", nodeNameTest0.toString());
      assertEquals(",", nodeNameTest0.getNamespaceURI());
      assertEquals(1, step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step(105, nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(2, expressionArray0.length);
      assertEquals("1gD$6/", qName0.getPrefix());
      assertEquals("1gD$6/", qName0.getName());
      assertEquals("1gD$6/:1gD$6/", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("1gD$6/:1gD$6/", nodeNameTest0.toString());
      assertEquals(",", nodeNameTest0.getNamespaceURI());
      assertEquals(105, step4.getAxis());
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      assertNotNull(nodeTypeTest0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, false, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("1376", "\"*\"");
      assertNotNull(qName0);
      assertEquals("1376", qName0.getPrefix());
      assertEquals("\"*\"", qName0.getName());
      assertEquals("1376:\"*\"", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "}1f^x/hy8F");
      assertNotNull(nodeNameTest0);
      assertEquals("1376", qName0.getPrefix());
      assertEquals("\"*\"", qName0.getName());
      assertEquals("1376:\"*\"", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1f^x/hy8F", nodeNameTest0.getNamespaceURI());
      assertEquals("1376:\"*\"", nodeNameTest0.toString());
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals("1376", qName0.getPrefix());
      assertEquals("\"*\"", qName0.getName());
      assertEquals("1376:\"*\"", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1f^x/hy8F", nodeNameTest0.getNamespaceURI());
      assertEquals("1376:\"*\"", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      
      Pointer pointer0 = descendantContext0.getContextNodePointer();
      assertNull(pointer0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals("1376", qName0.getPrefix());
      assertEquals("\"*\"", qName0.getName());
      assertEquals("1376:\"*\"", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1f^x/hy8F", nodeNameTest0.getNamespaceURI());
      assertEquals("1376:\"*\"", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionTrue(descendantContext0);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(true, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(5, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals("1376", qName0.getPrefix());
      assertEquals("\"*\"", qName0.getName());
      assertEquals("1376:\"*\"", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("}1f^x/hy8F", nodeNameTest0.getNamespaceURI());
      assertEquals("1376:\"*\"", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(object0.equals((Object)boolean0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = new Double(364);
      assertNotNull(double0);
      assertEquals(364.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "unknownFunction364()(364, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      QName qName0 = new QName("unknownFunction364()(364, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)", "unknownFunction364()(364, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)");
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext1, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = new Double((-517.25219705));
      assertNotNull(double0);
      assertEquals((-517.25219705), (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("substring-after");
      assertNotNull(qName0);
      assertEquals("substring-after", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("substring-after", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3132);
      assertNotNull(nodeTypeTest0);
      assertEquals(3132, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(3132, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals(3132, nodeTypeTest0.getNodeType());
      assertEquals(3132, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], locationPath0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertEquals("substring-after", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[2]);
      assertNotNull(coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(3132, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(3132, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant1 = new Constant("");
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant1);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = false;
      QName qName0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1237), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1237), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1237), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("5kh}P!6DN&;aE", "5kh}P!6DN&;aE");
      assertNotNull(qName0);
      assertEquals("5kh}P!6DN&;aE", qName0.getPrefix());
      assertEquals("5kh}P!6DN&;aE", qName0.getName());
      assertEquals("5kh}P!6DN&;aE:5kh}P!6DN&;aE", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5kh}P!6DN&;aE", qName0.getPrefix());
      assertEquals("5kh}P!6DN&;aE", qName0.getName());
      assertEquals("5kh}P!6DN&;aE:5kh}P!6DN&;aE", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1237), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("5kh}P!6DN&;aE", qName0.getPrefix());
      assertEquals("5kh}P!6DN&;aE", qName0.getName());
      assertEquals("5kh}P!6DN&;aE:5kh}P!6DN&;aE", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(rootContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1237), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("5kh}P!6DN&;aE", qName0.getPrefix());
      assertEquals("5kh}P!6DN&;aE", qName0.getName());
      assertEquals("5kh}P!6DN&;aE:5kh}P!6DN&;aE", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      Consumer<NodePointer> consumer0 = (Consumer<NodePointer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      nodeSetContext0.forEachRemaining(consumer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1237), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("5kh}P!6DN&;aE", qName0.getPrefix());
      assertEquals("5kh}P!6DN&;aE", qName0.getName());
      assertEquals("5kh}P!6DN&;aE:5kh}P!6DN&;aE", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName((String) null, "x-J");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("x-J", qName0.toString());
      assertEquals("x-J", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("x-J", qName0.toString());
      assertEquals("x-J", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("x-J", qName0.toString());
      assertEquals("x-J", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, expressionArray0[1]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("x-J", qName0.toString());
      assertEquals("x-J", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(263, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(263, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThan0);
      assertNotNull(predicateContext0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("x-J", qName0.toString());
      assertEquals("x-J", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&Eoa");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      boolean boolean0 = initialContext0.setPosition((-3904));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(boolean0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-3904), initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-930), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-930), coreFunction0.getFunctionCode());
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotNull(double0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-3904), initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-930), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals(0, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("4", "1347");
      assertNotNull(qName0);
      assertEquals("1347", qName0.getName());
      assertEquals("4:1347", qName0.toString());
      assertEquals("4", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("1347", qName0.getName());
      assertEquals("4:1347", qName0.toString());
      assertEquals("4", qName0.getPrefix());
      assertEquals("4:1347", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(860, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals("1347", qName0.getName());
      assertEquals("4:1347", qName0.toString());
      assertEquals("4", qName0.getPrefix());
      assertEquals("4:1347", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(860, step0.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[0] = step0;
      Step step1 = new Step(860, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals("1347", qName0.getName());
      assertEquals("4:1347", qName0.toString());
      assertEquals("4", qName0.getPrefix());
      assertEquals("4:1347", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(860, step1.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(860, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertEquals("1347", qName0.getName());
      assertEquals("4:1347", qName0.toString());
      assertEquals("4", qName0.getPrefix());
      assertEquals("4:1347", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(860, step2.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(769, nodeNameTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals(0, expressionArray1.length);
      assertEquals("1347", qName0.getName());
      assertEquals("4:1347", qName0.toString());
      assertEquals("4", qName0.getPrefix());
      assertEquals("4:1347", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(769, step3.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(0, expressionArray1.length);
      assertEquals(4, stepArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[0] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, expressionPath0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray1.length);
      assertEquals(4, stepArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("1347", qName0.getName());
      assertEquals("4:1347", qName0.toString());
      assertEquals("4", qName0.getPrefix());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(769, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(769, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNotNull(expression0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertSame(expression0, constant0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, expression0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationMultiply0);
      assertNotNull(nameAttributeTest0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertEquals("1", object0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName((String) null, "193d/H");
      assertNotNull(qName0);
      assertEquals("193d/H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("193d/H", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("193d/H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("193d/H", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      assertNotNull(coreOperationNegate0);
      assertEquals("193d/H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("193d/H", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, variableReference0);
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertEquals("193d/H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("193d/H", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      assertNotNull(coreOperationNegate1);
      assertEquals("193d/H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("193d/H", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], expressionArray0[3]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationUnion0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals("193d/H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("193d/H", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1326), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1326), coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-851));
      assertNotNull(nodeTypeTest0);
      assertEquals((-851), nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd1);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      
      expressionArray1[2] = (Expression) coreOperationAdd1;
      expressionArray1[3] = (Expression) coreOperationNegate1;
      Step step0 = new Step((-1326), nodeTypeTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(4, expressionArray1.length);
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertEquals((-1326), step0.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[0] = step0;
      Step step1 = new Step(16, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertEquals(16, step1.getAxis());
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[1] = step1;
      Step step2 = new Step(16, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertEquals(16, step2.getAxis());
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(1024, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertEquals(1024, step3.getAxis());
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-2969), nodeTypeTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2969), step4.getAxis());
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2705), nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(9, expressionArray0.length);
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertEquals((-2705), step5.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals("193d/H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("193d/H", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeTypeTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Q6)|qf=#[s");
      assertNotNull(processingInstructionTest0);
      assertEquals("Q6)|qf=#[s", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("Q6)|qf=#[s", processingInstructionTest0.getTarget());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      
      QName qName1 = new QName((String) null, (String) null);
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertNull(qName1.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "193d/H");
      assertNotNull(nodeNameTest0);
      assertEquals("193d/H", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertNull(qName1.toString());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(attributeContext0, (-851), nodeNameTest0);
      assertNull(evalContext0);
      assertEquals(9, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals("193d/H", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("193d/H", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("Q6)|qf=#[s", processingInstructionTest0.getTarget());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertNull(qName1.getPrefix());
      assertNull(qName1.getName());
      assertNull(qName1.toString());
      assertEquals("193d/H", nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals((-851), nodeTypeTest0.getNodeType());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(qName0, qName1);
      assertNotSame(coreOperationNegate0, coreOperationNegate1);
      assertNotSame(qName1, qName0);
      
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`8w&Ye3+&Eoa");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[7];
      Float float0 = new Float((-1793.449952261828));
      assertNotNull(float0);
      assertEquals((-1793.45F), (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      QName qName0 = new QName("`8w&Ye3+&Eoa");
      assertNotNull(qName0);
      assertEquals("`8w&Ye3+&Eoa", qName0.toString());
      assertEquals("`8w&Ye3+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("`8w&Ye3+&Eoa", qName0.toString());
      assertEquals("`8w&Ye3+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, coreOperationMod0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(variableReference0, variableReference0);
      assertNotNull(coreOperationMod1);
      assertEquals("`8w&Ye3+&Eoa", qName0.toString());
      assertEquals("`8w&Ye3+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      
      expressionArray0[4] = (Expression) coreOperationMod1;
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[5] = (Expression) constant1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], expressionPath0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationMod0.equals((Object)coreOperationMod1));
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-923), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-923), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `8w&Ye3+&Eoa
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(131, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(131, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(131, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-122), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-122), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals("NaN", object1);
      assertEquals((-122), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("BA|P[)s");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("BA|P[)s", qName0.toString());
      assertEquals("BA|P[)s", qName0.getName());
      
      Locale locale0 = new Locale("BA|P[)s");
      assertNotNull(locale0);
      assertEquals("ba|p[)s", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ba|p[)s", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("BA|P[)s", qName0.toString());
      assertEquals("BA|P[)s", qName0.getName());
      assertEquals("ba|p[)s", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ba|p[)s", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, nullPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("BA|P[)s", qName0.toString());
      assertEquals("BA|P[)s", qName0.getName());
      assertEquals("ba|p[)s", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ba|p[)s", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertNotNull(rootContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("BA|P[)s", qName0.toString());
      assertEquals("BA|P[)s", qName0.getName());
      assertEquals("ba|p[)s", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ba|p[)s", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("BA|P[)s", qName0.toString());
      assertEquals("BA|P[)s", qName0.getName());
      assertEquals("ba|p[)s", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ba|p[)s", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isLeaf());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: BA|P[)s
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2333), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2333), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2333), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2333), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      QName qName0 = new QName("bTWr;3?$;", "bTWr;3?$;");
      assertNotNull(qName0);
      assertEquals("bTWr;3?$;", qName0.getPrefix());
      assertEquals("bTWr;3?$;", qName0.getName());
      assertEquals("bTWr;3?$;:bTWr;3?$;", qName0.toString());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2333), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("bTWr;3?$;", qName0.getPrefix());
      assertEquals("bTWr;3?$;", qName0.getName());
      assertEquals("bTWr;3?$;:bTWr;3?$;", qName0.toString());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2333), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("bTWr;3?$;", qName0.getPrefix());
      assertEquals("bTWr;3?$;", qName0.getName());
      assertEquals("bTWr;3?$;:bTWr;3?$;", qName0.toString());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2333), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("bTWr;3?$;", qName0.getPrefix());
      assertEquals("bTWr;3?$;", qName0.getName());
      assertEquals("bTWr;3?$;:bTWr;3?$;", qName0.toString());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2333), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("bTWr;3?$;", qName0.getPrefix());
      assertEquals("bTWr;3?$;", qName0.getName());
      assertEquals("bTWr;3?$;:bTWr;3?$;", qName0.toString());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) initialContext0;
      evalContextArray0[1] = (EvalContext) rootContext1;
      evalContextArray0[2] = (EvalContext) initialContext0;
      evalContextArray0[3] = (EvalContext) initialContext0;
      evalContextArray0[4] = (EvalContext) initialContext0;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(5, evalContextArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2333), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("bTWr;3?$;", qName0.getPrefix());
      assertEquals("bTWr;3?$;", qName0.getName());
      assertEquals("bTWr;3?$;:bTWr;3?$;", qName0.toString());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(2056, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2056, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(2056, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(2056, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant constant0 = new Constant("{d?n");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) coreOperationDivide0;
      expressionArray0[7] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(8, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('{d?n', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002) div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '{d?n', '{d?n', (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002) div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("3");
      assertNotNull(qName0);
      assertEquals("3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      String string0 = extensionFunction0.toString();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals("3(null)", string0);
      assertEquals("3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("3", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(4024, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4024, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = new Double(364);
      assertNotNull(double0);
      assertEquals(364.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertTrue(object0.equals((Object)boolean0));
      
      CoreFunction coreFunction1 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(364, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.functionStartsWith((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(364, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object1.equals((Object)boolean0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationMultiply0);
      assertNotNull(nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("11", object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(true, object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertEquals(true, object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = new Double(609.36697);
      assertNotNull(double0);
      assertEquals(609.36697, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(364);
      assertNotNull(nodeTypeTest0);
      assertEquals(364, nodeTypeTest0.getNodeType());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("609.366971", object0);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(364, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.functionContains((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(364, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      CoreFunction coreFunction2 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertEquals(364, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Object object2 = coreFunction2.functionSubstring((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertEquals("609.36697", object2);
      assertEquals(364, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = new Double(609.36697);
      assertNotNull(double0);
      assertEquals(609.36697, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(364, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(364);
      assertNotNull(nodeTypeTest0);
      assertEquals(364, nodeTypeTest0.getNodeType());
      
      QName qName0 = new QName("Q", "Q");
      assertNotNull(qName0);
      assertEquals("Q:Q", qName0.toString());
      assertEquals("Q", qName0.getName());
      assertEquals("Q", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("Q:Q", qName0.toString());
      assertEquals("Q", qName0.getName());
      assertEquals("Q", qName0.getPrefix());
      assertEquals("Q:Q", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(364, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationMultiply0);
      assertNotNull(nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("11", object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(true, object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(1, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = new Double(609.36697);
      assertNotNull(double0);
      assertEquals(609.36697, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(364);
      assertNotNull(nodeTypeTest0);
      assertEquals(364, nodeTypeTest0.getNodeType());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction364()(609.36697, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      assertNotNull(nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      
      Object object0 = coreFunction0.functionSubstring(descendantContext0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("1", object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      assertNotNull(nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("11", object0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals("11", object1);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertTrue(object1.equals((Object)object0));
      
      Object object2 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object2);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(1, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(69);
      assertNotNull(nodeTypeTest0);
      assertEquals(69, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(578, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals(69, nodeTypeTest0.getNodeType());
      assertEquals(578, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(578, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertEquals(69, nodeTypeTest0.getNodeType());
      assertEquals(578, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      QName qName0 = new QName("?&#N");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("?&#N", qName0.toString());
      assertEquals("?&#N", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ";\"p.Nq9{LI");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("?&#N", qName0.toString());
      assertEquals("?&#N", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("?&#N", nodeNameTest0.toString());
      assertEquals(";\"p.Nq9{LI", nodeNameTest0.getNamespaceURI());
      
      Step step2 = new Step((-1), nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("?&#N", qName0.toString());
      assertEquals("?&#N", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("?&#N", nodeNameTest0.toString());
      assertEquals(";\"p.Nq9{LI", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionPath0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertNotNull(expressionPath1);
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      expressionArray0[2] = (Expression) expressionPath1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN()", string0);
      assertEquals(69, nodeTypeTest0.getNodeType());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Lm$95v:s");
      assertNotNull(processingInstructionTest0);
      assertEquals("Lm$95v:s", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("Lm$95v:s", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = new Double(21);
      assertNotNull(double0);
      assertEquals(21.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertNotNull(coreOperationOr0);
      assertEquals(0, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      assertNotNull(nodeTypeTest0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(21, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(21, step0.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[3], locationPath0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(7, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("substring", "substring");
      assertNotNull(qName0);
      assertEquals("substring", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("substring:substring", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("substring", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("substring:substring", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[5] = (Expression) variableReference0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals(1, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(2, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionContains(unionContext0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-255), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-255), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(19, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[2], expressionArray0[1]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-614));
      assertNotNull(nodeTypeTest0);
      assertEquals((-614), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(28, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-614), nodeTypeTest0.getNodeType());
      assertEquals(28, step0.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[0];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      Step step1 = new Step(28, nodeTypeTest0, expressionArray2);
      assertNotNull(step1);
      assertEquals(0, expressionArray2.length);
      assertEquals((-614), nodeTypeTest0.getNodeType());
      assertEquals(28, step1.getAxis());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      assertEquals(2, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN()", string0);
      assertEquals((-614), nodeTypeTest0.getNodeType());
      
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals((-614), nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      DescendantContext descendantContext0 = new DescendantContext(precedingOrFollowingContext0, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals((-614), nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = new Double(609.36697);
      assertNotNull(double0);
      assertEquals(609.36697, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(364, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      
      Object object0 = coreFunction0.functionSubstringBefore(unionContext0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(364, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, unionContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      String string0 = "F89";
      QName qName0 = new QName("F89");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertEquals("F89", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Step step0 = new Step(973, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertEquals("F89", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(973, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(973, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertEquals("F89", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(973, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F89");
      assertFalse(boolean0);
      
      Step step2 = new Step(973, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertEquals("F89", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(973, step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals("F89", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals("F89", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertNull(qName0.getPrefix());
      assertEquals("F89", qName0.toString());
      assertEquals("F89", qName0.getName());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("F89", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      // Undeclared exception!
      coreFunction0.functionFloor(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      assertNotNull(nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(647);
      assertNotNull(nodeTypeTest0);
      assertEquals(647, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(647, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(647, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(647, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      Pointer pointer0 = attributeContext0.getContextNodePointer();
      assertNull(pointer0);
      assertEquals(647, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeTypeTest0, true, false);
      assertNotNull(childContext0);
      assertEquals(647, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      
      Object object0 = coreFunction0.functionConcat(childContext0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("00", object0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(647, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals("00", object1);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertTrue(object1.equals((Object)object0));
      
      Object object2 = coreFunction0.functionSubstringAfter(selfContext0);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object2);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(647, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(". It cannot be converted to ");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreOperationEqual0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, coreOperationDivide0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-65536), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-65536), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Step[] stepArray0 = new Step[1];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-963), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-963), step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreOperationSubtract0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionPath0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationSubtract1);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract1, coreOperationSubtract0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(coreOperationSubtract0.equals((Object)coreOperationSubtract1));
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionLang(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`w&Y3+&Eoa");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction((-134217536), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-134217536), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Double double0 = (Double)coreFunction0.functionNumber(initialContext0);
      assertNotNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals((-134217536), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals((-134217536), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      ParentContext parentContext0 = new ParentContext(initialContext0, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      
      NodePointer nodePointer0 = parentContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName(".Fw[S*J<W{_RG");
      assertNotNull(qName0);
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "XU-s;eu8Gn_Q{|c!dt");
      assertNotNull(nodeNameTest0);
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(968, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertEquals(968, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-621), nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertEquals((-621), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(1949, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertEquals(1949, step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(968, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertEquals(968, step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-621), nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertEquals((-621), step4.getAxis());
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      
      stepArray0[4] = step4;
      Step step5 = new Step(1949, nodeNameTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertEquals(1949, step5.getAxis());
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      
      stepArray0[5] = step5;
      Step step6 = new Step(968, nodeNameTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(6, expressionArray0.length);
      assertEquals(968, step6.getAxis());
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      
      stepArray0[6] = step6;
      Step step7 = new Step((-3099), nodeNameTest0, expressionArray0);
      assertNotNull(step7);
      assertEquals(6, expressionArray0.length);
      assertEquals((-3099), step7.getAxis());
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      
      stepArray0[7] = step7;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThan0, expressionArray1[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(8, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[3] = (Expression) coreOperationEqual0;
      expressionArray1[4] = (Expression) coreOperationNotEqual0;
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      expressionArray1[6] = (Expression) coreOperationNotEqual0;
      expressionArray1[7] = (Expression) coreOperationNotEqual0;
      Step step8 = new Step((-621), nodeNameTest0, expressionArray1);
      assertNotNull(step8);
      assertEquals(8, expressionArray1.length);
      assertEquals((-621), step8.getAxis());
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[4], expressionArray1[2]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray1.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant1 = new Constant("XU-s;eu8Gn_Q{|c!dt");
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[2] = (Expression) constant1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant1, constant1);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Constant constant2 = new Constant(double0);
      assertNotNull(constant2);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      
      expressionArray0[4] = (Expression) constant2;
      Step[] stepArray1 = new Step[9];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step3;
      stepArray1[1] = step5;
      Step step9 = new Step(21790719, nodeNameTest0, expressionArray1);
      assertNotNull(step9);
      assertEquals(8, expressionArray1.length);
      assertEquals(21790719, step9.getAxis());
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertFalse(step9.equals((Object)step0));
      assertFalse(step9.equals((Object)step6));
      assertFalse(step9.equals((Object)step8));
      assertFalse(step9.equals((Object)step4));
      assertFalse(step9.equals((Object)step7));
      assertFalse(step9.equals((Object)step1));
      assertFalse(step9.equals((Object)step5));
      assertFalse(step9.equals((Object)step2));
      assertFalse(step9.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray1[2] = step9;
      stepArray1[3] = step7;
      stepArray1[4] = step1;
      stepArray1[5] = step1;
      stepArray1[6] = step2;
      stepArray1[7] = step4;
      stepArray1[8] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray1);
      assertNotNull(locationPath0);
      assertEquals(9, stepArray1.length);
      assertTrue(locationPath0.isAbsolute());
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(968, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(968, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[3]);
      assertNotNull(predicateContext0);
      assertEquals(6, expressionArray0.length);
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals(6, expressionArray0.length);
      assertEquals(".Fw[S*J<W{_RG", qName0.toString());
      assertEquals(".Fw[S*J<W{_RG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(".Fw[S*J<W{_RG", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("XU-s;eu8Gn_Q{|c!dt", nodeNameTest0.getNamespaceURI());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      coreFunction0.functionTrue(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("Z@].");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, expressionArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("bH:6j/i&");
      assertNotNull(qName0);
      assertEquals("bH:6j/i&", qName0.toString());
      assertEquals("6j/i&", qName0.getName());
      assertEquals("bH", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("bH:6j/i&", qName0.toString());
      assertEquals("6j/i&", qName0.getName());
      assertEquals("bH", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, expressionArray0[2]);
      assertNotNull(coreOperationMultiply1);
      assertEquals(4, expressionArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      
      Step[] stepArray0 = new Step[8];
      QName qName1 = new QName("");
      assertNotNull(qName1);
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(qName1.equals((Object)qName0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(qName1.equals((Object)qName0));
      
      Step step0 = new Step(4454, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(4454, step0.getAxis());
      assertFalse(qName1.equals((Object)qName0));
      
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(13, step1.getAxis());
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-6239), nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertEquals((-6239), step2.getAxis());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(qName1.equals((Object)qName0));
      
      stepArray0[2] = step2;
      Step step3 = new Step((-1137), nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertEquals((-1137), step3.getAxis());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(qName1.equals((Object)qName0));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-6239), nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(4, expressionArray0.length);
      assertEquals((-6239), step4.getAxis());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(qName1.equals((Object)qName0));
      
      stepArray0[4] = step4;
      Step step5 = new Step((-6239), nodeNameTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(4, expressionArray0.length);
      assertEquals((-6239), step5.getAxis());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(qName1.equals((Object)qName0));
      
      stepArray0[5] = step5;
      Step step6 = new Step(25, nodeNameTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(4, expressionArray0.length);
      assertEquals(25, step6.getAxis());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(qName1.equals((Object)qName0));
      
      stepArray0[6] = step6;
      Step step7 = new Step(4793, nodeNameTest0, expressionArray0);
      assertNotNull(step7);
      assertEquals(4, expressionArray0.length);
      assertEquals(4793, step7.getAxis());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(qName1.equals((Object)qName0));
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply1, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply1));
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(669, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(669, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertFalse(qName1.equals((Object)qName0));
      
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertFalse(qName1.equals((Object)qName0));
      
      // Undeclared exception!
      coreFunction0.functionID(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationMod0, coreOperationSubtract0);
      assertNotNull(coreOperationMod1);
      assertEquals(5, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      
      expressionArray0[4] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction((-697), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-697), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertNotNull(parentContext0);
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("gO/?''WTb*Yl6Xz\"k", (String) null);
      assertNotNull(qName0);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      assertNotNull(coreOperationMod0);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[9];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate1);
      assertEquals(6, expressionArray0.length);
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      expressionArray1[1] = (Expression) coreOperationNegate1;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, expressionArray1[4]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray1.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[5] = (Expression) coreOperationSubtract0;
      expressionArray1[6] = (Expression) variableReference0;
      expressionArray1[7] = (Expression) coreOperationMod0;
      expressionArray1[8] = (Expression) coreOperationGreaterThanOrEqual0;
      Step step0 = new Step(2307, nodeNameTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(9, expressionArray1.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(2307, step0.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[0] = step0;
      Step step1 = new Step((-840), nodeNameTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals(9, expressionArray1.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals((-840), step1.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-840), nodeNameTest0, expressionArray1);
      assertNotNull(step2);
      assertEquals(9, expressionArray1.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertEquals((-840), step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(2307, nodeNameTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals(9, expressionArray1.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertEquals(2307, step3.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-840), nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertEquals((-840), step4.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      
      stepArray0[4] = step4;
      Step step5 = new Step(27, nodeNameTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertEquals(27, step5.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      
      stepArray0[5] = step5;
      Step step6 = new Step(9, nodeNameTest0, expressionArray1);
      assertNotNull(step6);
      assertEquals(9, expressionArray1.length);
      assertEquals(9, step6.getAxis());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[6] = step6;
      Step step7 = new Step((-840), nodeNameTest0, expressionArray1);
      assertNotNull(step7);
      assertEquals(9, expressionArray1.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals((-840), step7.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[7] = step7;
      Step step8 = new Step(9, nodeNameTest0, expressionArray1);
      assertNotNull(step8);
      assertEquals(9, expressionArray1.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(9, step8.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(9, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[2], expressionArray0[1]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(6, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[2], variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray1.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray1.length);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-840), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-840), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", qName0.toString());
      assertEquals("gO/?''WTb*Yl6Xz\"k", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("gO/?''WTb*Yl6Xz\"k:null", nodeNameTest0.toString());
      
      // Undeclared exception!
      coreFunction0.functionCeiling(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName(">G-7lYfZjQS3");
      assertNotNull(qName0);
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ">G-7lYfZjQS3");
      assertNotNull(nodeNameTest0);
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.getNamespaceURI());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.getNamespaceURI());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.getNamespaceURI());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-4547), nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.getNamespaceURI());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-4547), step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(9, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.getNamespaceURI());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(9, step3.getAxis());
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step4 = new Step((-697), nodeNameTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals(0, expressionArray1.length);
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.getNamespaceURI());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-697), step4.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      
      stepArray0[4] = step4;
      Step step5 = new Step((-4547), nodeNameTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(1, expressionArray0.length);
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.getNamespaceURI());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-4547), step5.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      
      stepArray0[5] = step5;
      Step step6 = new Step(9, nodeNameTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(1, expressionArray0.length);
      assertEquals(9, step6.getAxis());
      assertEquals(">G-7lYfZjQS3", qName0.getName());
      assertEquals(">G-7lYfZjQS3", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.getNamespaceURI());
      assertEquals(">G-7lYfZjQS3", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      
      stepArray0[6] = step6;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("328oiKK&7,1@w:V");
      assertNotNull(processingInstructionTest0);
      assertEquals("328oiKK&7,1@w:V", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertNotNull(coreOperationAdd0);
      assertEquals(0, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationAdd0;
      Step step7 = new Step(0, processingInstructionTest0, expressionArray2);
      assertNotNull(step7);
      assertEquals(1, expressionArray2.length);
      assertEquals("328oiKK&7,1@w:V", processingInstructionTest0.getTarget());
      assertEquals(0, step7.getAxis());
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step6));
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(860, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(860, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("()");
      assertNotNull(qName0);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertNotNull(variableReference1);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.equals((Object)variableReference0));
      
      expressionArray0[1] = (Expression) variableReference1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      assertNotNull(coreOperationDivide0);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertFalse(variableReference0.equals((Object)variableReference1));
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(79, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(79, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variableReference1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotSame(variableReference1, variableReference0);
      
      Integer integer0 = new Integer(79);
      assertNotNull(integer0);
      assertEquals(79, (int)integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(variableReference1, variableReference0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getConstantContext(variableReference0);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(variableReference0, variableReference1);
      assertNotSame(variableReference1, variableReference0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      coreFunction0.functionRound(initialContext0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("(R<s;");
      assertNotNull(processingInstructionTest0);
      assertEquals("(R<s;", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-6), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("(R<s;", processingInstructionTest0.getTarget());
      assertEquals((-6), step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionPath0);
      assertNotNull(coreOperationMod0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      Constant constant0 = new Constant("(R<s;");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("(R<s;");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("(R<s;", qName0.toString());
      assertEquals("(R<s;", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("(R<s;", qName0.toString());
      assertEquals("(R<s;", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(890, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(33, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(33, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(664, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(664, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("NaN", object0);
      assertEquals(664, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("..|j2#ZLY");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("..|j2#ZLY", qName0.toString());
      assertEquals("..|j2#ZLY", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("..|j2#ZLY", qName0.toString());
      assertEquals("..|j2#ZLY", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2375));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(3815, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      assertEquals(3815, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(32768, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      assertEquals(32768, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(21, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      assertEquals(21, step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      assertEquals(1, step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      Step step4 = new Step(3815, nodeTypeTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals(4, expressionArray1.length);
      assertEquals(3815, step4.getAxis());
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[4] = step4;
      Step step5 = new Step(84, nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(5, expressionArray0.length);
      assertEquals(84, step5.getAxis());
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      
      stepArray0[5] = step5;
      Step step6 = new Step(2384, (NodeTest) null, expressionArray1);
      assertNotNull(step6);
      assertEquals(4, expressionArray1.length);
      assertEquals(2384, step6.getAxis());
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[6] = step6;
      Step step7 = new Step(1105, nodeTypeTest0, expressionArray0);
      assertNotNull(step7);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      assertEquals(1105, step7.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      
      stepArray0[7] = step7;
      Step step8 = new Step(1283, nodeTypeTest0, expressionArray1);
      assertNotNull(step8);
      assertEquals(4, expressionArray1.length);
      assertEquals((-2375), nodeTypeTest0.getNodeType());
      assertEquals(1283, step8.getAxis());
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step6));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(9, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(4, expressionArray1.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[2]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, expressionArray1[0]);
      assertNotNull(coreOperationLessThan1);
      assertEquals(5, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[4] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(115, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("1TzBofuc=a47");
      assertNotNull(qName0);
      assertEquals("1TzBofuc=a47", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("1TzBofuc=a47", qName0.getName());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, (Locale) null);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("1TzBofuc=a47", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("1TzBofuc=a47", qName0.getName());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, beanPointer0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("1TzBofuc=a47", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("1TzBofuc=a47", qName0.getName());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("1TzBofuc=a47", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("1TzBofuc=a47", qName0.getName());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction1);
      assertNotNull(predicateContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("1TzBofuc=a47", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("1TzBofuc=a47", qName0.getName());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNotNull(jXPathContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext(rootContext0, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, selfContext0, nullPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      CoreFunction coreFunction0 = new CoreFunction((-3472), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3472), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      QName qName0 = new QName("`w&Y+&Eoa", "string");
      assertNotNull(qName0);
      assertEquals("`w&Y+&Eoa", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("`w&Y+&Eoa:string", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("`w&Y+&Eoa", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("`w&Y+&Eoa:string", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) variablePointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("`w&Y+&Eoa", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("`w&Y+&Eoa:string", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName1 = new QName("<<unknown namespace>>");
      assertNotNull(qName1);
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("<<unknown namespace>>", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      
      BasicVariables basicVariables1 = new BasicVariables();
      assertNotNull(basicVariables1);
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      
      VariablePointer variablePointer1 = new VariablePointer(basicVariables1, qName1);
      assertNotNull(variablePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("<<unknown namespace>>", qName1.toString());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(variablePointer1.equals((Object)variablePointer0));
      
      VariablePointer variablePointer2 = (VariablePointer)variablePointer1.createPath((JXPathContext) null, (Object) qName0);
      assertNotNull(variablePointer2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("`w&Y+&Eoa", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("`w&Y+&Eoa:string", qName0.toString());
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("<<unknown namespace>>", qName1.toString());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer2.getIndex());
      assertTrue(variablePointer2.isActual());
      assertFalse(variablePointer2.isAttribute());
      assertFalse(variablePointer2.isNode());
      assertNull(variablePointer2.getNamespaceURI());
      assertTrue(variablePointer2.isRoot());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(variablePointer1.equals((Object)variablePointer0));
      assertFalse(variablePointer2.equals((Object)variablePointer0));
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer1, variablePointer2);
      assertNotSame(variablePointer1, variablePointer0);
      assertSame(variablePointer2, variablePointer1);
      assertNotSame(variablePointer2, variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, basicVariables1, variablePointer2);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("`w&Y+&Eoa", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("`w&Y+&Eoa:string", qName0.toString());
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("<<unknown namespace>>", qName1.toString());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer2.getIndex());
      assertTrue(variablePointer2.isActual());
      assertFalse(variablePointer2.isAttribute());
      assertFalse(variablePointer2.isNode());
      assertNull(variablePointer2.getNamespaceURI());
      assertTrue(variablePointer2.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(variablePointer1.equals((Object)variablePointer0));
      assertFalse(variablePointer2.equals((Object)variablePointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("`w&Y+&Eoa", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("`w&Y+&Eoa:string", qName0.toString());
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("<<unknown namespace>>", qName1.toString());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer2.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer2.getIndex());
      assertTrue(variablePointer2.isActual());
      assertFalse(variablePointer2.isAttribute());
      assertFalse(variablePointer2.isNode());
      assertNull(variablePointer2.getNamespaceURI());
      assertTrue(variablePointer2.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(variablePointer1.equals((Object)variablePointer0));
      assertFalse(variablePointer2.equals((Object)variablePointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer1, variablePointer2);
      assertNotSame(variablePointer1, variablePointer0);
      assertSame(variablePointer2, variablePointer1);
      assertNotSame(variablePointer2, variablePointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant(Integer.MIN_VALUE);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      Step[] stepArray0 = new Step[1];
      String string0 = basicVariables1.toString();
      assertNotNull(string0);
      assertEquals("{<<unknown namespace>>=`w&Y+&Eoa:string}", string0);
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertNotSame(basicVariables1, basicVariables0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "{");
      assertNotNull(nodeNameTest0);
      assertEquals("`w&Y+&Eoa", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("`w&Y+&Eoa:string", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("`w&Y+&Eoa:string", nodeNameTest0.toString());
      assertEquals("{", nodeNameTest0.getNamespaceURI());
      assertFalse(qName0.equals((Object)qName1));
      
      Step step0 = new Step(536, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals(536, step0.getAxis());
      assertEquals("`w&Y+&Eoa", qName0.getPrefix());
      assertEquals("string", qName0.getName());
      assertEquals("`w&Y+&Eoa:string", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("`w&Y+&Eoa:string", nodeNameTest0.toString());
      assertEquals("{", nodeNameTest0.getNamespaceURI());
      assertFalse(qName0.equals((Object)qName1));
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, expressionPath0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath1 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath1);
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      expressionArray0[1] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      coreFunction1.functionLast(initialContext0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("round");
      assertNotNull(qName0);
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "xml");
      assertNotNull(nodeNameTest0);
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("xml", nodeNameTest0.getNamespaceURI());
      assertEquals("round", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(4155, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("xml", nodeNameTest0.getNamespaceURI());
      assertEquals("round", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(4155, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4155, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(4155, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("xml", nodeNameTest0.getNamespaceURI());
      assertEquals("round", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(4155, step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl1).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertFalse(namespaceResolver0.isSealed());
      
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
      assertFalse(namespaceResolver0.isSealed());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, rootContext0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("xml", nodeNameTest0.getNamespaceURI());
      assertEquals("round", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(4155, step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("xml", nodeNameTest0.getNamespaceURI());
      assertEquals("round", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(4155, step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(initialContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(648, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(648, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      assertNotNull(childContext0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) childContext0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(1, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(648, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, attributeContext0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(648, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertEquals(648, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`w&Y+&Eoa");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("`w&Y+&Eoa");
      assertNotNull(qName0);
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
      assertNotNull(variablePointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer1.isNode());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      
      CoreFunction coreFunction0 = new CoreFunction(3027, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(3027, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer1);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer1.isNode());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer1.isNode());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) selfContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) selfContext0;
      evalContextArray0[5] = (EvalContext) selfContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) selfContext0;
      evalContextArray0[8] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(9, evalContextArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer1.isNode());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-451), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      Iterator iterator0 = coreFunction1.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      expressionArray0[3] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[5];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1695);
      assertNotNull(nodeTypeTest0);
      assertEquals(1695, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(671, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1695, nodeTypeTest0.getNodeType());
      assertEquals(671, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1695, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertEquals(1695, nodeTypeTest0.getNodeType());
      assertEquals(1695, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(6, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertEquals(6, step2.getAxis());
      assertEquals(1695, nodeTypeTest0.getNodeType());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(13, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertEquals(13, step3.getAxis());
      assertEquals(1695, nodeTypeTest0.getNodeType());
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      
      stepArray0[3] = step3;
      Step step4 = new Step(13, nodeTypeTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertEquals(13, step4.getAxis());
      assertEquals(1695, nodeTypeTest0.getNodeType());
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, expressionPath0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAdd0);
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      expressionArray0[8] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(1695, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(9, expressionArray0.length);
      assertEquals(1695, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction2.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(3159, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(3159, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("d6'!");
      assertNotNull(qName0);
      assertEquals("d6'!", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("d6'!", qName0.getName());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, expressionArray0[1], locale0);
      assertNotNull(beanPointer0);
      assertEquals(2, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("d6'!", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("d6'!", qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("d6'!", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("d6'!", qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("d6'!", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("d6'!", qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("d6'!", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("d6'!", qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(2, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("d6'!", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("d6'!", qName0.getName());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1091, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1091, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(3, expressionArray0.length);
      assertEquals("unknownFunction1091()", string0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1091, coreFunction0.getFunctionCode());
      
      String string1 = coreFunction0.getFunctionName();
      assertNotNull(string1);
      assertEquals(3, expressionArray0.length);
      assertEquals("unknownFunction1091()", string1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1091, coreFunction0.getFunctionCode());
      assertTrue(string1.equals((Object)string0));
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(true, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertFalse(object0.equals((Object)boolean0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28, (byte)77, (byte)43, (byte)43}, byteArray0);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction((byte)28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg2();
      assertNull(expression0);
      assertEquals(5, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("x^v", "x^v");
      assertNotNull(qName0);
      assertEquals("x^v:x^v", qName0.toString());
      assertEquals("x^v", qName0.getName());
      assertEquals("x^v", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("x^v:x^v", qName0.toString());
      assertEquals("x^v", qName0.getName());
      assertEquals("x^v", qName0.getPrefix());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], expressionArray0[2]);
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("e};gVbJRt<k&WC48Sp");
      assertNotNull(processingInstructionTest0);
      assertEquals("e};gVbJRt<k&WC48Sp", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(3, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals("e};gVbJRt<k&WC48Sp", processingInstructionTest0.getTarget());
      assertEquals(3, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2389, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals("e};gVbJRt<k&WC48Sp", processingInstructionTest0.getTarget());
      assertEquals(2389, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Invalid argument type for 'sum': ");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step2 = new Step((-837), nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-837), step2.getAxis());
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step((-837), nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-837), step3.getAxis());
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step(16, nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("Invalid argument type for 'sum': ", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(16, step4.getAxis());
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      Step step5 = new Step(3, (NodeTest) null, expressionArray0);
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, step5.getAxis());
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      
      stepArray0[5] = step5;
      Step step6 = new Step(3, processingInstructionTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, step6.getAxis());
      assertEquals("e};gVbJRt<k&WC48Sp", processingInstructionTest0.getTarget());
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationAnd0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("1~:%9*x1WcQ", "1~:%9*x1WcQ");
      assertNotNull(qName0);
      assertEquals("1~:%9*x1WcQ:1~:%9*x1WcQ", qName0.toString());
      assertEquals("1~:%9*x1WcQ", qName0.getName());
      assertEquals("1~:%9*x1WcQ", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("1~:%9*x1WcQ:1~:%9*x1WcQ", qName0.toString());
      assertEquals("1~:%9*x1WcQ", qName0.getName());
      assertEquals("1~:%9*x1WcQ", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[4], expressionArray0[1]);
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I.^XDB0)Gr13$']b'");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(12, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(12, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("UT=\"_\"Bz");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationNegate0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationNegate0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, expressionArray0[2]);
      assertNotNull(coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationNegate0, constant0);
      assertNotNull(coreOperationLessThan1);
      assertEquals(8, expressionArray0.length);
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      
      expressionArray0[6] = (Expression) coreOperationLessThan1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], coreOperationNotEqual0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(5, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(unionContext0, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals(5, evalContextArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(947, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(947, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Step[] stepArray1 = new Step[7];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step0;
      stepArray1[1] = step1;
      stepArray1[2] = step0;
      stepArray1[3] = step0;
      stepArray1[4] = step1;
      stepArray1[5] = step0;
      stepArray1[6] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray1);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(7, stepArray1.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      expressionArray1[0] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray1[0], expressionPath0);
      assertNotNull(nameAttributeTest1);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      assertEquals(7, stepArray1.length);
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      expressionArray1[1] = (Expression) nameAttributeTest1;
      QName qName0 = new QName("}gMr ~(<+9mp1|z|^mO", "}gMr ~(<+9mp1|z|^mO");
      assertNotNull(qName0);
      assertEquals("}gMr ~(<+9mp1|z|^mO:}gMr ~(<+9mp1|z|^mO", qName0.toString());
      assertEquals("}gMr ~(<+9mp1|z|^mO", qName0.getPrefix());
      assertEquals("}gMr ~(<+9mp1|z|^mO", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals("}gMr ~(<+9mp1|z|^mO:}gMr ~(<+9mp1|z|^mO", qName0.toString());
      assertEquals("}gMr ~(<+9mp1|z|^mO", qName0.getPrefix());
      assertEquals("}gMr ~(<+9mp1|z|^mO", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[2] = (Expression) extensionFunction0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray1[2], expressionArray1, stepArray0);
      assertNotNull(expressionPath1);
      assertEquals(9, stepArray0.length);
      assertEquals(4, expressionArray1.length);
      assertFalse(stepArray0.equals((Object)stepArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      expressionArray1[3] = (Expression) expressionPath1;
      Step step2 = new Step(2945, nodeTypeTest0, expressionArray1);
      assertNotNull(step2);
      assertEquals(4, expressionArray1.length);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(2945, step2.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step((-59), nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals((-59), step3.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[7];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) expressionPath0;
      expressionArray2[1] = (Expression) nameAttributeTest1;
      expressionArray2[2] = (Expression) nameAttributeTest1;
      expressionArray2[3] = (Expression) nameAttributeTest1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[1], expressionArray2[3]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, expressionArray1.length);
      assertEquals(7, expressionArray2.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[4] = (Expression) coreOperationNotEqual0;
      expressionArray2[5] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray2[3], expressionArray2[2]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray2.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[6] = (Expression) coreOperationGreaterThanOrEqual0;
      Step step4 = new Step(21, nodeTypeTest0, expressionArray2);
      assertNotNull(step4);
      assertEquals(7, expressionArray2.length);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(21, step4.getAxis());
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      stepArray0[4] = step4;
      Step step5 = new Step(1, nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(1, step5.getAxis());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      
      stepArray0[5] = step5;
      Step step6 = new Step(2945, nodeTypeTest0, expressionArray1);
      assertNotNull(step6);
      assertEquals(4, expressionArray1.length);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(2945, step6.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      
      stepArray0[6] = step6;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("}gMr ~(<+9mp1|z|^mO:}gMr ~(<+9mp1|z|^mO", qName0.toString());
      assertEquals("}gMr ~(<+9mp1|z|^mO", qName0.getPrefix());
      assertEquals("}gMr ~(<+9mp1|z|^mO", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("}gMr ~(<+9mp1|z|^mO:}gMr ~(<+9mp1|z|^mO", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step7 = new Step(1340, nodeNameTest0, expressionArray2);
      assertNotNull(step7);
      assertEquals(7, expressionArray2.length);
      assertEquals("}gMr ~(<+9mp1|z|^mO:}gMr ~(<+9mp1|z|^mO", qName0.toString());
      assertEquals("}gMr ~(<+9mp1|z|^mO", qName0.getPrefix());
      assertEquals("}gMr ~(<+9mp1|z|^mO", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("}gMr ~(<+9mp1|z|^mO:}gMr ~(<+9mp1|z|^mO", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1340, step7.getAxis());
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      
      stepArray0[7] = step7;
      Step step8 = new Step(1340, nodeTypeTest0, expressionArray2);
      assertNotNull(step8);
      assertEquals(7, expressionArray2.length);
      assertEquals(1340, step8.getAxis());
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step6));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertFalse(stepArray0.equals((Object)stepArray1));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, expressionArray2[4]);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, stepArray0.length);
      assertEquals(7, expressionArray2.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(stepArray0.equals((Object)stepArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual((Expression) null, expressionPath0);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(3, expressionArray0.length);
      assertEquals(7, stepArray1.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(2945, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2945, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(60, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(60, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("", "floor");
      assertNotNull(qName0);
      assertEquals(":floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "floor");
      assertNotNull(nodeNameTest0);
      assertEquals(":floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":floor", nodeNameTest0.toString());
      assertEquals("floor", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(":floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":floor", nodeNameTest0.toString());
      assertEquals("floor", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals(":floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":floor", nodeNameTest0.toString());
      assertEquals("floor", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-74));
      assertNotNull(nodeTypeTest0);
      assertEquals((-74), nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(":floor", qName0.toString());
      assertEquals("floor", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":floor", nodeNameTest0.toString());
      assertEquals("floor", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals((-74), nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1481, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1481, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object1 = coreFunction1.functionFloor((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNull(expression0);
      assertEquals(6, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("false");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], expressionArray0[2]);
      assertNotNull(coreOperationDivide0);
      assertEquals(6, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      Expression expression1 = coreFunction0.getArg2();
      assertNotNull(expression1);
      assertEquals(6, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertTrue(expression1.computeContextDependent());
      assertSame(expression1, extensionFunction0);
      
      expressionArray0[4] = expression1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationAdd0;
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1273, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(1273, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-451), (Expression[]) null);
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-451), coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`w&Y+&Eoa");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("`w&Y+&Eoa");
      assertNotNull(qName0);
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      
      BasicVariables basicVariables1 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertNotNull(basicVariables1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertNotSame(basicVariables1, basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables1, qName0);
      assertNotNull(variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
      assertNotNull(variablePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertNotSame(basicVariables0, basicVariables1);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, qName0, variablePointer1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(basicVariables0, basicVariables1);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1426), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1426), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals((-1426), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(basicVariables0, basicVariables1);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals((-1426), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Double double1 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotNull(double1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double1, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals((-1426), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(basicVariables0, basicVariables1);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1426()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Integer integer0 = new Integer((-923));
      assertNotNull(integer0);
      assertEquals((-923), (int)integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) integer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("7:d~\"C,7O!6k)V", "7:d~\"C,7O!6k)V");
      assertNotNull(qName0);
      assertEquals("7:d~\"C,7O!6k)V:7:d~\"C,7O!6k)V", qName0.toString());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getPrefix());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getName());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("7:d~\"C,7O!6k)V:7:d~\"C,7O!6k)V", qName0.toString());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getPrefix());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("7:d~\"C,7O!6k)V:7:d~\"C,7O!6k)V", qName0.toString());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getPrefix());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("7:d~\"C,7O!6k)V:7:d~\"C,7O!6k)V", qName0.toString());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getPrefix());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("7:d~\"C,7O!6k)V:7:d~\"C,7O!6k)V", qName0.toString());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getPrefix());
      assertEquals("7:d~\"C,7O!6k)V", qName0.getName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 7:d~\"C,7O!6k)V:7:d~\"C,7O!6k)V
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionCeiling((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)double0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object1 = coreFunction0.functionString((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals("1", object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-451), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("1", object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object1 = coreFunction1.functionNamespaceURI((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(coreFunction1, coreFunction0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, int0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      Object object2 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Integer integer0 = new Integer(59);
      assertNotNull(integer0);
      assertEquals(59, (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("oss72n|Nab");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("oss72n|Nab", qName0.toString());
      assertEquals("oss72n|Nab", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("oss72n|Nab", qName0.toString());
      assertEquals("oss72n|Nab", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("oss72n|Nab", qName0.toString());
      assertEquals("oss72n|Nab", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("oss72n|Nab", qName0.toString());
      assertEquals("oss72n|Nab", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("oss72n|Nab", qName0.toString());
      assertEquals("oss72n|Nab", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-3606), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-3606), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "`w&Y+&Eoa");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("`w&Y+&Eoa");
      assertNotNull(qName0);
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      
      BasicVariables basicVariables1 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertNotNull(basicVariables1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertNotSame(basicVariables1, basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables1, qName0);
      assertNotNull(variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) null, (Object) basicVariables0);
      assertNotNull(variablePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isActual());
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertNotSame(basicVariables0, basicVariables1);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, qName0, variablePointer1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(basicVariables0, basicVariables1);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1426), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1426), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("`w&Y+&Eoa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("`w&Y+&Eoa", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertTrue(variablePointer1.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isActual());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals((-1426), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(basicVariables0.equals((Object)basicVariables1));
      assertFalse(basicVariables1.equals((Object)basicVariables0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(basicVariables0, basicVariables1);
      assertNotSame(basicVariables1, basicVariables0);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2155, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2155, coreFunction0.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationLessThan coreOperationLessThan1 = (CoreOperationLessThan)coreFunction0.getArg1();
      assertNotNull(coreOperationLessThan1);
      assertEquals(2, expressionArray1.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2155, coreFunction0.getFunctionCode());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(coreOperationLessThan1, coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction1 = new CoreFunction(2155, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2155, coreFunction1.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MAX_VALUE, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(Integer.MAX_VALUE, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(Integer.MAX_VALUE, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(Integer.MAX_VALUE, coreFunction0.getFunctionCode());
      assertTrue(object1.equals((Object)boolean0));
      
      Object object2 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(Integer.MAX_VALUE, coreFunction0.getFunctionCode());
      assertFalse(object2.equals((Object)double0));
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals("unknownFunction2147483647()(0)", string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(Integer.MAX_VALUE, coreFunction0.getFunctionCode());
      assertFalse(string0.equals((Object)object0));
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, int0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(Integer.MAX_VALUE, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2147483647()(0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      int int0 = new Integer(28);
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-451), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("1", object0);
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object1.equals((Object)double0));
      assertNotSame(coreFunction0, coreFunction1);
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean1);
      assertEquals((-451), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationMod0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      String string0 = coreOperationMod0.toString();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-451), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-451), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("XBeanInfo");
      assertNotNull(processingInstructionTest0);
      assertEquals("XBeanInfo", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("XBeanInfo", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("/vhMHK$<bq");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("D", "");
      assertNotNull(qName0);
      assertEquals("D", qName0.getPrefix());
      assertEquals("D:", qName0.toString());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("D", qName0.getPrefix());
      assertEquals("D:", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[3], coreOperationAdd0);
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(165, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(165, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("D");
      assertNotNull(processingInstructionTest0);
      assertEquals("D", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("D", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals("D", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("D", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionStringLength(selfContext0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      QName qName0 = new QName("7Y,0tqb+mMr", "du9X");
      assertNotNull(qName0);
      assertEquals("7Y,0tqb+mMr:du9X", qName0.toString());
      assertEquals("7Y,0tqb+mMr", qName0.getPrefix());
      assertEquals("du9X", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("7Y,0tqb+mMr:du9X", qName0.toString());
      assertEquals("7Y,0tqb+mMr", qName0.getPrefix());
      assertEquals("du9X", qName0.getName());
      assertEquals("7Y,0tqb+mMr:du9X", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("7Y,0tqb+mMr:du9X", qName0.toString());
      assertEquals("7Y,0tqb+mMr", qName0.getPrefix());
      assertEquals("du9X", qName0.getName());
      assertEquals("7Y,0tqb+mMr:du9X", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      Object object0 = coreFunction0.computeValue(ancestorContext0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("7Y,0tqb+mMr:du9X", qName0.toString());
      assertEquals("7Y,0tqb+mMr", qName0.getPrefix());
      assertEquals("du9X", qName0.getName());
      assertEquals("7Y,0tqb+mMr:du9X", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(object0.equals((Object)double0));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(3198, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3198, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(true, object0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean2);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, int0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant("RxJ5 w*!_-0w+T#;");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], expressionArray0[1]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(7, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      Constant constant1 = new Constant("RxJ5 w*!_-0w+T#;");
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[5] = (Expression) constant1;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1821), (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertEquals((-1821), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionSubstring(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(3, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(0, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray1.length);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) > (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), null, )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Constant constant0 = new Constant("l0'jqJf");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      QName qName0 = new QName("", "l0'jqJf");
      assertNotNull(qName0);
      assertEquals("l0'jqJf", qName0.getName());
      assertEquals(":l0'jqJf", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "a;#HF2-Zx*396>");
      assertNotNull(nodeNameTest0);
      assertEquals("l0'jqJf", qName0.getName());
      assertEquals(":l0'jqJf", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":l0'jqJf", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a;#HF2-Zx*396>", nodeNameTest0.getNamespaceURI());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("l0'jqJf", qName0.getName());
      assertEquals(":l0'jqJf", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":l0'jqJf", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a;#HF2-Zx*396>", nodeNameTest0.getNamespaceURI());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      
      Iterator iterator0 = constant0.iterate(precedingOrFollowingContext0);
      assertNotNull(iterator0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("l0'jqJf", qName0.getName());
      assertEquals(":l0'jqJf", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":l0'jqJf", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("a;#HF2-Zx*396>", nodeNameTest0.getNamespaceURI());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'l0'jqJf'", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, (Expression) null);
      assertNotNull(coreOperationSubtract0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      boolean boolean0 = coreOperationSubtract0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      String string1 = coreOperationMultiply0.toString();
      assertNotNull(string1);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Integer integer0 = new Integer(27);
      assertNotNull(integer0);
      assertEquals(27, (int)integer0);
      
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      assertNotNull(childContext0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(childContext0, nodeNameTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      Object object0 = coreFunction1.computeValue(attributeContext0);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(1159, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1159, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) decimalFormat0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("\"comment\"");
      assertNotNull(qName0);
      assertEquals("\"comment\"", qName0.toString());
      assertEquals("\"comment\"", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("\"comment\"", qName0.toString());
      assertEquals("\"comment\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) "ra^po[!@B-:Y*U%y$");
      assertNotNull(variablePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\"comment\"", qName0.toString());
      assertEquals("\"comment\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isRoot());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isAttribute());
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      
      DecimalFormat decimalFormat1 = new DecimalFormat("Was expecting:");
      assertNotNull(decimalFormat1);
      assertEquals("Was expecting:", decimalFormat1.getPositivePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(0, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-Was expecting:", decimalFormat1.getNegativePrefix());
      assertEquals("Was expecting:#", decimalFormat1.toPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("Was expecting:#", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, decimalFormat1, variablePointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\"comment\"", qName0.toString());
      assertEquals("\"comment\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("Was expecting:", decimalFormat1.getPositivePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(0, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-Was expecting:", decimalFormat1.getNegativePrefix());
      assertEquals("Was expecting:#", decimalFormat1.toPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("Was expecting:#", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\"comment\"", qName0.toString());
      assertEquals("\"comment\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("Was expecting:", decimalFormat1.getPositivePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(0, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-Was expecting:", decimalFormat1.getNegativePrefix());
      assertEquals("Was expecting:#", decimalFormat1.toPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("Was expecting:#", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(variablePointer0, variablePointer1);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Double double1 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotNull(double1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double1, 0.01);
      assertEquals(1159, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\"comment\"", qName0.toString());
      assertEquals("\"comment\"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("Was expecting:", decimalFormat1.getPositivePrefix());
      assertEquals(1, decimalFormat1.getMultiplier());
      assertEquals(0, decimalFormat1.getMinimumIntegerDigits());
      assertEquals("", decimalFormat1.getPositiveSuffix());
      assertEquals("-Was expecting:", decimalFormat1.getNegativePrefix());
      assertEquals("Was expecting:#", decimalFormat1.toPattern());
      assertEquals(0, decimalFormat1.getMinimumFractionDigits());
      assertFalse(decimalFormat1.isParseIntegerOnly());
      assertFalse(decimalFormat1.isParseBigDecimal());
      assertFalse(decimalFormat1.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat1.getGroupingSize());
      assertEquals(0, decimalFormat1.getMaximumFractionDigits());
      assertEquals("Was expecting:#", decimalFormat1.toLocalizedPattern());
      assertFalse(decimalFormat1.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat1.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat1.getMaximumIntegerDigits());
      assertEquals("", decimalFormat1.getNegativeSuffix());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(2, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(decimalFormat0.equals((Object)decimalFormat1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(decimalFormat1.equals((Object)decimalFormat0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotSame(decimalFormat0, decimalFormat1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(variablePointer0, variablePointer1);
      assertNotSame(decimalFormat1, decimalFormat0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction1 = new CoreFunction(1159, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(1159, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(0, int0);
      assertEquals(1159, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("@");
      assertNotNull(qName0);
      assertEquals("@", qName0.toString());
      assertEquals("@", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("@", qName0.toString());
      assertEquals("@", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction1);
      assertEquals(4, expressionArray1.length);
      assertEquals("@", qName0.toString());
      assertEquals("@", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray1[2] = (Expression) extensionFunction1;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray1.length);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      coreFunction1.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(916, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(916, coreFunction0.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(1159, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1159, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) "");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertNotNull(variablePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, variablePointer1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1159, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer1.isActual());
      assertFalse(variablePointer1.isAttribute());
      assertTrue(variablePointer1.isContainer());
      assertFalse(variablePointer1.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(1, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1159, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("hJ$`o\"#D}\"vW");
      assertNotNull(qName0);
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(6, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(0, expressionArray0.length);
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(6, step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction1;
      Step step1 = new Step(6, nodeNameTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals(5, expressionArray1.length);
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(6, step1.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "hJ$`o\"#D}\"vW");
      assertNotNull(nodeNameTest1);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest1.getNamespaceURI());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest1.toString());
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      
      Step step2 = new Step(6, nodeNameTest1, expressionArray1);
      assertNotNull(step2);
      assertEquals(5, expressionArray1.length);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest1.getNamespaceURI());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest1.toString());
      assertEquals(6, step2.getAxis());
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(125, nodeNameTest1, expressionArray1);
      assertNotNull(step3);
      assertEquals(5, expressionArray1.length);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest1.getNamespaceURI());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest1.toString());
      assertEquals(125, step3.getAxis());
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreFunction1;
      expressionArray2[2] = (Expression) coreFunction1;
      expressionArray2[3] = (Expression) coreFunction0;
      Step step4 = new Step(125, nodeNameTest0, expressionArray2);
      assertNotNull(step4);
      assertEquals(4, expressionArray2.length);
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(125, step4.getAxis());
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(0, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest1);
      assertNotNull(parentContext0);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest1.getNamespaceURI());
      assertEquals("hJ$`o\"#D}\"vW", nodeNameTest1.toString());
      assertEquals("hJ$`o\"#D}\"vW", qName0.getName());
      assertEquals("hJ$`o\"#D}\"vW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[16];
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2875));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2875), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(23, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(16, expressionArray0.length);
      assertEquals((-2875), nodeTypeTest0.getNodeType());
      assertEquals(23, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1217, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(16, expressionArray0.length);
      assertEquals((-2875), nodeTypeTest0.getNodeType());
      assertEquals(1217, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2875), nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(16, expressionArray0.length);
      assertEquals((-2875), nodeTypeTest0.getNodeType());
      assertEquals((-2875), step2.getAxis());
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(19, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(16, expressionArray0.length);
      assertEquals((-2875), nodeTypeTest0.getNodeType());
      assertEquals(19, step3.getAxis());
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      
      stepArray0[3] = step3;
      Step step4 = new Step(6, nodeTypeTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(16, expressionArray0.length);
      assertEquals((-2875), nodeTypeTest0.getNodeType());
      assertEquals(6, step4.getAxis());
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      Step step5 = new Step(19, nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(16, expressionArray0.length);
      assertEquals((-2875), nodeTypeTest0.getNodeType());
      assertEquals(19, step5.getAxis());
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(1, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      Step step6 = new Step(6, nodeTypeTest0, expressionArray1);
      assertNotNull(step6);
      assertEquals(1, expressionArray1.length);
      assertEquals((-2875), nodeTypeTest0.getNodeType());
      assertEquals(6, step6.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(7, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(16, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(16, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1481, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1481, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1481, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1481, coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1481, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray1.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[0], coreOperationAdd0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationNotEqual0);
      assertNotNull(coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationEqual0, expressionArray0[0]);
      assertNotNull(coreOperationNotEqual1);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      
      expressionArray0[1] = (Expression) coreOperationNotEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual1, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationNotEqual0.equals((Object)coreOperationNotEqual1));
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray1.length);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = new Integer(27);
      assertEquals(27, int0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(2194, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(2194, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, int0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      int int1 = 1461;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(1461, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray1.length);
      assertEquals(1461, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr1);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr1);
      assertNotNull(coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      CoreOperationAnd coreOperationAnd1 = (CoreOperationAnd)coreFunction0.getArg1();
      assertNotNull(coreOperationAnd1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertSame(coreOperationAnd1, coreOperationAnd0);
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.AncestorContext");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(21, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(21, step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 1183, nodeNameTest0);
      assertNull(evalContext0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.axes.AncestorContext", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-563), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-563), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-563()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(28, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(28, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction0.functionString((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals("true", object2);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(object2.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Long long0 = new Long(3);
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(923, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray0.length);
      assertEquals(923, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(3, 3, 3, 3, 3, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(109, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(109, coreFunction0.getFunctionCode());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(23, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(23, step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      Step step1 = new Step(24, processingInstructionTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals(4, expressionArray1.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(24, step1.getAxis());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expressionArray1[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(4, expressionArray1.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(5181, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5181, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("No write method");
      assertNotNull(qName0);
      assertEquals("No write method", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("No write method", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("No write method", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("No write method", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals("No write method", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("No write method", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("J-=bK]K!m<t");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals(5, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-1136), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-1136), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, int0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction((-263), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertEquals((-263), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      CoreFunction coreFunction3 = new CoreFunction((-1166), expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals((-1166), coreFunction3.getFunctionCode());
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant1 = new Constant("");
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant1);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThanOrEqual0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "Mk`*}");
      assertNotNull(nodeNameTest0);
      assertEquals("Mk`*}", nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("Mk`*}", nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(descendantContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[18];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(18, expressionArray0.length);
      assertEquals(18, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(1076, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1076, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray1.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      assertNotNull(descendantContext0);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("true");
      assertNotNull(qName0);
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreOperationAdd0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1926), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-1926), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion1 = (CoreOperationUnion)coreFunction0.getArg1();
      assertNotNull(coreOperationUnion1);
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(coreOperationUnion1, coreOperationUnion0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion1);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 23;
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      coreOperationLessThanOrEqual0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertEquals(4, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      Object object0 = coreFunction0.functionSum((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertTrue(object0.equals((Object)double0));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("8t :)ps;");
      assertNotNull(processingInstructionTest0);
      assertEquals("8t :)ps;", processingInstructionTest0.getTarget());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      assertNotNull(childContext0);
      assertEquals("8t :)ps;", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) childContext0;
      evalContextArray0[1] = (EvalContext) childContext0;
      evalContextArray0[2] = (EvalContext) childContext0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      DescendantContext descendantContext0 = new DescendantContext(evalContextArray0[1], false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals(5, evalContextArray0.length);
      assertEquals("8t :)ps;", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ChildContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertEquals(4, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertNull(evalContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      
      Object object0 = coreFunction2.functionNamespaceURI((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(4, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)string0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      
      CoreFunction coreFunction3 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(2, coreFunction3.getFunctionCode());
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      
      Object object1 = coreFunction3.functionNamespaceURI((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(2, coreFunction3.getFunctionCode());
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)string0));
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals("starts-with()", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(0, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertNull(evalContext0);
      assertEquals(0, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2696), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-2696), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("^#d#KEw&##");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-3181), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3181), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3181), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(object0.equals((Object)string0));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      
      Object object1 = coreFunction0.functionString((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals("1", object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)string0));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      
      Object object2 = coreFunction1.functionRound((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object2);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertTrue(object2.equals((Object)double0));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'null'");
      assertNotNull(processingInstructionTest0);
      assertEquals("'null'", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("'null'", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      Object object3 = coreFunction1.functionBoolean(namespaceContext0);
      assertNotNull(object3);
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object3);
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("'null'", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("Cannot compare pointers that do not belong to the same tree: '");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      
      CoreFunction coreFunction1 = new CoreFunction(39, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(39, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCount(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(0, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[0] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("867[6^mmA$JHp", "867[6^mmA$JHp");
      assertNotNull(qName0);
      assertEquals("867[6^mmA$JHp:867[6^mmA$JHp", qName0.toString());
      assertEquals("867[6^mmA$JHp", qName0.getName());
      assertEquals("867[6^mmA$JHp", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray1.length);
      assertEquals("867[6^mmA$JHp:867[6^mmA$JHp", qName0.toString());
      assertEquals("867[6^mmA$JHp", qName0.getName());
      assertEquals("867[6^mmA$JHp", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[1] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[1], coreOperationUnion0);
      assertNotNull(coreOperationMod0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationUnion0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, expressionArray1[1]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(7, expressionArray1.length);
      assertEquals("867[6^mmA$JHp:867[6^mmA$JHp", qName0.toString());
      assertEquals("867[6^mmA$JHp", qName0.getName());
      assertEquals("867[6^mmA$JHp", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], coreOperationMod0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      Short short0 = new Short((short)1310);
      assertNotNull(short0);
      assertEquals((short)1310, (short)short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[5] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[3], coreOperationUnion0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, expressionArray1.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[6] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray1.length);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      CoreFunction coreFunction1 = new CoreFunction(2186, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertEquals(2186, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCount(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2186()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      QName qName0 = new QName("_!?\"baY8I#!4}phA", "5");
      assertNotNull(qName0);
      assertEquals("_!?\"baY8I#!4}phA:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("_!?\"baY8I#!4}phA", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "5");
      assertNotNull(nodeNameTest0);
      assertEquals("_!?\"baY8I#!4}phA:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("_!?\"baY8I#!4}phA", qName0.getPrefix());
      assertEquals("_!?\"baY8I#!4}phA:5", nodeNameTest0.toString());
      assertEquals("5", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("_!?\"baY8I#!4}phA:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("_!?\"baY8I#!4}phA", qName0.getPrefix());
      assertEquals("_!?\"baY8I#!4}phA:5", nodeNameTest0.toString());
      assertEquals("5", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      QName qName0 = new QName("", "V9,P~R9RN>'JSpB30");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("V9,P~R9RN>'JSpB30", qName0.getName());
      assertEquals(":V9,P~R9RN>'JSpB30", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.getPrefix());
      assertEquals("V9,P~R9RN>'JSpB30", qName0.getName());
      assertEquals(":V9,P~R9RN>'JSpB30", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[4] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("V9,P~R9RN>'JSpB30", qName0.getName());
      assertEquals(":V9,P~R9RN>'JSpB30", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":V9,P~R9RN>'JSpB30", nodeNameTest0.toString());
      
      Step step0 = new Step((-9), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals("V9,P~R9RN>'JSpB30", qName0.getName());
      assertEquals(":V9,P~R9RN>'JSpB30", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":V9,P~R9RN>'JSpB30", nodeNameTest0.toString());
      assertEquals((-9), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-9), nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals("V9,P~R9RN>'JSpB30", qName0.getName());
      assertEquals(":V9,P~R9RN>'JSpB30", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":V9,P~R9RN>'JSpB30", nodeNameTest0.toString());
      assertEquals((-9), step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, locationPath0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(2, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1050));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1050), nodeTypeTest0.getNodeType());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      assertNotNull(childContext0);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals("", qName0.getPrefix());
      assertEquals("V9,P~R9RN>'JSpB30", qName0.getName());
      assertEquals(":V9,P~R9RN>'JSpB30", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":V9,P~R9RN>'JSpB30", nodeNameTest0.toString());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-9()(null, null, null, null, $:V9,P~R9RN>'JSpB30, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000006 >= org.apache.commons.jxpath.ri.compiler.LocationPath@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("8t :)ps;");
      assertNotNull(processingInstructionTest0);
      assertEquals("8t :)ps;", processingInstructionTest0.getTarget());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      assertNotNull(childContext0);
      assertEquals("8t :)ps;", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) childContext0;
      evalContextArray0[1] = (EvalContext) childContext0;
      evalContextArray0[2] = (EvalContext) childContext0;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext(childContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(4, evalContextArray0.length);
      assertEquals("8t :)ps;", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      SelfContext selfContext0 = new SelfContext(unionContext0, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals(4, evalContextArray0.length);
      assertEquals("8t :)ps;", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = (-1926);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertNotNull(variableReference1);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.equals((Object)variableReference0));
      
      expressionArray0[2] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(1310, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1310, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1310);
      assertNotNull(nodeTypeTest0);
      assertEquals(1310, nodeTypeTest0.getNodeType());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, false);
      assertNotNull(childContext0);
      assertEquals(1310, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("count");
      assertNotNull(processingInstructionTest0);
      assertEquals("count", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(1489, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("count", processingInstructionTest0.getTarget());
      assertEquals(1489, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, coreOperationAdd0);
      assertNotNull(nameAttributeTest0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, (Expression) null);
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg2();
      assertNotNull(coreOperationAdd1);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertSame(coreOperationAdd1, coreOperationAdd0);
      
      expressionArray0[5] = (Expression) coreOperationAdd1;
      NameAttributeTest nameAttributeTest1 = (NameAttributeTest)coreFunction0.getArg3();
      assertNotNull(nameAttributeTest1);
      assertEquals(9, expressionArray0.length);
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertSame(nameAttributeTest1, nameAttributeTest0);
      
      expressionArray0[6] = (Expression) nameAttributeTest1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[6]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd2);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd2.getSymbol());
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd0));
      
      expressionArray0[8] = (Expression) coreOperationAdd2;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNumber((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-9), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.functionFloor((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object1);
      assertEquals((-9), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)double0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1926), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1926), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      int int0 = 17;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-3018), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-3018), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      coreFunction0.args = expressionArray0;
      assertEquals((-3018), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-3861), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals((-3861), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Expression expression0 = coreFunction0.getArg1();
      assertNull(expression0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-3018), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3861()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(1995, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1995, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      CoreFunction coreFunction3 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(13, coreFunction3.getFunctionCode());
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      
      // Undeclared exception!
      try { 
        coreFunction3.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = constant1.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotSame(constant1, constant0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-9), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertEquals((-9), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Iterator iterator1 = coreFunction1.iterate((EvalContext) null);
      assertNotNull(iterator1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-9), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'null'");
      assertNotNull(processingInstructionTest0);
      assertEquals("'null'", processingInstructionTest0.getTarget());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("'null'");
      assertNotNull(processingInstructionTest1);
      assertEquals("'null'", processingInstructionTest1.getTarget());
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("'null'", processingInstructionTest0.getTarget());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      
      Object object0 = coreFunction2.functionStringLength((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      assertEquals((-9), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertTrue(object0.equals((Object)double0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray1.length);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionFalse((EvalContext) null);
      assertNotNull(object0);
      assertEquals(0, expressionArray1.length);
      assertEquals(false, object0);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("Rmj|DF,.F6v\"qZG?", "Rmj|DF,.F6v\"qZG?");
      assertNotNull(qName0);
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getPrefix());
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getName());
      assertEquals("Rmj|DF,.F6v\"qZG?:Rmj|DF,.F6v\"qZG?", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getPrefix());
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getName());
      assertEquals("Rmj|DF,.F6v\"qZG?:Rmj|DF,.F6v\"qZG?", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getPrefix());
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getName());
      assertEquals("Rmj|DF,.F6v\"qZG?:Rmj|DF,.F6v\"qZG?", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction1);
      assertEquals(4, expressionArray0.length);
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getPrefix());
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getName());
      assertEquals("Rmj|DF,.F6v\"qZG?:Rmj|DF,.F6v\"qZG?", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction1, extensionFunction1);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getPrefix());
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getName());
      assertEquals("Rmj|DF,.F6v\"qZG?:Rmj|DF,.F6v\"qZG?", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationGreaterThan0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getPrefix());
      assertEquals("Rmj|DF,.F6v\"qZG?", qName0.getName());
      assertEquals("Rmj|DF,.F6v\"qZG?:Rmj|DF,.F6v\"qZG?", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = constant1.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotSame(constant1, constant0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NodePointer nodePointer0 = nodeSetContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      CoreFunction coreFunction1 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-9), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant1);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      
      String string1 = coreOperationMultiply0.toString();
      assertNotNull(string1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(constant0, constant1);
      assertNotSame(constant1, constant0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant1;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction((-9), expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray1.length);
      assertEquals((-9), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) nodeSetContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = (EvalContext) nodeSetContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(6, evalContextArray0.length);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      Object object0 = coreFunction2.functionConcat(unionContext0);
      assertNotNull(object0);
      assertEquals(6, evalContextArray0.length);
      assertEquals(3, expressionArray1.length);
      assertEquals("1", object0);
      assertEquals((-9), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(expressionArray1, expressionArray0);
      
      Object object1 = coreFunction0.functionString(evalContextArray0[0]);
      assertNotNull(object1);
      assertEquals(6, evalContextArray0.length);
      assertEquals(1, expressionArray0.length);
      assertEquals("1", object1);
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)string0));
      assertTrue(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      QName qName0 = new QName("MS>m*-4H");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("MS>m*-4H", qName0.toString());
      assertEquals("MS>m*-4H", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("MS>m*-4H", qName0.toString());
      assertEquals("MS>m*-4H", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) variableReference0;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space($MS>m*-4H, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, $MS>m*-4H)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg2();
      assertNull(expression0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      expressionArray0[1] = null;
      Expression expression1 = coreFunction0.getArg2();
      assertNull(expression1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      expressionArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(340, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(340, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertNotNull(predicateContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains('', null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      
      Iterator iterator0 = constant1.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotSame(constant1, constant0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      NodePointer nodePointer0 = nodeSetContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionName(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(object0.equals((Object)string0));
      
      List list0 = basicNodeSet0.getValues();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      CoreFunction coreFunction1 = new CoreFunction((-9), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-9), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.functionRound(nodeSetContext0);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object1);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-9), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object1.equals((Object)double0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object2 = coreFunction1.functionRound(nodeSetContext0);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object2);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-9), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object2.equals((Object)object1));
      assertTrue(object2.equals((Object)double0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object3 = coreFunction0.functionNumber((EvalContext) null);
      assertNotNull(object3);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object3);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-9), coreFunction0.getFunctionCode());
      assertTrue(object3.equals((Object)object2));
      assertTrue(object3.equals((Object)object1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      String string0 = coreOperationMultiply0.toString();
      assertNotNull(string0);
      assertEquals(4, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      assertNotNull(nameAttributeTest0);
      assertEquals(4, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      String string1 = constant0.toString();
      assertNotNull(string1);
      assertEquals("0", string1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(string1.equals((Object)string0));
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], constant0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(4, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1974, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1974, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      String string2 = coreOperationMultiply0.toString();
      assertNotNull(string2);
      assertEquals(4, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(4, expressionArray0.length);
      assertEquals("00truefalse", object0);
      assertEquals(1974, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string2));
      assertFalse(object0.equals((Object)string1));
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(4, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(1974, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
      assertNotNull(nameAttributeTest1);
      assertEquals(4, expressionArray0.length);
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      
      CoreFunction coreFunction1 = new CoreFunction(1974, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertEquals(1974, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1974()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr1);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr1);
      assertNotNull(coreOperationLessThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      CoreOperationAnd coreOperationAnd1 = (CoreOperationAnd)coreFunction0.getArg1();
      assertNotNull(coreOperationAnd1);
      assertEquals(4, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertSame(coreOperationAnd1, coreOperationAnd0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("Cannot compare pointers that do not belong to the same tree: '");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getValues();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Integer integer0 = new Integer((-131));
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, constant0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      QName qName0 = new QName("Hecs,d-6>1'?|", "JXO;");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      Integer integer0 = new Integer((-136));
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      Constant constant1 = new Constant("JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
      constant1.toString();
      QName qName0 = new QName("contains", "");
      Constant constant2 = new Constant(double0);
      constant2.toString();
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.functionStringLength((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id('JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      Constant constant0 = new Constant("93)E1Jm");
      int int0 = (-3795);
      CoreFunction coreFunction0 = new CoreFunction((-3795), expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Double double0 = Expression.NOT_A_NUMBER;
      EvalContext evalContext0 = null;
      int int0 = 18;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(8, processingInstructionTest0, expressionArray0);
      QName qName0 = new QName("[Comment: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step1 = new Step((-1906), processingInstructionTest0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step2 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      stepArray0[3] = step1;
      stepArray0[4] = step0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(descendantContext0, processingInstructionTest0, false, false);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeNameTest1);
      processingInstructionTest0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      coreFunction0.functionPosition(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int int0 = 23;
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("hn0GIC");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CoreFunction coreFunction0 = new CoreFunction(2661, expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2661()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("hn0GIC");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(27, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(8, processingInstructionTest1, expressionArray0);
      QName qName0 = new QName("[Comment: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step1 = new Step((-1906), processingInstructionTest0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step2 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      stepArray0[3] = step1;
      stepArray0[4] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(descendantContext0, processingInstructionTest0, false, false);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeNameTest1);
      processingInstructionTest0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = Expression.NOT_A_NUMBER;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2436), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2436()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Double double0 = Expression.ONE;
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = null;
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      expressionArray1[4] = null;
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      expressionArray1[6] = (Expression) coreOperationGreaterThan0;
      expressionArray1[7] = null;
      CoreFunction coreFunction0 = new CoreFunction(387, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      coreFunction0.functionTrue((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      coreOperationMultiply0.toString();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], constant0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1974, expressionArray0);
      coreOperationMultiply0.toString();
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.getArg1();
      coreOperationMultiply0.computeContextDependent();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(1974, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1974()(0, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1048), (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("unknownFunction-1048()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-1048), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(13, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-1048), nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(13, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(29, nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(29, nodeNameTest0, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step(3327, nodeNameTest0, (Expression[]) null);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      Constant constant0 = new Constant("");
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction((-2160), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      QName qName0 = new QName("_!?\"baY8I#!4}phA", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short)119);
      Constant constant0 = new Constant(short0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-973), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-973));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionNumber(attributeContext0);
      coreFunction0.functionStringLength((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-973()(119)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      QName qName0 = new QName("", "substring");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "_!?\"baY8I#!4}phA");
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, nodeNameTest0);
      Expression[] expressionArray0 = new Expression[5];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      expressionArray1[6] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationAdd2;
      Long long0 = new Long(16);
      Constant constant0 = new Constant(long0);
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(204, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("hn0GIC");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1938), (Expression[]) null);
      coreFunction0.functionNull((EvalContext) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1938()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Locale locale0 = Locale.ENGLISH;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = new QName(" DVK'Ga{#{t@RSXEA@");
      JXPathContext.newContext((Object) expressionArray0[3]);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "pLa'>`7$");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray1 = new Expression[3];
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray1);
      coreFunction1.getArg1();
      expressionArray1[0] = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationOr1;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray1);
      CoreFunction coreFunction3 = new CoreFunction(10, expressionArray1);
      coreFunction3.getArg1();
      // Undeclared exception!
      try { 
        coreFunction3.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) + (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002) + org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Expression expression0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getArgumentCount();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction((-2269), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!{pa=YI|");
      Double double0 = Expression.NOT_A_NUMBER;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.isContextDependent();
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      Constant constant1 = new Constant("JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
      constant1.toString();
      QName qName0 = new QName("contains", "");
      Double double1 = Expression.ONE;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeSetContext nodeSetContext1 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      CoreFunction coreFunction0 = new CoreFunction((-296), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5L.+");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(64, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, (Expression) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, expressionArray0[1]);
      Constant constant0 = new Constant("UWm5COZ");
      constant0.toString();
      QName qName0 = new QName("/@", "'UWm5COZ'");
      Integer integer0 = new Integer(662);
      Integer integer1 = Integer.getInteger("pl~@,U:}{x:d$", integer0);
      Constant constant1 = new Constant(integer1);
      constant0.toString();
      VariableReference variableReference0 = new VariableReference(qName0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(662, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(2309, expressionArray0);
      coreFunction1.iteratePointers((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      Constant constant1 = new Constant("JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates");
      constant1.toString();
      QName qName0 = new QName("contains", "");
      Constant constant2 = new Constant(double0);
      constant2.toString();
      VariableReference variableReference0 = new VariableReference(qName0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1938), (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("hn0GIC");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      coreOperationMultiply0.toString();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], constant0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1974, expressionArray0);
      coreOperationMultiply0.toString();
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.getArg1();
      coreOperationMultiply0.computeContextDependent();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(1974, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1974()(0, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(1460, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      String string0 = "pq8y8wU";
      Constant constant0 = new Constant("pq8y8wU");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreFunction0, coreOperationMultiply0);
      coreOperationMultiply1.toString();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply1, coreOperationMultiply0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationGreaterThan0);
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationMultiply1.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!{pa=YI|");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, (Expression) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Double double0 = Expression.ONE;
      int int0 = 2661;
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      expressionArray0[3] = null;
      expressionArray0[4] = null;
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction1 = new CoreFunction(2661, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!{pa=YI|");
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      constant0.toString();
      QName qName0 = new QName("NaN", "%(x5_t(+xXy[@<");
      constant0.toString();
      VariableReference variableReference0 = new VariableReference(qName0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName((String) null, "Incorrect number of arguments: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Incorrect number of arguments: ");
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, expressionArray1[1]);
      expressionArray1[3] = (Expression) coreOperationDivide0;
      Step step0 = new Step(1974, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-2269), expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-2269), int0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      boolean boolean0 = true;
      QName qName0 = new QName("aTMNv,=");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "aTMNv,=");
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(3088, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationMultiply0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(2661, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction1 = new CoreFunction(2661, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2661()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Integer integer0 = new Integer(1290);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Constant constant1 = new Constant((String) null);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, (Expression) null);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      Constant constant2 = new Constant(integer0);
      expressionArray0[4] = (Expression) constant2;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant1);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      coreOperationLessThan0.args = expressionArray0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[3], expressionArray0[4]);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("H!$#J8D");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1078), nodeNameTest0, coreOperationLessThan0.args);
      stepArray0[0] = step0;
      Step step1 = new Step(40, nodeNameTest0, coreOperationLessThan0.args);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(descendantContext0);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      ParentContext parentContext0 = new ParentContext(childContext0, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(parentContext0, true, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Double double0 = Expression.ZERO;
      CoreFunction coreFunction0 = new CoreFunction(3088, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3088()(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      coreOperationMultiply0.toString();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      constant0.toString();
      coreOperationEqual0.computeContextDependent();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], constant0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1974, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationMultiply0.toString();
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.getArg1();
      coreOperationMultiply0.computeContextDependent();
      coreFunction0.getArg3();
      coreFunction0.computeValue((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1974()(0, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-117));
      Step step0 = new Step((-117), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) expressionPath0;
      expressionArray1[6] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[3], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray1[3], expressionArray1[2]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant("Cannot compare pointers that do not belong to the same tree: '");
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      expressionArray0[2] = (Expression) constant1;
      Expression[] expressionArray1 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-4), expressionArray1);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(2661, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-117));
      Step step0 = new Step((-117), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) expressionPath0;
      expressionArray1[6] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[3], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray1[3], expressionArray1[2]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-117));
      Step step0 = new Step((-117), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) expressionPath0;
      expressionArray1[6] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[3], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray1[3], expressionArray1[2]);
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant("Cannot compare pointers that do not belong to the same tree: '");
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      Constant constant0 = new Constant("");
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction((-2160), expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2160()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[0], coreOperationAdd0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual1, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      Step step0 = new Step(488, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(2599, processingInstructionTest0, expressionArray0);
      Step step2 = new Step(488, processingInstructionTest0, expressionArray0);
      Step step3 = new Step(2599, processingInstructionTest0, expressionArray0);
      Step step4 = new Step(488, processingInstructionTest0, expressionArray0);
      Step step5 = new Step(9, processingInstructionTest0, expressionArray0);
      Step step6 = new Step((-206), processingInstructionTest0, expressionArray0);
      Step[] stepArray0 = new Step[8];
      stepArray0[0] = step6;
      stepArray0[1] = step5;
      stepArray0[2] = step1;
      stepArray0[3] = step3;
      stepArray0[4] = step1;
      stepArray0[5] = step0;
      stepArray0[6] = step2;
      stepArray0[7] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, (Expression) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      Step step0 = new Step(5610, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(5610, processingInstructionTest0, expressionArray0);
      Step step2 = new Step(5610, processingInstructionTest0, expressionArray0);
      Step step3 = new Step((-9), processingInstructionTest0, expressionArray0);
      Step step4 = new Step((-103), processingInstructionTest0, expressionArray0);
      Step step5 = new Step((-9), processingInstructionTest0, expressionArray0);
      Step step6 = new Step(1, processingInstructionTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step6;
      stepArray0[1] = step3;
      stepArray0[2] = step2;
      Step step7 = new Step(7, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray1, stepArray0);
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray1);
      coreFunction0.args = expressionArray1;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[19];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Byte byte0 = new Byte((byte)45);
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant(byte0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant1, coreOperationMod0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationSubtract0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constant1.toString();
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, coreOperationAnd0);
      constant1.toString();
      QName qName0 = new QName("45", (String) null);
      constant0.toString();
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction((byte)45, expressionArray0);
      coreFunction0.getArg2();
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, (String) null);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        selfContext0.getCurrentNodePointer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[0], coreOperationAdd0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual1;
      Expression[] expressionArray2 = new Expression[4];
      expressionArray2[0] = (Expression) coreOperationNotEqual0;
      expressionArray2[1] = (Expression) extensionFunction0;
      expressionArray2[2] = (Expression) coreOperationNotEqual1;
      expressionArray2[3] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      Step step0 = new Step(14, processingInstructionTest0, expressionArray2);
      stepArray0[0] = step0;
      Step step1 = new Step(14, processingInstructionTest0, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step(14, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(14, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(14, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(14, processingInstructionTest0, expressionArray2);
      stepArray0[5] = step5;
      Step step6 = new Step(14, processingInstructionTest0, expressionArray2);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray2, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = null;
      expressionArray1[3] = null;
      expressionArray1[4] = null;
      expressionArray1[5] = null;
      expressionArray1[6] = null;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("xy%e85 _`", "xy%e85 _`");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(13, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[5];
      expressionArray2[0] = null;
      expressionArray2[1] = null;
      expressionArray2[2] = null;
      expressionArray2[3] = null;
      expressionArray2[4] = null;
      Step step1 = new Step(865, nodeNameTest0, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step(865, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step3 = new Step(890, processingInstructionTest0, expressionArray2);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(1863, processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(32, processingInstructionTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(1863, processingInstructionTest0, expressionArray2);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray1, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      Expression[] expressionArray3 = new Expression[7];
      expressionArray3[0] = (Expression) expressionPath0;
      expressionArray3[1] = (Expression) expressionPath0;
      expressionArray3[2] = (Expression) expressionPath0;
      expressionArray3[3] = (Expression) expressionPath0;
      expressionArray3[4] = null;
      expressionArray3[5] = (Expression) expressionPath0;
      expressionArray3[6] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray2[0], expressionArray3, stepArray0);
      expressionArray0[1] = (Expression) expressionPath1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, expressionArray3[2]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray2[0], expressionArray2[1]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray2[1]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, expressionArray1[5]);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("xy%e85 _`");
      expressionArray0[6] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[4], expressionArray1[4]);
      expressionArray0[7] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray3[1], expressionArray3[1]);
      expressionArray0[8] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) decimalFormat0);
      Locale locale0 = new Locale("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[8], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(evalContext0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!{pa=YI|");
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      constant0.toString();
      QName qName0 = new QName("NaN", "%(x5_t(+xXy[@<");
      constant0.toString();
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-9), expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      assertEquals((-9), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002), null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.getArgumentCount();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction1.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(3088, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "not");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      ancestorContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(3088, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "not");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, false, nodeNameTest0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      coreFunction0.getFunctionCode();
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "boolean");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, true, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, nodeNameTest0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        ancestorContext0.getNodeSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1[\"fr_HERX{");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("1[\"fr_HERX{");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(323, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1990), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step5 = new Step((-1906), nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      stepArray0[6] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], locationPath0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeNameTest1, true, true);
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, nodeNameTest2);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionLocalName(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      coreOperationMultiply0.toString();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      constant0.toString();
      coreOperationEqual0.computeContextDependent();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], constant0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1974, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("F89");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(973, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(973, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(973, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      Constant constant0 = new Constant("F89");
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, constant0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()($F89, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 < org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Byte byte0 = new Byte((byte)45);
      Constant constant0 = new Constant(byte0);
      Constant constant1 = new Constant(byte0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant1, coreOperationMod0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationSubtract0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      constant1.toString();
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, coreOperationAnd0);
      constant1.toString();
      QName qName0 = new QName("45", (String) null);
      constant0.toString();
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction((byte)45, expressionArray0);
      coreFunction0.getArg2();
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      coreFunction1.toString();
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002) and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) * (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(3088, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "not");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, false, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      Constant constant0 = new Constant("");
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("s'");
      Step step0 = new Step(24, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step0;
      Step step1 = new Step(24, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionPath0, locationPath0);
      Constant constant0 = new Constant("/processing-instruction('");
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, (String) null);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      Byte byte0 = new Byte((byte)96);
      Constant constant1 = new Constant(byte0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant1);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      constant0.toString();
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1632), expressionArray0);
      coreFunction0.getArg2();
      coreOperationLessThanOrEqual0.args = expressionArray0;
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1632()('', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003) <= org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, $:)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction((-1938), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1938()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1[\"fr_HERX{");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(1863, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("");
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002), null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1[\"fr_HERX{");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("1[\"fr_HERX{");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(323, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1990), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Double double0 = new Double(0);
      Constant constant0 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant("Cannot compare pointers that do not belong to the same tree: '");
      expressionArray0[1] = (Expression) constant0;
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      Float float0 = new Float(0.0);
      Constant constant1 = new Constant(float0);
      expressionArray0[1] = (Expression) constant1;
      QName qName0 = new QName("", "org.apache.commons.jxpath.BasicVariables");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      Constant constant2 = new Constant(float0);
      expressionArray0[3] = (Expression) constant2;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(3121, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3121()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr1, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(" DVK'Ga{#{t@RSXEA@");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[3]);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "pLa'>`7$");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext(attributeContext0, evalContextArray0);
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, evalContextArray0[2]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, unionContext0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nodePointer1);
      coreFunction0.compute(rootContext0);
      Locale locale1 = new Locale(" DVK'Ga{#{t@RSXEA@", " DVK'Ga{#{t@RSXEA@", " DVK'Ga{#{t@RSXEA@");
      NodePointer nodePointer2 = NodePointer.newNodePointer(qName0, coreOperationOr1, locale1);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, nodePointer2);
      JXPathContext jXPathContext1 = rootContext1.getJXPathContext();
      rootContext1.setRegisteredValue(coreOperationMultiply0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext1, nodePointer2, nodePointer2);
      EvalContext evalContext0 = jXPathContextReferenceImpl2.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002) and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) * (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant("Cannot compare pointers that do not belong to the same tree: '");
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getArg1();
      coreFunction0.getArg1();
      QName qName0 = new QName("Cannot compare pointers that do not belong to the same tree: '", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "=u/M");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.getArgumentCount();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      coreOperationNegate0.args = expressionArray0;
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(864, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.getArgumentCount();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        nodeSetContext0.forEachRemaining((Consumer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      coreOperationMultiply0.toString();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      constant0.toString();
      coreOperationEqual0.computeContextDependent();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], constant0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1974, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.getArg1();
      coreOperationMultiply0.computeContextDependent();
      coreFunction0.getArg3();
      coreFunction0.computeValue((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        descendantContext0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(968, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(968);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction968()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1[\"fr_HERX{");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("1[\"fr_HERX{");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(323, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1990), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step5 = new Step((-1906), nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(2187, nodeNameTest1, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], locationPath0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeNameTest1, true, true);
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, nodeNameTest2);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionLocalName(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      int int0 = 91;
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Expression expression1 = coreFunction0.getArg3();
      assertNull(expression1);
      
      expressionArray0[1] = null;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[3], (Expression) null);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[0], (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[4], coreOperationEqual1);
      expressionArray0[5] = (Expression) coreOperationGreaterThan1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], (Expression) null);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1183));
      Step step0 = new Step((-1183), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = null;
      expressionArray1[3] = (Expression) coreOperationGreaterThan1;
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[6] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[7] = null;
      Step step3 = new Step((-1183), nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Expression[] expressionArray2 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, expression0);
      expressionArray2[0] = (Expression) coreOperationMod0;
      expressionArray2[1] = null;
      Step step5 = new Step(47, nodeTypeTest0, expressionArray2);
      stepArray0[5] = step5;
      Step step6 = new Step(831, nodeTypeTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(32, (NodeTest) null, expressionArray2);
      stepArray0[7] = step7;
      QName qName0 = new QName("org.w3c.dom.Node");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step8 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[7] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan((Expression) null, expressionArray1[6]);
      expressionArray0[8] = (Expression) coreOperationGreaterThan2;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.Path");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.Path");
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(1, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "-!}0E");
      Step step5 = new Step((-1401), nodeNameTest1, expressionArray1);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step6 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(1774, nodeNameTest1, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1094, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      coreOperationUnion0.isContextDependent();
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(488, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      Byte byte0 = new Byte((byte)96);
      Constant constant1 = new Constant(byte0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant1);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      constant0.toString();
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1632), expressionArray0);
      coreFunction0.getArg2();
      coreOperationLessThanOrEqual0.args = expressionArray0;
      variableReference0.toString();
      coreFunction0.getArg2();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1632()('', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003) <= org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000004 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, $:)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant("Cannot compare pointers that do not belong to the same tree: '");
      expressionArray0[1] = (Expression) constant0;
      Double double0 = Expression.ONE;
      Constant constant1 = new Constant(double0);
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.computeContextDependent();
      coreFunction0.getArgumentCount();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3951), (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3951()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
