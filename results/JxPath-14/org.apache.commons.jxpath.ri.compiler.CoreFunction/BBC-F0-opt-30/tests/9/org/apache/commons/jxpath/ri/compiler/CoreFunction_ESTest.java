/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:41:13 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Constant constant0 = new Constant(")");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationSubtract0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(50, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      assertNotNull(nodeTypeTest0);
      assertEquals(5, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(19);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(19, nodeTypeTest1.getNodeType());
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreFunction coreFunction2 = new CoreFunction((-1527), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals((-1527), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      
      Object object0 = coreFunction2.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals((-1527), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(")", object0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-124);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-124)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean0);
      
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(35, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(35, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-1256), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-1256), coreFunction1.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1659));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1659), nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(26);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(26, nodeTypeTest1.getNodeType());
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreFunction coreFunction2 = new CoreFunction((-1256), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals((-1256), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals(35, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertTrue(boolean1 == boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals(35, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      int int0 = coreFunction2.getArgumentCount();
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals((-1256), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Constant constant0 = new Constant(",Y?(x2jl[ZfO\"[");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-72365104), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-72365104), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-72365104), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-72365104), coreFunction1.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(parentContext0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction1.functionSubstring(parentContext0);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-72365104), coreFunction1.getFunctionCode());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1612, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1612, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1612, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      nameAttributeTest0.args = expressionArray0;
      assertEquals(1612, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(1612, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1612, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Constant constant0 = new Constant(")");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      coreOperationSubtract0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(421, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(421, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5668);
      assertNotNull(nodeTypeTest0);
      assertEquals(5668, nodeTypeTest0.getNodeType());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(5668, nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) precedingOrFollowingContext0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(5668, nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(precedingOrFollowingContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(5668, nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      NodePointer nodePointer0 = unionContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(5668, nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, unionContext0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, evalContextArray0.length);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5668, nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(0, evalContextArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5668, nodeTypeTest0.getNodeType());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Constant constant0 = new Constant(",Y?(bx2jl[ZfO~\"[");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, expressionArray0[0]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-94), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-94), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-94), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-94), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals((-94), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("NaN", object0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationLessThanOrEqual0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, "NaN", (Locale) null);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, (Object) null, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-94()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant constant0 = new Constant("Ca2 remove root OMtnode");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1570, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1570, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1570, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      nameAttributeTest0.args = expressionArray0;
      assertEquals(1570, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      String string1 = coreFunction0.toString();
      assertNotNull(string1);
      assertEquals(1, expressionArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("id");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, coreOperationMod0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("s[&78*Zv!`");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("okEc}7Ys (pU=]s5", "+C1JfyhwFtW1|9");
      assertNotNull(qName0);
      assertEquals("+C1JfyhwFtW1|9", qName0.getName());
      assertEquals("okEc}7Ys (pU=]s5:+C1JfyhwFtW1|9", qName0.toString());
      assertEquals("okEc}7Ys (pU=]s5", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+C1JfyhwFtW1|9", qName0.getName());
      assertEquals("okEc}7Ys (pU=]s5:+C1JfyhwFtW1|9", qName0.toString());
      assertEquals("okEc}7Ys (pU=]s5", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction1);
      assertEquals(5, expressionArray1.length);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("+C1JfyhwFtW1|9", qName0.getName());
      assertEquals("okEc}7Ys (pU=]s5:+C1JfyhwFtW1|9", qName0.toString());
      assertEquals("okEc}7Ys (pU=]s5", qName0.getPrefix());
      
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationUnion0);
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("+C1JfyhwFtW1|9", qName0.getName());
      assertEquals("okEc}7Ys (pU=]s5:+C1JfyhwFtW1|9", qName0.toString());
      assertEquals("okEc}7Ys (pU=]s5", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-570), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-570), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationOr0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreOperationLessThan0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("The Element cannot be added to itself", "The Element cannot be added to itself");
      assertNotNull(qName0);
      assertEquals("The Element cannot be added to itself", qName0.getPrefix());
      assertEquals("The Element cannot be added to itself", qName0.getName());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("The Element cannot be added to itself", qName0.getPrefix());
      assertEquals("The Element cannot be added to itself", qName0.getName());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", qName0.toString());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(114, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals("The Element cannot be added to itself", qName0.getPrefix());
      assertEquals("The Element cannot be added to itself", qName0.getName());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", qName0.toString());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(114, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-687), nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("The Element cannot be added to itself", qName0.getPrefix());
      assertEquals("The Element cannot be added to itself", qName0.getName());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", qName0.toString());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-687), step1.getAxis());
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "2'*w2F) ");
      assertNotNull(nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", nodeNameTest1.toString());
      assertEquals("2'*w2F) ", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("The Element cannot be added to itself", qName0.getPrefix());
      assertEquals("The Element cannot be added to itself", qName0.getName());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", qName0.toString());
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
      assertNotNull(coreOperationLessThan1);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      expressionArray1[5] = (Expression) coreOperationLessThan1;
      Step step2 = new Step((-868), nodeNameTest1, expressionArray1);
      assertNotNull(step2);
      assertEquals(6, expressionArray1.length);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", nodeNameTest1.toString());
      assertEquals("2'*w2F) ", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals((-868), step2.getAxis());
      assertEquals("The Element cannot be added to itself", qName0.getPrefix());
      assertEquals("The Element cannot be added to itself", qName0.getName());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", qName0.toString());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-1962), nodeNameTest1, expressionArray0);
      assertNotNull(step3);
      assertEquals(5, expressionArray0.length);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", nodeNameTest1.toString());
      assertEquals("2'*w2F) ", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("The Element cannot be added to itself", qName0.getPrefix());
      assertEquals("The Element cannot be added to itself", qName0.getName());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", qName0.toString());
      assertEquals((-1962), step3.getAxis());
      
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[7];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationOr0;
      expressionArray2[1] = (Expression) coreOperationLessThan1;
      expressionArray2[2] = (Expression) coreOperationLessThan1;
      expressionArray2[3] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray2[2], expressionArray0[1]);
      assertNotNull(coreOperationNotEqual1);
      assertEquals(5, expressionArray0.length);
      assertEquals(7, expressionArray2.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      expressionArray2[4] = (Expression) coreOperationNotEqual1;
      expressionArray2[5] = (Expression) coreOperationEqual0;
      expressionArray2[6] = (Expression) coreOperationOr0;
      Step step4 = new Step(2104, nodeNameTest1, expressionArray2);
      assertNotNull(step4);
      assertEquals(7, expressionArray2.length);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", nodeNameTest1.toString());
      assertEquals("2'*w2F) ", nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(2104, step4.getAxis());
      assertEquals("The Element cannot be added to itself", qName0.getPrefix());
      assertEquals("The Element cannot be added to itself", qName0.getName());
      assertEquals("The Element cannot be added to itself:The Element cannot be added to itself", qName0.toString());
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) expressionPath0;
      Constant constant0 = new Constant("'p)");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(114, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(114, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], nameAttributeTest0);
      assertNotNull(coreOperationMod0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(116, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(116, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[1]);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(116, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("true");
      assertNotNull(qName0);
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = (VariablePointer)jXPathContextReferenceImpl1.getVariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(116, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = coreOperationMod0.computeContextDependent();
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertTrue(boolean0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(116, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext(qName0);
      assertNotNull(initialContext0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(116, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(initialContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1361, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1361, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      String string0 = nodeSetContext0.toString();
      assertNotNull(string0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals("Empty expression context", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant constant0 = new Constant(",Y?(bx2jl[ZfO~\"[");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[0];
      coreOperationSubtract0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationGreaterThan0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1928), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1928), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1928), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("false", object0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant("s4R3*uA~WW_>");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("s4R3*uA~WW_>", "con");
      assertNotNull(qName0);
      assertEquals("s4R3*uA~WW_>:con", qName0.toString());
      assertEquals("s4R3*uA~WW_>", qName0.getPrefix());
      assertEquals("con", qName0.getName());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, "con");
      assertNotNull(beanPointer0);
      assertEquals("s4R3*uA~WW_>:con", qName0.toString());
      assertEquals("s4R3*uA~WW_>", qName0.getPrefix());
      assertEquals("con", qName0.getName());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "s4R3*uA~WW_>", beanPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("s4R3*uA~WW_>:con", qName0.toString());
      assertEquals("s4R3*uA~WW_>", qName0.getPrefix());
      assertEquals("con", qName0.getName());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("s4R3*uA~WW_>:con", qName0.toString());
      assertEquals("s4R3*uA~WW_>", qName0.getPrefix());
      assertEquals("con", qName0.getName());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("s4R3*uA~WW_>:con", qName0.toString());
      assertEquals("s4R3*uA~WW_>", qName0.getPrefix());
      assertEquals("con", qName0.getName());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1570, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1570, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1570, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      nameAttributeTest0.args = expressionArray0;
      assertEquals(1570, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("g");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      boolean boolean1 = coreOperationMod0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(boolean1);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      expressionArray0[2] = (Expression) coreOperationMod0;
      boolean boolean2 = coreOperationMod0.isContextDependent();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(boolean2);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      boolean boolean3 = coreFunction0.isContextDependent();
      assertEquals(3, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) predicateContext0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("\")\"", "\")\"");
      assertNotNull(qName0);
      assertEquals("\")\":\")\"", qName0.toString());
      assertEquals("\")\"", qName0.getPrefix());
      assertEquals("\")\"", qName0.getName());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\")\":\")\"", qName0.toString());
      assertEquals("\")\"", qName0.getPrefix());
      assertEquals("\")\"", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\")\":\")\"", qName0.toString());
      assertEquals("\")\"", qName0.getPrefix());
      assertEquals("\")\"", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\")\":\")\"", qName0.toString());
      assertEquals("\")\"", qName0.getPrefix());
      assertEquals("\")\"", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\")\":\")\"", qName0.toString());
      assertEquals("\")\"", qName0.getPrefix());
      assertEquals("\")\"", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertNotNull(rootContext1);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext1.equals((Object)rootContext0));
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\")\":\")\"", qName0.toString());
      assertEquals("\")\"", qName0.getPrefix());
      assertEquals("\")\"", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(rootContext0, rootContext1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(rootContext0.equals((Object)rootContext1));
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("\")\":\")\"", qName0.toString());
      assertEquals("\")\"", qName0.getPrefix());
      assertEquals("\")\"", qName0.getName());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: \")\":\")\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Constant constant0 = new Constant("Cannot remove root DOM node");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      boolean boolean0 = evalContext0.setPosition((-1010));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-1010), evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertFalse(boolean0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction0 = new CoreFunction((-2336), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2336), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertNotNull(object0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-1010), evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2336), coreFunction0.getFunctionCode());
      assertEquals(0.0, object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1225);
      assertNotNull(nodeTypeTest0);
      assertEquals(1225, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(116, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(116, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1422, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(1422, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(115, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(115, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(60, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(60, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(116, nodeTypeTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(116, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(2, (NodeTest) null, expressionArray0);
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertEquals(2, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(116, (NodeTest) null, expressionArray0);
      assertNotNull(step6);
      assertEquals(3, expressionArray0.length);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertEquals(116, step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step(4096, (NodeTest) null, expressionArray0);
      assertNotNull(step7);
      assertEquals(3, expressionArray0.length);
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step5));
      assertEquals(4096, step7.getAxis());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      Constant constant0 = new Constant("W H_q`VN(-.$v<");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(115, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(115, coreFunction0.getFunctionCode());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      assertNotNull(selfContext0);
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionFloor(selfContext0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Constant constant0 = new Constant(",Y?(bx2jl[ZfO~\"[");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant constant0 = new Constant(",Y?(bx2jl[ZfO~\"[");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("#bi", "boolean");
      assertNotNull(qName0);
      assertEquals("#bi:boolean", qName0.toString());
      assertEquals("boolean", qName0.getName());
      assertEquals("#bi", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("#bi:boolean", qName0.toString());
      assertEquals("boolean", qName0.getName());
      assertEquals("#bi", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(66, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(66, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(8, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      CoreOperationOr coreOperationOr1 = (CoreOperationOr)coreFunction0.getArg3();
      assertNotNull(coreOperationOr1);
      assertEquals(8, expressionArray0.length);
      assertSame(coreOperationOr1, coreOperationOr0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationOr1;
      QName qName0 = new QName(",Y?(bx2jl[ZfO~\"[", ",Y?(bx2jl[ZfO~\"[");
      assertNotNull(qName0);
      assertEquals(",Y?(bx2jl[ZfO~\"[:,Y?(bx2jl[ZfO~\"[", qName0.toString());
      assertEquals(",Y?(bx2jl[ZfO~\"[", qName0.getPrefix());
      assertEquals(",Y?(bx2jl[ZfO~\"[", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(",Y?(bx2jl[ZfO~\"[:,Y?(bx2jl[ZfO~\"[", qName0.toString());
      assertEquals(",Y?(bx2jl[ZfO~\"[", qName0.getPrefix());
      assertEquals(",Y?(bx2jl[ZfO~\"[", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray0[4]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals(",Y?(bx2jl[ZfO~\"[:,Y?(bx2jl[ZfO~\"[", qName0.toString());
      assertEquals(",Y?(bx2jl[ZfO~\"[", qName0.getPrefix());
      assertEquals(",Y?(bx2jl[ZfO~\"[", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[1]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, expressionArray0[3]);
      assertNotNull(coreOperationEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationEqual0);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      expressionArray0[7] = (Expression) coreOperationNegate0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[7], extensionFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(8, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(",Y?(bx2jl[ZfO~\"[:,Y?(bx2jl[ZfO~\"[", qName0.toString());
      assertEquals(",Y?(bx2jl[ZfO~\"[", qName0.getPrefix());
      assertEquals(",Y?(bx2jl[ZfO~\"[", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, (NodeSet) null);
      assertNotNull(nodeSetContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, nodeSetContext0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl2);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, (NodeTest) null, true);
      assertNotNull(precedingOrFollowingContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      NodePointer nodePointer0 = precedingOrFollowingContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = (JXPathContextReferenceImpl)rootContext0.getJXPathContext();
      assertNotNull(jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      
      NodePointer nodePointer1 = namespaceContext0.getCurrentNodePointer();
      assertNull(nodePointer1);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl4 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl3, rootContext0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl4);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertFalse(jXPathContextReferenceImpl4.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl4.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl4);
      assertSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl4, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl4, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl4, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl4, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertFalse(jXPathContextReferenceImpl4.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction0 = new CoreFunction(117, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(117, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      nameAttributeTest0.args = expressionArray0;
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationAdd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3505);
      assertNotNull(nodeTypeTest0);
      assertEquals(3505, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-984), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-984), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-984), nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-984), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1715, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals(1715, step2.getAxis());
      
      stepArray0[2] = step0;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v%<OBUiK.Z9");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Step step3 = new Step((-1766), nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-1766), step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-984), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-984), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "Incorrect number of arguments: ", (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(815, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(815, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(2002, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2002, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionNamespaceURI(evalContext0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("Incorrect number of arguments: ");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1179, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1179, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1179, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertFalse(object1.equals((Object)object0));
      assertEquals(1179, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("Incorrect number of arguments:", object1);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, expressionArray0.length);
      assertEquals(1179, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 26;
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod1);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1678);
      assertNotNull(nodeTypeTest0);
      assertEquals(1678, nodeTypeTest0.getNodeType());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(1678, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(namespaceContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("80]O", "80]O");
      assertNotNull(qName0);
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "name");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationEqual0);
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertEquals(40, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertEquals(1, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertEquals(1, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertEquals(1, step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertNotNull(variableReference1);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O", qName0.getPrefix());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      
      expressionArray0[2] = (Expression) variableReference1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(4, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction40()", string0);
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("'>BLt");
      assertNotNull(qName0);
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, expressionArray0[2]);
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[3]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "'>BLt", (Locale) null);
      assertNotNull(beanPointer0);
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[5], beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(6, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(6, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertEquals(6, expressionArray0.length);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Object object0 = coreFunction0.computeValue(rootContext1);
      assertNull(object0);
      assertEquals(6, expressionArray0.length);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("'>BLt", qName0.toString());
      assertEquals("'>BLt", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, expressionPath0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(3, expressionArray0.length);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1731, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1731, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1731);
      assertNotNull(nodeTypeTest0);
      assertEquals(1731, nodeTypeTest0.getNodeType());
      
      coreOperationLessThan0.args = expressionArray0;
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals(1731, nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(1731, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionStartsWith(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationOr0);
      assertNotNull(coreOperationMod0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1482, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(1482, coreFunction0.getFunctionCode());
      
      CoreOperationMod coreOperationMod1 = (CoreOperationMod)coreFunction0.getArg2();
      assertNotNull(coreOperationMod1);
      assertEquals(4, expressionArray0.length);
      assertSame(coreOperationMod1, coreOperationMod0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(1482, coreFunction0.getFunctionCode());
      assertEquals("mod", coreOperationMod1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod1;
      QName qName0 = new QName("floor", "4#@9NX7|U0WBJs(r(");
      assertNotNull(qName0);
      assertEquals("floor", qName0.getPrefix());
      assertEquals("floor:4#@9NX7|U0WBJs(r(", qName0.toString());
      assertEquals("4#@9NX7|U0WBJs(r(", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("floor", qName0.getPrefix());
      assertEquals("floor:4#@9NX7|U0WBJs(r(", qName0.toString());
      assertEquals("4#@9NX7|U0WBJs(r(", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1265, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1265, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertEquals(4, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreFunction coreFunction2 = new CoreFunction((-1045), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals((-1045), coreFunction2.getFunctionCode());
      assertEquals(4, coreFunction2.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationOr0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreOperationOr0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(4, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNotNull(nullPointer0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("floor:4#@9NX7|U0WBJs(r(", qName0.toString());
      assertEquals("4#@9NX7|U0WBJs(r(", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(nullPointer0, qName0, qName0);
      assertNotNull(beanPointer0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("floor:4#@9NX7|U0WBJs(r(", qName0.toString());
      assertEquals("4#@9NX7|U0WBJs(r(", qName0.getName());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(4, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("floor:4#@9NX7|U0WBJs(r(", qName0.toString());
      assertEquals("4#@9NX7|U0WBJs(r(", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("false");
      assertNotNull(processingInstructionTest0);
      assertEquals("false", processingInstructionTest0.getTarget());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, processingInstructionTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(4, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(nullPointer0.isContainer());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isRoot());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isActual());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("false", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("floor:4#@9NX7|U0WBJs(r(", qName0.toString());
      assertEquals("4#@9NX7|U0WBJs(r(", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      coreFunction2.functionCount(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Constant constant0 = new Constant(",Y?(bx2jl[ZfO~\"[");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Constant constant1 = new Constant(",Y?(bx2jl[ZfO~\"[");
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant1);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, constant1);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationSubtract0, coreOperationSubtract0);
      assertNotNull(coreOperationMod1);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationMod1);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationMod1);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual1;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) coreOperationMod0;
      expressionArray0[3] = (Expression) constant1;
      expressionArray0[4] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(5, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = new InitialContext(evalContext0);
      assertNotNull(initialContext0);
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NullPointer nullPointer0 = (NullPointer)initialContext0.getContextNodePointer();
      assertNotNull(nullPointer0);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean0 = initialContext0.nextNode();
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(boolean0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotNull(double0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0.0, (double)double0, 0.01);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Object object0 = coreFunction0.computeValue(evalContext0);
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(evalContext0, initialContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant constant0 = new Constant("\"..\"");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = new InitialContext(evalContext0);
      assertNotNull(initialContext0);
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(evalContext0, initialContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0.0, object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Object object1 = coreFunction0.functionNamespaceURI(initialContext0);
      assertNotNull(object1);
      assertEquals(0, expressionArray0.length);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", object1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      QName qName0 = new QName("NaN'p)fM", (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertEquals("NaN'p)fM", qName0.getPrefix());
      assertEquals("NaN'p)fM:null", qName0.toString());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertNotNull(basicVariables0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl1, locale0);
      assertNotNull(beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getName());
      assertEquals("NaN'p)fM", qName0.getPrefix());
      assertEquals("NaN'p)fM:null", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreFunction0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getName());
      assertEquals("NaN'p)fM", qName0.getPrefix());
      assertEquals("NaN'p)fM:null", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getName());
      assertEquals("NaN'p)fM", qName0.getPrefix());
      assertEquals("NaN'p)fM:null", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getName());
      assertEquals("NaN'p)fM", qName0.getPrefix());
      assertEquals("NaN'p)fM:null", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Object object0 = coreFunction0.functionLocalName(rootContext1);
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getName());
      assertEquals("NaN'p)fM", qName0.getPrefix());
      assertEquals("NaN'p)fM:null", qName0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = new InitialContext(evalContext0);
      assertNotNull(initialContext0);
      assertEquals(0, expressionArray0.length);
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BeanPointer beanPointer0 = (BeanPointer)initialContext0.getContextNodePointer();
      assertNotNull(beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = initialContext0.nextNode();
      assertEquals(0, expressionArray0.length);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertTrue(boolean1 == boolean0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, initialContext0.getPosition());
      assertTrue(boolean1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotNull(double0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, initialContext0.getPosition());
      assertEquals(1.0, (double)double0, 0.01);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Constant constant0 = new Constant("yu");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Constant constant1 = new Constant((String) null);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(134217728, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(134217728, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(134217728, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      NodeSet nodeSet0 = null;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("round");
      assertNotNull(qName0);
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("round", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("round", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray1[0] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertNotNull(coreOperationAnd0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, expressionArray1[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd1);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[2], coreOperationAnd1);
      assertNotNull(coreOperationLessThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("round", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray1[4] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationLessThan0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = new InitialContext(evalContext0);
      assertNotNull(initialContext0);
      assertEquals(0, expressionArray0.length);
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Object object0 = coreFunction0.functionLast(initialContext0);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(evalContext0, initialContext0);
      assertNotSame(initialContext0, evalContext0);
      assertFalse(evalContext0.equals((Object)initialContext0));
      assertFalse(initialContext0.equals((Object)evalContext0));
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(1.0, object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("4Gno@se1>tZPLW", "4Gno@se1>tZPLW");
      assertNotNull(qName0);
      assertEquals("4Gno@se1>tZPLW", qName0.getName());
      assertEquals("4Gno@se1>tZPLW", qName0.getPrefix());
      assertEquals("4Gno@se1>tZPLW:4Gno@se1>tZPLW", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("4Gno@se1>tZPLW", qName0.getName());
      assertEquals("4Gno@se1>tZPLW", qName0.getPrefix());
      assertEquals("4Gno@se1>tZPLW:4Gno@se1>tZPLW", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-1208), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals((-1208), coreFunction1.getFunctionCode());
      
      expressionArray0[3] = (Expression) coreFunction1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, expressionArray0[1]);
      assertNotNull(nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertEquals("4Gno@se1>tZPLW", qName0.getName());
      assertEquals("4Gno@se1>tZPLW", qName0.getPrefix());
      assertEquals("4Gno@se1>tZPLW:4Gno@se1>tZPLW", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[2], coreFunction2);
      assertNotNull(nameAttributeTest1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(3, coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("_");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("_", qName0.toString());
      assertEquals("_", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("_", qName0.toString());
      assertEquals("_", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(descendantContext0, 115, processingInstructionTest0);
      assertNull(evalContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Constant constant0 = new Constant("yu");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("yu");
      assertNotNull(processingInstructionTest0);
      assertEquals("yu", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertEquals("yu", processingInstructionTest0.getTarget());
      assertEquals(9, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(74, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(8, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("yu", processingInstructionTest0.getTarget());
      assertEquals(74, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(9, processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(8, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals("yu", processingInstructionTest0.getTarget());
      assertEquals(9, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(9, processingInstructionTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(8, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(9, step3.getAxis());
      assertEquals("yu", processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[5], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      
      expressionArray0[6] = (Expression) expressionPath0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationNegate0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationAdd0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, expressionPath0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationNegate0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath1);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) expressionPath1;
      Byte byte0 = new Byte((byte)24);
      assertNotNull(byte0);
      assertEquals((byte)24, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[6] = (Expression) locationPath0;
      Constant constant1 = new Constant("NaNn");
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[7] = (Expression) constant1;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals("or", coreOperationOr1.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[5], coreOperationOr1);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-301), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-301), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      nameAttributeTest0.args = expressionArray0;
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("", object1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("concat");
      assertNotNull(qName0);
      assertEquals("concat", qName0.getName());
      assertEquals("concat", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("concat", qName0.getName());
      assertEquals("concat", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("concat", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(1893, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertEquals("concat", qName0.getName());
      assertEquals("concat", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("concat", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1893, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1893, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(8, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("concat", qName0.getName());
      assertEquals("concat", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("concat", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1893, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(66, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(8, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals("concat", qName0.getName());
      assertEquals("concat", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("concat", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(66, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(66, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(8, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals("concat", qName0.getName());
      assertEquals("concat", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("concat", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(66, step3.getAxis());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationDivide0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(8, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, locationPath0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(4, stepArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals("concat", qName0.getName());
      assertEquals("concat", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("Invalid argument type for 'sum': ");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[4]);
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, expressionArray0[4]);
      assertNotNull(coreOperationEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[4], locationPath0);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(8, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(1678, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1678, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(8, expressionArray0.length);
      assertEquals(1678, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("substring-before");
      assertNotNull(qName0);
      assertEquals("substring-before", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-before", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("substring-before", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-before", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)51;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)28, (byte)1, (byte)22, (byte)4, (byte)40, (byte)55, (byte)51}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationMod0, coreOperationSubtract0);
      assertNotNull(coreOperationMod1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction(80, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(80, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[4];
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      assertNotNull(nodeTypeTest0);
      assertEquals(2, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(4, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, nodeTypeTest0.getNodeType());
      assertEquals(4, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2, (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, step1.getAxis());
      
      stepArray0[1] = step1;
      QName qName0 = new QName("n", "n");
      assertNotNull(qName0);
      assertEquals("n", qName0.getName());
      assertEquals("n", qName0.getPrefix());
      assertEquals("n:n", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "n");
      assertNotNull(nodeNameTest0);
      assertEquals("n", qName0.getName());
      assertEquals("n", qName0.getPrefix());
      assertEquals("n:n", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("n:n", nodeNameTest0.toString());
      assertEquals("n", nodeNameTest0.getNamespaceURI());
      
      Step step2 = new Step(4, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals("n", qName0.getName());
      assertEquals("n", qName0.getPrefix());
      assertEquals("n:n", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("n:n", nodeNameTest0.toString());
      assertEquals("n", nodeNameTest0.getNamespaceURI());
      assertEquals(4, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1600, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(2, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals("n", qName0.getName());
      assertEquals("n", qName0.getPrefix());
      assertEquals("n:n", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("n:n", nodeNameTest0.toString());
      assertEquals("n", nodeNameTest0.getNamespaceURI());
      assertEquals(1600, step3.getAxis());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("n", qName0.getName());
      assertEquals("n", qName0.getPrefix());
      assertEquals("n:n", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(36, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(36, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("5~]W", "5~]W");
      assertNotNull(qName0);
      assertEquals("5~]W", qName0.getPrefix());
      assertEquals("5~]W:5~]W", qName0.toString());
      assertEquals("5~]W", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals("5~]W", qName0.getPrefix());
      assertEquals("5~]W:5~]W", qName0.toString());
      assertEquals("5~]W", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("5~]W");
      assertNotNull(processingInstructionTest0);
      assertEquals("5~]W", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-4253), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      assertEquals("5~]W", processingInstructionTest0.getTarget());
      assertEquals((-4253), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(4502, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("5~]W", processingInstructionTest0.getTarget());
      assertEquals(4502, step1.getAxis());
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      expressionArray1[0] = (Expression) coreOperationUnion0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray1[5] = (Expression) locationPath0;
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) coreFunction0;
      Step step2 = new Step((-4253), processingInstructionTest0, expressionArray1);
      assertNotNull(step2);
      assertEquals(8, expressionArray1.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("5~]W", processingInstructionTest0.getTarget());
      assertEquals((-4253), step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("5~]W", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(ancestorContext0, (-4253), processingInstructionTest0);
      assertNull(evalContext0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("5~]W", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("a4u3*7F~Wg_>");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(115, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(9, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      CoreFunction coreFunction3 = new CoreFunction(897, expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(2, coreFunction3.getArgumentCount());
      assertEquals(897, coreFunction3.getFunctionCode());
      
      Object object0 = coreFunction3.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(2, coreFunction3.getArgumentCount());
      assertEquals(897, coreFunction3.getFunctionCode());
      assertEquals("", object0);
      
      Object object1 = coreFunction3.functionStartsWith((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(2, coreFunction3.getArgumentCount());
      assertEquals(897, coreFunction3.getFunctionCode());
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-800), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-800), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2870, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2870, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2870, coreFunction1.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("local-name");
      assertNotNull(qName0);
      assertEquals("local-name", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("local-name", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("local-name", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("local-name", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("local-name", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(3, nodeNameTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("local-name", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("local-name", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("local-name", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(3, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(987, nodeNameTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals("local-name", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("local-name", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("local-name", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(987, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(30, (NodeTest) null, expressionArray0);
      assertNotNull(step2);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(30, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[0], expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray1.length);
      assertEquals(3, stepArray0.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[4] = (Expression) expressionPath0;
      CoreFunction coreFunction2 = new CoreFunction((-898), expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray1.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals((-898), coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      coreFunction2.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Long long0 = new Long(1580);
      assertNotNull(long0);
      assertEquals(1580L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("4F~)C34TRutp65", "4F~)C34TRutp65");
      assertNotNull(qName0);
      assertEquals("4F~)C34TRutp65:4F~)C34TRutp65", qName0.toString());
      assertEquals("4F~)C34TRutp65", qName0.getPrefix());
      assertEquals("4F~)C34TRutp65", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals("4F~)C34TRutp65:4F~)C34TRutp65", qName0.toString());
      assertEquals("4F~)C34TRutp65", qName0.getPrefix());
      assertEquals("4F~)C34TRutp65", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationGreaterThan0);
      assertNotNull(coreOperationMod0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, expressionArray0[2]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(7, expressionArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      Constant constant1 = new Constant("4F~)C34TRutp65");
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, constant1);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant1, expressionArray0[3]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1580, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(1580, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      CoreOperationEqual coreOperationEqual1 = (CoreOperationEqual)coreFunction0.getArg1();
      assertNotNull(coreOperationEqual1);
      assertEquals(7, expressionArray0.length);
      assertSame(coreOperationEqual1, coreOperationEqual0);
      assertEquals(1580, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual1.getSymbol());
      
      EvalContext evalContext0 = null;
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      String string0 = coreOperationNotEqual0.toString();
      assertNotNull(string0);
      assertEquals(7, expressionArray0.length);
      assertNotSame(constant0, constant1);
      assertNotSame(constant1, constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 5284;
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      QName qName0 = new QName("maf;66/", "maf;66/");
      assertNotNull(qName0);
      assertEquals("maf;66/", qName0.getName());
      assertEquals("maf;66/", qName0.getPrefix());
      assertEquals("maf;66/:maf;66/", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("maf;66/", qName0.getName());
      assertEquals("maf;66/", qName0.getPrefix());
      assertEquals("maf;66/:maf;66/", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "maf;66/");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(5284, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5284, coreFunction0.getFunctionCode());
      
      boolean boolean3 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5284, coreFunction0.getFunctionCode());
      assertTrue(boolean3);
      
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("maf;66/", qName0.getName());
      assertEquals("maf;66/", qName0.getPrefix());
      assertEquals("maf;66/:maf;66/", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("maf;66/:maf;66/", nodeNameTest0.toString());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("maf;66/", qName0.getName());
      assertEquals("maf;66/", qName0.getPrefix());
      assertEquals("maf;66/:maf;66/", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("maf;66/:maf;66/", nodeNameTest0.toString());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionStartsWith(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationAdd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3505);
      assertNotNull(nodeTypeTest0);
      assertEquals(3505, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-984), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-984), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-984), nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-984), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1715, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals(1715, step2.getAxis());
      
      stepArray0[2] = step2;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v%<OBUiK.Z9");
      assertFalse(boolean0);
      
      Step step3 = new Step((-1766), nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-1766), step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-984), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-984), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("80]O", "80]O");
      assertNotNull(qName0);
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "name");
      assertFalse(boolean0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationEqual0);
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(40, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, step2.getAxis());
      
      stepArray0[2] = step2;
      String string0 = step0.toString();
      assertNotNull(string0);
      assertEquals(4, expressionArray0.length);
      assertNotSame(step0, step2);
      assertNotSame(step0, step1);
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step1));
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(40, step0.getAxis());
      
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertEquals("80]O:80]O", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertNotNull(variableReference1);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals("80]O", qName0.getPrefix());
      assertEquals("80]O:80]O", qName0.toString());
      assertEquals("80]O", qName0.getName());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      
      expressionArray0[2] = (Expression) variableReference1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      String string1 = coreFunction0.getFunctionName();
      assertNotNull(string1);
      assertEquals(4, expressionArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction40()", string1);
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationAdd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3505);
      assertNotNull(nodeTypeTest0);
      assertEquals(3505, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-984), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-984), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-984), nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-984), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1715, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals(1715, step2.getAxis());
      
      stepArray0[2] = step2;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v%<OBUiK.Z9");
      assertFalse(boolean0);
      
      Step step3 = new Step((-1766), nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3505, nodeTypeTest0.getNodeType());
      assertEquals((-1766), step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-984), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-984), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      QName qName0 = new QName("namespace-uri");
      assertNotNull(qName0);
      assertEquals("namespace-uri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("namespace-uri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      assertEquals("namespace-uri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-113);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)41, (byte) (-113)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      coreOperationDivide0.args = expressionArray0;
      assertEquals("namespace-uri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationMod0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1259, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1259, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      CoreOperationSubtract coreOperationSubtract1 = (CoreOperationSubtract)coreFunction0.getArg2();
      assertNotNull(coreOperationSubtract1);
      assertEquals(5, expressionArray0.length);
      assertSame(coreOperationSubtract1, coreOperationSubtract0);
      assertEquals(1259, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(1259, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1259, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(5, coreFunction2.getArgumentCount());
      assertEquals((-1), coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      nameAttributeTest0.args = expressionArray0;
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("6", "Gz[5Xu?");
      assertNotNull(qName0);
      assertEquals("6:Gz[5Xu?", qName0.toString());
      assertEquals("Gz[5Xu?", qName0.getName());
      assertEquals("6", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("6:Gz[5Xu?", qName0.toString());
      assertEquals("Gz[5Xu?", qName0.getName());
      assertEquals("6", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(5040, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5040, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Step step0 = new Step(1, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, step0.getAxis());
      
      Step step1 = new Step(117, (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(117, step1.getAxis());
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("a4u3*7F~Wg_>");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(115, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(115, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(115, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(115, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("F:2zi");
      assertNotNull(qName0);
      assertEquals("2zi", qName0.getName());
      assertEquals("F", qName0.getPrefix());
      assertEquals("F:2zi", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("2zi", qName0.getName());
      assertEquals("F", qName0.getPrefix());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(115, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("2zi", qName0.getName());
      assertEquals("F", qName0.getPrefix());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("2zi", qName0.getName());
      assertEquals("F", qName0.getPrefix());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, attributeContext0);
      assertNotNull(beanPointer0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("2zi", qName0.getName());
      assertEquals("F", qName0.getPrefix());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ChildContext childContext0 = new ChildContext(rootContext0, processingInstructionTest0, true, false);
      assertNotNull(childContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("2zi", qName0.getName());
      assertEquals("F", qName0.getPrefix());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Boolean boolean1 = (Boolean)coreFunction0.functionContains(attributeContext0);
      assertNotNull(boolean1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("2zi", qName0.getName());
      assertEquals("F", qName0.getPrefix());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertTrue(boolean1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("a4u3*7F~Wg_>");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(115, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("F:2zi");
      assertNotNull(qName0);
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertEquals("F:2zi", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      String string0 = (String)coreFunction1.functionSubstringBefore(rootContext0);
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertEquals("F:2zi", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name('a4u3*7F~Wg_>', 'a4u3*7F~Wg_>')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertNotNull(nodeTypeTest0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(0);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(0, nodeTypeTest1.getNodeType());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals("", object0);
      
      CoreFunction coreFunction3 = (CoreFunction)coreFunction2.getArg1();
      assertNotNull(coreFunction3);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertSame(coreFunction3, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(0, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      Boolean boolean0 = (Boolean)coreFunction2.functionContains((EvalContext) null);
      assertNotNull(boolean0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2991, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2991, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2991);
      assertNotNull(nodeTypeTest0);
      assertEquals(2991, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(2991, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeTypeTest0, false, false);
      assertNotNull(childContext0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(2991, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionLast(childContext0);
      assertNotNull(object0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2991, coreFunction0.getFunctionCode());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(2991, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0.0, object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2991()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(5, coreFunction2.getFunctionCode());
      
      Object object0 = coreFunction2.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(5, coreFunction2.getFunctionCode());
      assertEquals("concatNaN", object0);
      
      Object object1 = coreFunction1.functionStartsWith((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("a4u3*7F~Wg_>");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(115, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("F:2zi");
      assertNotNull(qName0);
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      QName qName1 = new QName("F:2zi", "a4u3*7F~Wg_>");
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("F:2zi", qName1.getPrefix());
      assertEquals("F:2zi:a4u3*7F~Wg_>", qName1.toString());
      assertEquals("a4u3*7F~Wg_>", qName1.getName());
      
      String string0 = (String)coreFunction1.functionSubstringAfter(attributeContext0);
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals("", string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName1, "");
      assertNotNull(beanPointer0);
      assertNotSame(qName1, qName0);
      assertNotSame(qName0, qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(qName0.equals((Object)qName1));
      assertEquals("F:2zi", qName1.getPrefix());
      assertEquals("F:2zi:a4u3*7F~Wg_>", qName1.toString());
      assertEquals("a4u3*7F~Wg_>", qName1.getName());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ChildContext childContext0 = new ChildContext(attributeContext0, processingInstructionTest0, true, false);
      assertNotNull(childContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Long long0 = new Long(26);
      assertNotNull(long0);
      assertEquals(26L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], constant0);
      assertNotNull(coreOperationEqual0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("floor", "floor");
      assertNotNull(qName0);
      assertEquals("floor", qName0.getName());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("floor:floor", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals("floor", qName0.getName());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("floor:floor", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      boolean boolean0 = coreOperationLessThanOrEqual0.computeContextDependent();
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(boolean0);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationOr1;
      CoreFunction coreFunction0 = new CoreFunction(42, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(42, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = (CoreOperationLessThanOrEqual)coreFunction0.getArg2();
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(8, expressionArray0.length);
      assertSame(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      assertEquals(42, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction1 = new CoreFunction(312, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(312, coreFunction1.getFunctionCode());
      
      CoreOperationEqual coreOperationEqual1 = (CoreOperationEqual)coreFunction1.getArg3();
      assertNotNull(coreOperationEqual1);
      assertEquals(8, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertSame(coreOperationEqual1, coreOperationEqual0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(312, coreFunction1.getFunctionCode());
      assertEquals("=", coreOperationEqual1.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction2 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(26, coreFunction2.getFunctionCode());
      assertEquals(8, coreFunction2.getArgumentCount());
      
      CoreFunction coreFunction3 = new CoreFunction(312, expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(312, coreFunction3.getFunctionCode());
      assertEquals(8, coreFunction3.getArgumentCount());
      
      // Undeclared exception!
      coreFunction3.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2064, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2064, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(")z~X36R>\tpl1");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1579), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1579), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1579), coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      
      CoreFunction coreFunction1 = new CoreFunction(2398, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(2398, coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction1.functionLocalName((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(2398, coreFunction1.getFunctionCode());
      assertEquals("", object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3yJ\"i%S%?LY<A");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("key", string0);
      
      String string1 = coreFunction0.toString();
      assertNotNull(string1);
      assertEquals(0, expressionArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("key()", string1);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(7, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      QName qName0 = new QName("key()");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("key()", qName0.getName());
      assertEquals("key()", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "6bn8");
      assertNotNull(nodeNameTest0);
      assertEquals("6bn8", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("key()", nodeNameTest0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("key()", qName0.getName());
      assertEquals("key()", qName0.toString());
      
      AncestorContext ancestorContext0 = new AncestorContext(unionContext0, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals(7, evalContextArray0.length);
      assertEquals("6bn8", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("key()", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNull(qName0.getPrefix());
      assertEquals("key()", qName0.getName());
      assertEquals("key()", qName0.toString());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Byte byte0 = new Byte((byte)26);
      assertNotNull(byte0);
      assertEquals((byte)26, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNotNull(expression0);
      assertEquals(9, expressionArray0.length);
      assertSame(expression0, constant0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      
      expressionArray0[1] = expression0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expression0, coreOperationMultiply0);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expression0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], expressionArray0[3]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expression0);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      
      expressionArray0[7] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("gD+wr]*@CM:y+C", "");
      assertNotNull(qName0);
      assertEquals("gD+wr]*@CM:y+C", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("gD+wr]*@CM:y+C:", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals("gD+wr]*@CM:y+C", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("gD+wr]*@CM:y+C:", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1075, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(1075, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(5, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      coreFunction2.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("a4u3*7F~Wg_>");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(115, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Integer integer0 = new Integer(9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("F:2zi");
      assertNotNull(qName0);
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      assertNotNull(processingInstructionTest0);
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, attributeContext0);
      assertNotNull(beanPointer0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      ChildContext childContext0 = new ChildContext(rootContext0, processingInstructionTest0, true, false);
      assertNotNull(childContext0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(115, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("F:2zi", qName0.toString());
      assertEquals("F", qName0.getPrefix());
      assertEquals("2zi", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", processingInstructionTest0.getTarget());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(3, nodeTypeTest1.getNodeType());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Constant constant0 = new Constant("substring");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals("substring", object1);
      
      CoreFunction coreFunction1 = new CoreFunction(4654, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(4654, coreFunction1.getFunctionCode());
      
      QName qName0 = new QName("substring");
      assertNotNull(qName0);
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("substring", nodeNameTest0.toString());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("substring", nodeNameTest0.toString());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      Object object2 = coreFunction1.functionNot(parentContext0);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(4654, coreFunction1.getFunctionCode());
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("substring", nodeNameTest0.toString());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(false, object2);
      
      Object object3 = coreFunction1.computeValue(parentContext0);
      assertNull(object3);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(4654, coreFunction1.getFunctionCode());
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("substring", nodeNameTest0.toString());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "");
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodePointer nodePointer0 = null;
      NullPointer nullPointer0 = (NullPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
      assertNotNull(nullPointer0);
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertEquals(1, expressionArray0.length);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals("substring", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("_W[\"r{,UO7i<9");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "HD#F6zD<JXhQzywf");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray1[1]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationDivide0;
      Step step0 = new Step(1853, nodeNameTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1853, step0.getAxis());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      
      stepArray0[0] = step0;
      Step step1 = new Step(17, nodeNameTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals(7, expressionArray1.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(17, step1.getAxis());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1853, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(1853, step2.getAxis());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1853, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(1853, step3.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      
      stepArray0[3] = step3;
      Step step4 = new Step(1853, nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      assertEquals(1853, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(110, nodeNameTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      assertEquals(110, step5.getAxis());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1853, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1853, coreFunction0.getFunctionCode());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("HD#F6zD<JXhQzywf", nodeNameTest0.getNamespaceURI());
      
      // Undeclared exception!
      coreFunction0.functionPosition(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction((-2314), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals((-2314), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-3185), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("a4u3*7F~Wg_>");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(1181, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1181, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last('a4u3*7F~Wg_>', 'a4u3*7F~Wg_>')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4654, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4654, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4654, coreFunction0.getFunctionCode());
      assertEquals(Double.NaN, object0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals("", object1);
      
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object2.equals((Object)object1));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4654, coreFunction0.getFunctionCode());
      assertEquals("concat", object2);
      
      Object object3 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object3);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4654, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("3eftpzc8kE", "3eftpzc8kE");
      assertNotNull(qName0);
      assertEquals("3eftpzc8kE:3eftpzc8kE", qName0.toString());
      assertEquals("3eftpzc8kE", qName0.getName());
      assertEquals("3eftpzc8kE", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("3eftpzc8kE:3eftpzc8kE", qName0.toString());
      assertEquals("3eftpzc8kE", qName0.getName());
      assertEquals("3eftpzc8kE", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-151), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-151), coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNotNull(expression0);
      assertEquals(5, expressionArray0.length);
      assertSame(expression0, extensionFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-151), coreFunction0.getFunctionCode());
      assertTrue(expression0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expression0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("3eftpzc8kE:3eftpzc8kE", qName0.toString());
      assertEquals("3eftpzc8kE", qName0.getName());
      assertEquals("3eftpzc8kE", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-151), coreFunction0.getFunctionCode());
      assertTrue(expression0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals("3eftpzc8kE:3eftpzc8kE", qName0.toString());
      assertEquals("3eftpzc8kE", qName0.getName());
      assertEquals("3eftpzc8kE", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      expressionArray0[3] = (Expression) coreFunction1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction2 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(23, coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction1, coreOperationAdd0);
      assertNotNull(nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction3 = new CoreFunction(104, expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(5, coreFunction3.getArgumentCount());
      assertEquals(104, coreFunction3.getFunctionCode());
      
      CoreFunction coreFunction4 = new CoreFunction((-5182), expressionArray0);
      assertNotNull(coreFunction4);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertEquals((-5182), coreFunction4.getFunctionCode());
      assertEquals(5, coreFunction4.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(20);
      assertNotNull(nodeTypeTest0);
      assertEquals(20, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(1, nodeTypeTest1.getNodeType());
      
      // Undeclared exception!
      coreFunction4.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("Cannot remove root DOM node");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1168, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1168, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(27.0, object0);
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1168, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("Cannot remove root DOM node", object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length('Cannot remove root DOM node')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(5, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction(5, expressionArray1);
      assertNotNull(coreFunction3);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(5, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationOr0);
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], nameAttributeTest0);
      assertNotNull(coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, coreOperationEqual0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Double double0 = new Double(1.0);
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[3] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, nameAttributeTest0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(58, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(58, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1602), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1602), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1602), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, coreFunction0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1602), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1602), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.functionFloor((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals((-1602), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(-0.0, object0);
      
      Object object1 = coreFunction1.functionString((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals("0", object1);
      
      Object object2 = coreFunction1.functionFloor((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object2.equals((Object)object0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(-0.0, object2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "concat");
      assertFalse(boolean0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[1]);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      String string0 = (String)coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals("", string0);
      
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name('concat', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertFalse(boolean1);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("8#mkHX", "round");
      assertNotNull(qName0);
      assertEquals("8#mkHX", qName0.getPrefix());
      assertEquals("8#mkHX:round", qName0.toString());
      assertEquals("round", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("8#mkHX", qName0.getPrefix());
      assertEquals("8#mkHX:round", qName0.toString());
      assertEquals("round", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-912), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-912), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[11];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-1024), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1024), step0.getAxis());
      
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest1);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertEquals("", processingInstructionTest1.getTarget());
      
      Step step1 = new Step((-178), processingInstructionTest1, expressionArray0);
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step1.equals((Object)step0));
      assertEquals("", processingInstructionTest1.getTarget());
      assertEquals((-178), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1018, processingInstructionTest1, expressionArray0);
      assertNotNull(step2);
      assertEquals(7, expressionArray0.length);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals("", processingInstructionTest1.getTarget());
      assertEquals(1018, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-1024), processingInstructionTest1, expressionArray0);
      assertNotNull(step3);
      assertEquals(7, expressionArray0.length);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals("", processingInstructionTest1.getTarget());
      assertEquals((-1024), step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(11, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationOr0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-178), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-178), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      expressionArray0[3] = (Expression) coreFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = (CoreOperationLessThanOrEqual)coreFunction0.getArg3();
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(7, expressionArray0.length);
      assertSame(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      assertEquals((-178), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = (CoreOperationLessThanOrEqual)coreFunction0.getArg3();
      assertNotNull(coreOperationLessThanOrEqual2);
      assertEquals(7, expressionArray0.length);
      assertSame(coreOperationLessThanOrEqual2, coreOperationLessThanOrEqual1);
      assertSame(coreOperationLessThanOrEqual2, coreOperationLessThanOrEqual0);
      assertEquals((-178), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual2.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual2;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      coreFunction1.args = expressionArray0;
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("t{An09/7[u", "W:bGH_W l>.fb!8K<y");
      assertNotNull(qName0);
      assertEquals("t{An09/7[u:W:bGH_W l>.fb!8K<y", qName0.toString());
      assertEquals("t{An09/7[u", qName0.getPrefix());
      assertEquals("W:bGH_W l>.fb!8K<y", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals("t{An09/7[u:W:bGH_W l>.fb!8K<y", qName0.toString());
      assertEquals("t{An09/7[u", qName0.getPrefix());
      assertEquals("W:bGH_W l>.fb!8K<y", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, (Expression[]) null);
      assertNotNull(extensionFunction1);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals("t{An09/7[u:W:bGH_W l>.fb!8K<y", qName0.toString());
      assertEquals("t{An09/7[u", qName0.getPrefix());
      assertEquals("W:bGH_W l>.fb!8K<y", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction1;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("t{An09/7[u:W:bGH_W l>.fb!8K<y", qName0.toString());
      assertEquals("t{An09/7[u", qName0.getPrefix());
      assertEquals("W:bGH_W l>.fb!8K<y", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], coreOperationUnion0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[4], variableReference0);
      assertNotNull(coreOperationNotEqual1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals("t{An09/7[u:W:bGH_W l>.fb!8K<y", qName0.toString());
      assertEquals("t{An09/7[u", qName0.getPrefix());
      assertEquals("W:bGH_W l>.fb!8K<y", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(1453, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1453, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4681, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(4681, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(117, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(117, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(429);
      assertNotNull(nodeTypeTest0);
      assertEquals(429, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(10);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(10, nodeTypeTest1.getNodeType());
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreFunction coreFunction2 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(24, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "vr]Z;wr( 51s$?ow'";
      QName qName0 = new QName("vr]Z;wr( 51s$?ow'");
      assertNotNull(qName0);
      assertEquals("vr]Z;wr( 51s$?ow'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("vr]Z;wr( 51s$?ow'", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("vr]Z;wr( 51s$?ow'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("vr]Z;wr( 51s$?ow'", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(boolean1);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(5, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], expressionArray0[1]);
      assertNotNull(nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction((-1659), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals((-1659), coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(48);
      assertNotNull(nodeTypeTest0);
      assertEquals(48, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(48);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(48, nodeTypeTest1.getNodeType());
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction3 = new CoreFunction(48, expressionArray1);
      assertNotNull(coreFunction3);
      assertEquals(3, expressionArray1.length);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, coreFunction3.getArgumentCount());
      assertEquals(48, coreFunction3.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction3.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('null', 'null', 'null', 'null', 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      boolean boolean1 = coreOperationMultiply0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(boolean1);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2251), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-2251), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-3872), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals((-3872), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(4, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals((-3872), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(4681, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(4681, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      Object object0 = coreFunction1.functionNumber((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Double.NaN, object0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction4681()('concat')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(30, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      coreFunction0.args = null;
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 17;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(19, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction3);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(17, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("e[_Aa");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("e[_Aa");
      assertNotNull(qName0);
      assertEquals("e[_Aa", qName0.toString());
      assertEquals("e[_Aa", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("e[_Aa", qName0.toString());
      assertEquals("e[_Aa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      assertNotNull(coreOperationOr1);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals("or", coreOperationOr1.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationMod0);
      assertNotNull(coreOperationEqual0);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("e[_Aa", qName0.toString());
      assertEquals("e[_Aa", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Constant constant1 = new Constant(long0);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[5] = (Expression) constant1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[4], coreOperationMod0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant0.equals((Object)constant1));
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      expressionArray0[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Integer integer0 = new Integer(12);
      assertNotNull(integer0);
      assertEquals(12, (int)integer0);
      
      Integer integer1 = Integer.getInteger(" (", integer0);
      assertNotNull(integer1);
      assertEquals(12, (int)integer1);
      
      Constant constant0 = new Constant(integer1);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      assertNotNull(nodeTypeTest0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(10, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-4144), nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals((-4144), step1.getAxis());
      
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" (");
      assertNotNull(processingInstructionTest0);
      assertEquals(" (", processingInstructionTest0.getTarget());
      
      Step step2 = new Step(10, processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(" (", processingInstructionTest0.getTarget());
      assertEquals(10, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      assertNotNull(coreOperationNegate0);
      assertEquals(3, stepArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(3, stepArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-282), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals((-282), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray1.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      int int0 = 9;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray1.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(30, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-411), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-411), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      assertNotNull(nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(parentContext0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\" could not be added as a child of \"");
      assertNotNull(processingInstructionTest0);
      assertEquals("\" could not be added as a child of \"", processingInstructionTest0.getTarget());
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      assertNotNull(selfContext0);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(selfContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      Object object0 = coreFunction0.functionTrue(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(true, object0);
      
      CoreFunction coreFunction1 = new CoreFunction(1020, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1020, coreFunction1.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals("substring()", string0);
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object1);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1020, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1020()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(0, coreFunction2.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertNotNull(nodeTypeTest0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(0);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(0, nodeTypeTest1.getNodeType());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals("", object0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest1);
      assertNotNull(attributeContext0);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(0, nodeTypeTest1.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      Object object1 = coreFunction0.computeValue(attributeContext0);
      assertNull(object1);
      assertEquals(0, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, nodeTypeTest1.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(unknownFunction0()(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[3];
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], coreOperationDivide0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, expressionArray1[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationGreaterThan0, coreOperationAnd0);
      assertNotNull(coreOperationDivide1);
      assertEquals(1, expressionArray0.length);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationDivide1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray1[5] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, coreOperationGreaterThan0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationDivide0.equals((Object)coreOperationDivide1));
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray1[6] = (Expression) coreOperationNotEqual0;
      Step step0 = new Step(10, (NodeTest) null, expressionArray1);
      assertNotNull(step0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-584), (NodeTest) null, expressionArray1);
      assertNotNull(step1);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals((-584), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(14, (NodeTest) null, expressionArray1);
      assertNotNull(step2);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(14, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(882, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(882, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      DecimalFormat decimalFormat0 = new DecimalFormat("A Text is not allowed at the document root");
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("A Text is not allowed at the document root", decimalFormat0.getPositivePrefix());
      assertEquals("A Text is not allowed at the document root#", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-A Text is not allowed at the document root", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("A Text is not allowed at the document root#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      QName qName0 = new QName("L");
      assertNotNull(qName0);
      assertEquals("L", qName0.getName());
      assertEquals("L", qName0.toString());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, expressionArray1[3], locale0);
      assertNotNull(beanPointer0);
      assertEquals(7, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals("L", qName0.getName());
      assertEquals("L", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, decimalFormat0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("A Text is not allowed at the document root", decimalFormat0.getPositivePrefix());
      assertEquals("A Text is not allowed at the document root#", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-A Text is not allowed at the document root", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("A Text is not allowed at the document root#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("L", qName0.getName());
      assertEquals("L", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("A Text is not allowed at the document root", decimalFormat0.getPositivePrefix());
      assertEquals("A Text is not allowed at the document root#", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-A Text is not allowed at the document root", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("A Text is not allowed at the document root#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("L", qName0.getName());
      assertEquals("L", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertEquals(7, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("A Text is not allowed at the document root", decimalFormat0.getPositivePrefix());
      assertEquals("A Text is not allowed at the document root#", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-A Text is not allowed at the document root", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("A Text is not allowed at the document root#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("L", qName0.getName());
      assertEquals("L", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\" could not be added as a child of \"");
      assertNotNull(processingInstructionTest0);
      assertEquals("\" could not be added as a child of \"", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("\" could not be added as a child of \"", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\" could not be added as a child of \"");
      assertNotNull(processingInstructionTest0);
      assertEquals("\" could not be added as a child of \"", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("\" could not be added as a child of \"", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 11;
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("name");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("BvG|joQM3", "name");
      assertNotNull(qName0);
      assertEquals("BvG|joQM3:name", qName0.toString());
      assertEquals("BvG|joQM3", qName0.getPrefix());
      assertEquals("name", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("BvG|joQM3:name", qName0.toString());
      assertEquals("BvG|joQM3", qName0.getPrefix());
      assertEquals("name", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionPath0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Incorrect number of arguments: ");
      assertNotNull(processingInstructionTest0);
      assertEquals("Incorrect number of arguments: ", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = true;
      String string0 = "?d|4STI?fDAdRG,![Nh";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?d|4STI?fDAdRG,![Nh");
      assertNotNull(processingInstructionTest0);
      assertEquals("?d|4STI?fDAdRG,![Nh", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("?d|4STI?fDAdRG,![Nh", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      int int0 = 12;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("2_i0\"??wZY5A\"jP");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(32, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("floor", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      String string0 = "Cannot convert value of class ";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot convert value of class ");
      assertNotNull(processingInstructionTest0);
      assertEquals("Cannot convert value of class ", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(914, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("Cannot convert value of class ", processingInstructionTest0.getTarget());
      assertEquals(914, step0.getAxis());
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("|),?*8U}L{vqW*;=:W%");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertEquals(3, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(1244, expressionArray1);
      assertNotNull(coreFunction3);
      assertEquals(3, expressionArray1.length);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1244, coreFunction3.getFunctionCode());
      assertEquals(3, coreFunction3.getArgumentCount());
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(3, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction3);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction3));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(3, int0);
      
      String string0 = coreFunction3.getFunctionName();
      assertNotNull(string0);
      assertEquals(3, expressionArray1.length);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1244, coreFunction3.getFunctionCode());
      assertEquals(3, coreFunction3.getArgumentCount());
      assertEquals("unknownFunction1244()", string0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '|),?*8U}L{vqW*;=:W%')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 17;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean2);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(17, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(1591, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1591, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(328, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(328, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      
      Object object0 = coreFunction2.functionPosition(precedingOrFollowingContext0);
      assertNotNull(object0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(328, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, object0);
      
      QName qName0 = new QName("]&JWdVzz0wI!38d", "]&JWdVzz0wI!38d");
      assertNotNull(qName0);
      assertEquals("]&JWdVzz0wI!38d", qName0.getPrefix());
      assertEquals("]&JWdVzz0wI!38d", qName0.getName());
      assertEquals("]&JWdVzz0wI!38d:]&JWdVzz0wI!38d", qName0.toString());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationSubtract0, locale0);
      assertNotNull(beanPointer0);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("]&JWdVzz0wI!38d", qName0.getPrefix());
      assertEquals("]&JWdVzz0wI!38d", qName0.getName());
      assertEquals("]&JWdVzz0wI!38d:]&JWdVzz0wI!38d", qName0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, object0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(328, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals("]&JWdVzz0wI!38d", qName0.getPrefix());
      assertEquals("]&JWdVzz0wI!38d", qName0.getName());
      assertEquals("]&JWdVzz0wI!38d:]&JWdVzz0wI!38d", qName0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(328, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals("]&JWdVzz0wI!38d", qName0.getPrefix());
      assertEquals("]&JWdVzz0wI!38d", qName0.getName());
      assertEquals("]&JWdVzz0wI!38d:]&JWdVzz0wI!38d", qName0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(328, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals("]&JWdVzz0wI!38d", qName0.getPrefix());
      assertEquals("]&JWdVzz0wI!38d", qName0.getName());
      assertEquals("]&JWdVzz0wI!38d:]&JWdVzz0wI!38d", qName0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) namespaceContext0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(328, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals("]&JWdVzz0wI!38d", qName0.getPrefix());
      assertEquals("]&JWdVzz0wI!38d", qName0.getName());
      assertEquals("]&JWdVzz0wI!38d:]&JWdVzz0wI!38d", qName0.toString());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction3 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction3);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(17, coreFunction3.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction3.functionSubstring(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      assertNotNull(coreOperationEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, coreOperationUnion0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationNotEqual0);
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationDivide0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion1;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      assertNotNull(nodeTypeTest0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(19, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals(19, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(32, step1.getAxis());
      assertEquals(9, nodeTypeTest0.getNodeType());
      
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(7, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, step2.getAxis());
      assertEquals(9, nodeTypeTest0.getNodeType());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-5), nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(7, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals((-5), step3.getAxis());
      assertEquals(9, nodeTypeTest0.getNodeType());
      
      stepArray0[3] = step3;
      QName qName0 = new QName("...", "An EntityRef is not allowed at the document root");
      assertNotNull(qName0);
      assertEquals("...:An EntityRef is not allowed at the document root", qName0.toString());
      assertEquals("An EntityRef is not allowed at the document root", qName0.getName());
      assertEquals("...", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("...:An EntityRef is not allowed at the document root", qName0.toString());
      assertEquals("An EntityRef is not allowed at the document root", qName0.getName());
      assertEquals("...", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("...:An EntityRef is not allowed at the document root", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      expressionArray1[6] = (Expression) coreOperationNotEqual0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      Step step4 = new Step(1, nodeNameTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals(8, expressionArray1.length);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, step4.getAxis());
      assertEquals("...:An EntityRef is not allowed at the document root", qName0.toString());
      assertEquals("An EntityRef is not allowed at the document root", qName0.getName());
      assertEquals("...", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("...:An EntityRef is not allowed at the document root", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[4] = step4;
      Step step5 = new Step(1503, nodeNameTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertEquals(1503, step5.getAxis());
      assertEquals("...:An EntityRef is not allowed at the document root", qName0.toString());
      assertEquals("An EntityRef is not allowed at the document root", qName0.getName());
      assertEquals("...", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("...:An EntityRef is not allowed at the document root", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[5] = step5;
      Step step6 = new Step(16, nodeNameTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertEquals(16, step6.getAxis());
      assertEquals("...:An EntityRef is not allowed at the document root", qName0.toString());
      assertEquals("An EntityRef is not allowed at the document root", qName0.getName());
      assertEquals("...", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("...:An EntityRef is not allowed at the document root", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[6] = step6;
      Step step7 = new Step(134217728, nodeNameTest0, (Expression[]) null);
      assertNotNull(step7);
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertEquals("...:An EntityRef is not allowed at the document root", qName0.toString());
      assertEquals("An EntityRef is not allowed at the document root", qName0.getName());
      assertEquals("...", qName0.getPrefix());
      assertEquals(134217728, step7.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("...:An EntityRef is not allowed at the document root", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[7] = step7;
      Step step8 = new Step(0, nodeNameTest0, expressionArray0);
      assertNotNull(step8);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step7));
      assertEquals("...:An EntityRef is not allowed at the document root", qName0.toString());
      assertEquals("An EntityRef is not allowed at the document root", qName0.getName());
      assertEquals("...", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("...:An EntityRef is not allowed at the document root", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, step8.getAxis());
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(9, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion2);
      assertEquals(8, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationUnion2.equals((Object)coreOperationUnion0));
      assertFalse(coreOperationUnion2.equals((Object)coreOperationUnion1));
      assertEquals("|", coreOperationUnion2.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[0], coreOperationUnion2);
      assertNotNull(coreOperationLessThan0);
      assertEquals(8, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationUnion2.equals((Object)coreOperationUnion0));
      assertFalse(coreOperationUnion2.equals((Object)coreOperationUnion1));
      assertEquals("|", coreOperationUnion2.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals("position(null, null)", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4654, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4654, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4654, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", object0);
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)object0));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4654, coreFunction0.getFunctionCode());
      assertEquals("concat", object1);
      
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4654, coreFunction0.getFunctionCode());
      assertEquals("concat", object2);
      
      Object object3 = coreFunction1.functionNamespaceURI((EvalContext) null);
      assertNotNull(object3);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", object3);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name('concat')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction((-4027), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals((-4027), coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(5, coreFunction2.getArgumentCount());
      assertEquals(26, coreFunction2.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("6", "Gz[5Xu?");
      assertNotNull(qName0);
      assertEquals("6:Gz[5Xu?", qName0.toString());
      assertEquals("Gz[5Xu?", qName0.getName());
      assertEquals("6", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("6:Gz[5Xu?", qName0.toString());
      assertEquals("Gz[5Xu?", qName0.getName());
      assertEquals("6", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(5040, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5040, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(1, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(117, (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(117, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      boolean boolean0 = expressionPath0.areBasicPredicates(expressionArray1);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(0, expressionArray1.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 30, (NodeTest) null);
      assertNull(evalContext1);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "concat");
      assertFalse(boolean0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      String string0 = (String)coreFunction1.functionSubstring((EvalContext) null);
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name('concat', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("Incorrect number of arguments: ");
      assertNotNull(qName0);
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals(" ", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals(" ", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Incorrect number of arguments: ");
      assertNotNull(processingInstructionTest0);
      assertEquals("Incorrect number of arguments: ", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(16, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertEquals("Incorrect number of arguments: ", processingInstructionTest0.getTarget());
      assertEquals(16, step0.getAxis());
      
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Object object0 = nameAttributeTest0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object0);
      
      Object object1 = nameAttributeTest0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object1);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("true", object2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1721), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1721), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray0, (Step[]) null);
      assertNotNull(expressionPath1);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], expressionPath1);
      assertNotNull(nameAttributeTest0);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[5] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], nameAttributeTest0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("iSl|8jV~r,BZyk", "B |xd:");
      assertNotNull(qName0);
      assertEquals("iSl|8jV~r,BZyk", qName0.getPrefix());
      assertEquals("iSl|8jV~r,BZyk:B |xd:", qName0.toString());
      assertEquals("B |xd:", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("iSl|8jV~r,BZyk", qName0.getPrefix());
      assertEquals("iSl|8jV~r,BZyk:B |xd:", qName0.toString());
      assertEquals("B |xd:", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[7] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-3536), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals((-3536), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[5]);
      assertNotNull(predicateContext0);
      assertEquals(8, expressionArray0.length);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionLast(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1589, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = coreFunction0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Object object0 = nameAttributeTest0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object0);
      
      Object object1 = nameAttributeTest0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object1);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("true", object2);
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreFunction0, nameAttributeTest0);
      assertNotNull(nameAttributeTest1);
      assertEquals(1, expressionArray0.length);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      
      Object object3 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(object3);
      assertEquals(1, expressionArray0.length);
      assertFalse(object3.equals((Object)object2));
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", object3);
      
      Object object4 = coreFunction0.functionName((EvalContext) null);
      assertNotNull(object4);
      assertEquals(1, expressionArray0.length);
      assertFalse(object4.equals((Object)object2));
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", object4);
      
      Object object5 = coreFunction0.functionLocalName((EvalContext) null);
      assertNotNull(object5);
      assertEquals(1, expressionArray0.length);
      assertFalse(object5.equals((Object)object2));
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", object5);
      
      Object object6 = coreFunction0.functionBoolean((EvalContext) null);
      assertNotNull(object6);
      assertEquals(1, expressionArray0.length);
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(true, object6);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(boolean1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, int0);
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals("contains", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 32;
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("j.EJ'IK.xslpcbLK ");
      assertNotNull(qName0);
      assertEquals("j.EJ'IK.xslpcbLK ", qName0.toString());
      assertEquals("j.EJ'IK.xslpcbLK ", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("j.EJ'IK.xslpcbLK ", qName0.toString());
      assertEquals("j.EJ'IK.xslpcbLK ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(2, expressionArray0.length);
      assertEquals("j.EJ'IK.xslpcbLK ", qName0.toString());
      assertEquals("j.EJ'IK.xslpcbLK ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1828, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1828, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, int0);
      
      String string0 = coreFunction1.getFunctionName();
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals("contains", string0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9O`8qz9V*fiI6s9");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("The DocType already is attached to a document", ">7");
      assertNotNull(qName0);
      assertEquals("The DocType already is attached to a document:>7", qName0.toString());
      assertEquals(">7", qName0.getName());
      assertEquals("The DocType already is attached to a document", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("The DocType already is attached to a document:>7", qName0.toString());
      assertEquals(">7", qName0.getName());
      assertEquals("The DocType already is attached to a document", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-750), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-750), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("The DocType already is attached to a document:>7", qName0.toString());
      assertEquals(">7", qName0.getName());
      assertEquals("The DocType already is attached to a document", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("The DocType already is attached to a document:>7", nodeNameTest0.toString());
      
      Step step0 = new Step(25, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals("The DocType already is attached to a document:>7", qName0.toString());
      assertEquals(">7", qName0.getName());
      assertEquals("The DocType already is attached to a document", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("The DocType already is attached to a document:>7", nodeNameTest0.toString());
      assertEquals(25, step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      EvalContext evalContext0 = null;
      int int0 = 162;
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1589, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1589, coreFunction0.getFunctionCode());
      
      Iterator iterator0 = coreFunction0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1589, coreFunction0.getFunctionCode());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Object object0 = nameAttributeTest0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object0);
      
      Object object1 = nameAttributeTest0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object1);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertEquals("true", object2);
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreFunction0, nameAttributeTest0);
      assertNotNull(nameAttributeTest1);
      assertEquals(1, expressionArray0.length);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1589, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object3 = coreFunction1.functionRound((EvalContext) null);
      assertNotNull(object3);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0.0, object3);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Long long0 = new Long(792L);
      assertNotNull(long0);
      assertEquals(792L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals("concat", string0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("normalize-space");
      assertNotNull(processingInstructionTest0);
      assertEquals("normalize-space", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("normalize-space", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(namespaceContext0, 1110, processingInstructionTest0);
      assertNull(evalContext0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals("normalize-space", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = (EvalContext) namespaceContext0;
      evalContextArray0[4] = (EvalContext) namespaceContext0;
      evalContextArray0[5] = (EvalContext) namespaceContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(9, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      
      Iterator iterator0 = coreFunction0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Object object0 = nameAttributeTest0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(true, object0);
      
      Object object1 = nameAttributeTest0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(true, object1);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals("true", object2);
      
      NameAttributeTest nameAttributeTest1 = (NameAttributeTest)coreFunction0.getArg1();
      assertNotNull(nameAttributeTest1);
      assertEquals(1, expressionArray0.length);
      assertSame(nameAttributeTest1, nameAttributeTest0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      
      String string0 = (String)coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertFalse(string0.equals((Object)object2));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Boolean
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      CoreOperationNotEqual coreOperationNotEqual1 = (CoreOperationNotEqual)coreFunction0.getArg2();
      assertNotNull(coreOperationNotEqual1);
      assertEquals(2, expressionArray0.length);
      assertSame(coreOperationNotEqual1, coreOperationNotEqual0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual1, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("normalize-space", string0);
      
      QName qName1 = new QName("normalize-space");
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("normalize-space", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("normalize-space", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertNotNull(nodeNameTest0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("normalize-space", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("normalize-space", qName1.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("normalize-space", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(7, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      AncestorContext ancestorContext0 = new AncestorContext(unionContext0, false, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertEquals(7, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationDivide0);
      assertNotNull(nameAttributeTest0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, nameAttributeTest0);
      assertNotNull(coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName((String) null, "N\"fh \"^q>P )D");
      assertNotNull(qName0);
      assertEquals("N\"fh \"^q>P )D", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("N\"fh \"^q>P )D", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("N\"fh \"^q>P )D", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("N\"fh \"^q>P )D", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("N\"fh \"^q>P )D", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(2122, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals("N\"fh \"^q>P )D", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("N\"fh \"^q>P )D", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("N\"fh \"^q>P )D", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2122, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(610, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(610, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction610()(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 10;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = coreFunction0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Object object0 = nameAttributeTest0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object0);
      
      Object object1 = nameAttributeTest0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object1);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("true", object2);
      
      NameAttributeTest nameAttributeTest1 = (NameAttributeTest)coreFunction0.getArg1();
      assertNotNull(nameAttributeTest1);
      assertEquals(1, expressionArray0.length);
      assertSame(nameAttributeTest1, nameAttributeTest0);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      
      String string0 = (String)coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertFalse(string0.equals((Object)object2));
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", string0);
      
      Double double0 = (Double)coreFunction0.functionNumber((EvalContext) null);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("`l<~n`<B,~", "");
      assertNotNull(qName0);
      assertEquals("`l<~n`<B,~:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("`l<~n`<B,~", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("`l<~n`<B,~:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("`l<~n`<B,~", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(2, expressionArray0.length);
      assertEquals("`l<~n`<B,~:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("`l<~n`<B,~", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(117, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(1000, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1000, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Rx");
      assertNotNull(nodeNameTest0);
      assertEquals("`l<~n`<B,~:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("`l<~n`<B,~", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Rx", nodeNameTest0.getNamespaceURI());
      assertEquals("`l<~n`<B,~:", nodeNameTest0.toString());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("`l<~n`<B,~:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("`l<~n`<B,~", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Rx", nodeNameTest0.getNamespaceURI());
      assertEquals("`l<~n`<B,~:", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      int int0 = descendantContext0.getCurrentPosition();
      assertEquals("`l<~n`<B,~:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("`l<~n`<B,~", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Rx", nodeNameTest0.getNamespaceURI());
      assertEquals("`l<~n`<B,~:", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, int0);
      
      Object object0 = coreFunction0.computeValue(descendantContext0);
      assertNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("`l<~n`<B,~:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("`l<~n`<B,~", qName0.getPrefix());
      assertEquals(117, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Rx", nodeNameTest0.getNamespaceURI());
      assertEquals("`l<~n`<B,~:", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals("starts-with(null, null)", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      EvalContext evalContext0 = null;
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = coreFunction0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Object object0 = nameAttributeTest0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object0);
      
      Object object1 = nameAttributeTest0.computeValue((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(true, object1);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("true", object2);
      
      NameAttributeTest nameAttributeTest1 = (NameAttributeTest)coreFunction0.getArg1();
      assertNotNull(nameAttributeTest1);
      assertEquals(1, expressionArray0.length);
      assertSame(nameAttributeTest1, nameAttributeTest0);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(26, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(1568, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(1568, coreFunction2.getFunctionCode());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction2.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(1568, coreFunction2.getFunctionCode());
      assertEquals("true", object0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1568()(unknownFunction0()(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionNull((EvalContext) null);
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      QName qName0 = new QName("^umI\"{4zFOr0|]WEOX_");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.toString());
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.getName());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertNotNull(coreOperationNegate0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      assertNotNull(coreOperationMultiply1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      QName qName0 = new QName("2|7-");
      assertNotNull(qName0);
      assertEquals("2|7-", qName0.getName());
      assertEquals("2|7-", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("2|7-", qName0.getName());
      assertEquals("2|7-", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(1290, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1290, coreFunction0.getFunctionCode());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("2|7-", qName0.getName());
      assertEquals("2|7-", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("2|7-", nodeNameTest0.toString());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction2 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(26, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction(1568, expressionArray1);
      assertNotNull(coreFunction3);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(1568, coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      
      String string0 = coreFunction2.toString();
      assertNotNull(string0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(26, coreFunction2.getFunctionCode());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertNotNull(parentContext0);
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(ceiling(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("Factory is not set on the JXPathContext - cannot create path: ");
      assertNotNull(qName0);
      assertEquals("Factory is not set on the JXPathContext - cannot create path", qName0.getPrefix());
      assertEquals("Factory is not set on the JXPathContext - cannot create path: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals("Factory is not set on the JXPathContext - cannot create path", qName0.getPrefix());
      assertEquals("Factory is not set on the JXPathContext - cannot create path: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Factory is not set on the JXPathContext - cannot create path: ");
      assertNotNull(processingInstructionTest0);
      assertEquals("Factory is not set on the JXPathContext - cannot create path: ", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(16, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("Factory is not set on the JXPathContext - cannot create path: ", processingInstructionTest0.getTarget());
      assertEquals(16, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(1, stepArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd2);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd0));
      assertEquals("+", coreOperationAdd2.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd2;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(4249, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(4249, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("round");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(42, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(42, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-1043), (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals((-1043), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("%ddNk", "%ddNk");
      assertNotNull(qName0);
      assertEquals("%ddNk", qName0.getName());
      assertEquals("%ddNk", qName0.getPrefix());
      assertEquals("%ddNk:%ddNk", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("%ddNk", qName0.getName());
      assertEquals("%ddNk", qName0.getPrefix());
      assertEquals("%ddNk:%ddNk", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("%ddNk:%ddNk", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction28()(null)", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction2 = new CoreFunction(26, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(26, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      
      CoreFunction coreFunction3 = new CoreFunction(1568, expressionArray1);
      assertNotNull(coreFunction3);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(1568, coreFunction3.getFunctionCode());
      assertEquals(2, coreFunction3.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction3.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      QName qName0 = new QName("^umI\"{4zFOr0|]WEOX_");
      assertNotNull(qName0);
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.getName());
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.toString());
      assertNull(qName0.getPrefix());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("true", object0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.getName());
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("^umI\"{4zFOr0|]WEOX_", nodeNameTest0.toString());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.getName());
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("^umI\"{4zFOr0|]WEOX_", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1568()(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = (CoreOperationMultiply)coreFunction0.getArg3();
      assertNotNull(coreOperationMultiply1);
      assertEquals(6, expressionArray0.length);
      assertSame(coreOperationMultiply1, coreOperationMultiply0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply1, expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationMultiply0);
      assertNotNull(coreOperationNegate1);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      ExtensionFunction extensionFunction1 = (ExtensionFunction)coreFunction1.getArg2();
      assertNotNull(extensionFunction1);
      assertEquals(6, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(extensionFunction1, extensionFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray1[1] = (Expression) extensionFunction1;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) coreOperationMultiply1;
      expressionArray1[4] = (Expression) coreOperationEqual0;
      expressionArray1[5] = (Expression) coreOperationMultiply1;
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      expressionArray1[7] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[8] = (Expression) constant0;
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(0, coreFunction2.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("mqj8FpqlEuq ", "mqj8FpqlEuq ");
      assertNotNull(qName0);
      assertEquals("mqj8FpqlEuq :mqj8FpqlEuq ", qName0.toString());
      assertEquals("mqj8FpqlEuq ", qName0.getName());
      assertEquals("mqj8FpqlEuq ", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("mqj8FpqlEuq :mqj8FpqlEuq ", qName0.toString());
      assertEquals("mqj8FpqlEuq ", qName0.getName());
      assertEquals("mqj8FpqlEuq ", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, expressionArray0.length);
      assertEquals("mqj8FpqlEuq :mqj8FpqlEuq ", qName0.toString());
      assertEquals("mqj8FpqlEuq ", qName0.getName());
      assertEquals("mqj8FpqlEuq ", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertEquals(4, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals(4, expressionArray0.length);
      assertEquals("mqj8FpqlEuq :mqj8FpqlEuq ", qName0.toString());
      assertEquals("mqj8FpqlEuq ", qName0.getName());
      assertEquals("mqj8FpqlEuq ", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(4044, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4044, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4044, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(4044, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4044, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(4, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4044, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(4, int0);
      
      String string0 = coreFunction1.getFunctionName();
      assertNotNull(string0);
      assertEquals(4, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4044, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals("unknownFunction4044()", string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(1295, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(1295, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      int int0 = new Integer(29);
      assertEquals(29, int0);
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals("key(null, null)", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      
      String string1 = coreFunction1.toString();
      assertNotNull(string1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals("normalize-space(null, null)", string1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(914, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(914, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("8.#", "8.#");
      assertNotNull(qName0);
      assertEquals("8.#:8.#", qName0.toString());
      assertEquals("8.#", qName0.getPrefix());
      assertEquals("8.#", qName0.getName());
      
      NodeSet nodeSet0 = null;
      int int0 = 30;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      String string0 = "\"node\"";
      QName qName0 = new QName("\"node\"", ", ");
      assertNotNull(qName0);
      assertEquals("\"node\"", qName0.getPrefix());
      assertEquals(", ", qName0.getName());
      assertEquals("\"node\":, ", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("\"node\"", qName0.getPrefix());
      assertEquals(", ", qName0.getName());
      assertEquals("\"node\":, ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[2]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1851, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(1851, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      assertNotNull(descendantContext0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      CoreFunction coreFunction1 = new CoreFunction(766, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(766, coreFunction1.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      assertNotNull(selfContext0);
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      Object object0 = coreFunction1.computeValue(attributeContext0);
      assertNull(object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(766, coreFunction1.getFunctionCode());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      Object object1 = coreFunction0.functionNumber(attributeContext0);
      assertNotNull(object1);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(Double.NaN, object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction766()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      assertFalse(boolean0);
      
      QName qName0 = new QName("^umI\"{4zFOr0|]WEOX_");
      assertNotNull(qName0);
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.toString());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1568, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1568, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1.0, object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-1146), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals((-1146), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, int0);
      
      String string0 = coreFunction1.getFunctionName();
      assertNotNull(string0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals("unknownFunction0()", string0);
      
      int int1 = coreFunction1.getArgumentCount();
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(int1 == int0);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, int1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(29, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("^umI\"{4zFOr0|]WEOX_");
      assertNotNull(qName0);
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("^umI\"{4zFOr0|]WEOX_", qName0.toString());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      QName qName0 = new QName("%ddNk", "%ddNk");
      assertNotNull(qName0);
      assertEquals("%ddNk", qName0.getName());
      assertEquals("%ddNk", qName0.getPrefix());
      assertEquals("%ddNk:%ddNk", qName0.toString());
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(32, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(32, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      
      int int0 = coreFunction1.getFunctionCode();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(20, int0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1889));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      SelfContext selfContext0 = new SelfContext(attributeContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      Boolean boolean2 = (Boolean)coreFunction0.computeValue(selfContext0);
      assertNotNull(boolean2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(boolean2);
      
      Double double0 = (Double)coreFunction1.functionStringLength(selfContext0);
      assertNotNull(double0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(1, selfContext0.getPosition());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("Incorrect number of arguments: ");
      assertNotNull(qName0);
      assertEquals(" ", qName0.getName());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Incorrect number of arguments: ");
      assertNotNull(processingInstructionTest0);
      assertEquals("Incorrect number of arguments: ", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(16, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("Incorrect number of arguments: ", processingInstructionTest0.getTarget());
      assertEquals(16, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(1, stepArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd2);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationAdd2.equals((Object)coreOperationAdd0));
      assertEquals("+", coreOperationAdd2.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd2;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(4249, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(4249, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1430, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(1430, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      
      int int0 = coreFunction1.getFunctionCode();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(20, int0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1889));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      SelfContext selfContext0 = new SelfContext(attributeContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      Boolean boolean2 = (Boolean)coreFunction0.computeValue(selfContext0);
      assertNotNull(boolean2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1889), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      QName qName0 = new QName("j&zP");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("j&zP", qName0.getName());
      assertEquals("j&zP", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("j&zP", qName0.getName());
      assertEquals("j&zP", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("j&zP", nodeNameTest0.toString());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      NodeSet nodeSet0 = null;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("round");
      assertNotNull(qName0);
      assertEquals("round", qName0.toString());
      assertEquals("round", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("round", qName0.toString());
      assertEquals("round", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray1[0] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertNotNull(coreOperationAnd0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, expressionArray1[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd1);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[2], coreOperationAnd1);
      assertNotNull(coreOperationLessThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("round", qName0.toString());
      assertEquals("round", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray1[4] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationLessThan0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(1, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(820, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray1.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(820, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(6, expressionArray1.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(820, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("%ddNk", "%ddNk");
      assertNotNull(qName0);
      assertEquals("%ddNk", qName0.getPrefix());
      assertEquals("%ddNk:%ddNk", qName0.toString());
      assertEquals("%ddNk", qName0.getName());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      CoreFunction coreFunction1 = new CoreFunction(1855, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1855, coreFunction1.getFunctionCode());
      
      SelfContext selfContext0 = new SelfContext(attributeContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-134217728), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-134217728), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-134217728()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SDkW&Owzi&YAW");
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(">C]Pq>N!");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.args = expressionArray0;
      expressionArray0[0] = (Expression) extensionFunction0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction((-846), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nY`");
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nY`");
      CoreFunction coreFunction0 = new CoreFunction(679, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2513, expressionArray0);
      int int0 = 5;
      CoreFunction coreFunction1 = new CoreFunction(2513, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = (-3185);
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("vum)4<ev&");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.TAIWAN;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodePointer.newNodePointer(qName0, "vum)4<ev&", locale0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vum)4<ev&");
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3185()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      JXPathContext.newContext((Object) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1889));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction2 = new CoreFunction(24, (Expression[]) null);
      SelfContext selfContext0 = new SelfContext(attributeContext0, nodeTypeTest0);
      coreFunction0.computeValue(selfContext0);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstringBefore(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.getArg3();
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[0], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext(locale0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number($:, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 != org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) * org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3190), (Expression[]) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("0Z@D", "0Z@D");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("0Z@D");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], coreOperationNotEqual0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      Constant constant1 = new Constant((Number) null);
      Constant constant2 = new Constant("0Z@D");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, constant2);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("namespace-uri", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("Lexical error at line ");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[3] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-732), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(618, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("");
      variablePointerFactory0.createNodePointer((NodePointer) null, qName0, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionPosition(evalContext0);
      assertEquals(618, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreOperationSubtract0;
      expressionArray1[7] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean('concat', null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3190), (Expression[]) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "concat");
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      JXPathContext.newContext((Object) coreOperationSubtract0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      
      coreFunction1.functionSubstringBefore((EvalContext) null);
      assertEquals(5, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      NodeSet nodeSet0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      JXPathContext.newContext((Object) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1889));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      QName qName0 = new QName("translate");
      Locale locale0 = Locale.TAIWAN;
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreFunction0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, predicateContext0, locale0);
      NodePointer.newChildNodePointer(nodePointer0, qName0, coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      predicateContext0.getCurrentNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionName(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("%ddNk", "%ddNk");
      NodeSet nodeSet0 = null;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      JXPathContext.newContext((Object) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant((Number) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Constant constant1 = new Constant((String) null);
      expressionArray0[1] = (Expression) constant1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], constant0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      Step step0 = new Step((-1422), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(7, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(7, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1422), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1512, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(7, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1422), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) step0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) constant0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      ancestorContext0.getContextNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, unionContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      coreFunction0.functionPosition(evalContext0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("%ddNk", "%ddNk");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(653, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      JXPathContext.newContext((Object) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1889));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      QName qName0 = new QName("translate");
      Locale locale0 = Locale.TAIWAN;
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreFunction0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, predicateContext0, locale0);
      NodePointer.newChildNodePointer(nodePointer0, qName0, coreFunction0);
      coreFunction0.functionString(predicateContext0);
      int int0 = 69;
      Expression[] expressionArray0 = new Expression[1];
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-239), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      Constant constant0 = new Constant("id");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationAnd0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "id");
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      JXPathContext.newContext((Object) coreOperationSubtract0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationAnd0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1012), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3185()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationAnd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, (Expression) null);
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(1613, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expression0, expressionArray0[0]);
      QName qName0 = new QName("cFq5>9ZMw3)C K,");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(1441792, expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(nodeSetContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2392, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2392()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("j&zP");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2392, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2392()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      JXPathContext.newContext((Object) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1889));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      QName qName0 = new QName("translate");
      Locale locale0 = Locale.TAIWAN;
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreFunction0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, predicateContext0, locale0);
      NodePointer.newChildNodePointer(nodePointer0, qName0, coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      predicateContext0.getCurrentNodePointer();
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}p!^|");
      unionContext0.nextSet();
      PredicateContext predicateContext0 = new PredicateContext(unionContext0, coreFunction0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, extensionFunction0);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[1], coreOperationMod0);
      expressionArray0[5] = (Expression) coreOperationMod1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, expressionArray0[3]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[4], coreOperationGreaterThanOrEqual0);
      QName qName0 = new QName("starts-with");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction((-666), expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-666()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 mod org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 > org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000004 or org.apache.commons.jxpath.ri.compiler.Constant@0000000005 or org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000007, 0, org.apache.commons.jxpath.ri.compiler.Constant@0000000005 >= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = 1;
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("ry;Jx^$?XeT ");
      Locale locale0 = Locale.TAIWAN;
      Expression[] expressionArray1 = new Expression[4];
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      coreFunction1.getArgumentCount();
      coreFunction1.getFunctionName();
      coreFunction1.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-1), int0);
      
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, attributeContext0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.computeValue(rootContext0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction-1()()", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2379, (Expression[]) null);
      coreFunction1.functionNull((EvalContext) null);
      coreFunction1.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1889));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      QName qName0 = new QName("translate");
      Locale locale0 = Locale.TAIWAN;
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreFunction0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, predicateContext0, locale0);
      NodePointer.newChildNodePointer(nodePointer0, qName0, coreFunction0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      predicateContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, decimalFormat0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      NodeSet nodeSet0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 23;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("j&zP");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionCode();
      JXPathContext.newContext((Object) coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.compute(attributeContext0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("ry;Jx^$?XeT ");
      Locale locale0 = Locale.TAIWAN;
      QName qName1 = null;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, unknownFunction0()(), unknownFunction0()(), unknownFunction0()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("=/G5m", "=/G5m");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "=/G5m");
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, locationPath0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = "concat";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "concat");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("concat");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "concat");
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationSubtract0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      coreOperationSubtract0.isContextDependent();
      QName qName0 = new QName("9N6 x0uo\"lg713", "string");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext0.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext(rootContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean('concat', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2392, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(21856255, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Short short0 = new Short((short)5);
      Constant constant0 = new Constant(short0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, coreOperationMultiply0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((short)5, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("DiC%_z){U8]asB5", "DiC%_z){U8]asB5");
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Long long0 = new Long(0L);
      QName qName0 = new QName("", "1S/#sUDoRc6");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, coreOperationNegate0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, coreOperationMultiply0);
      QName qName1 = new QName("\"*\"");
      VariableReference variableReference1 = new VariableReference(qName1);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationMultiply1;
      expressionArray0[1] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      ChildContext childContext1 = new ChildContext(childContext0, nodeNameTest0, false, false);
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext1, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(childContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2251), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2251()(org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3525, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreFunction0);
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) nameAttributeTest0;
      expressionArray1[4] = null;
      expressionArray1[5] = (Expression) nameAttributeTest0;
      expressionArray1[6] = null;
      CoreFunction coreFunction1 = new CoreFunction((-3185), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Expression expression0 = null;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      int int0 = 7;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(0L);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      coreFunction0.getArg1();
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("j&zP", "j&zP");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      coreFunction0.args = expressionArray0;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      QName qName0 = new QName("2|7-");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionCode();
      JXPathContext.newContext((Object) coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      NodePointer.newChildNodePointer(nodePointer0, qName0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("tONh&`<\"u");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(21856255, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("j&zP");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2392, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, nodePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, attributeContext0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-2251), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2251()(org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(41, coreFunction0.getFunctionCode());
      
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expression0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray0[0]);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("t.>><c+9bP~G2V3w_'");
      coreOperationAdd0.args = expressionArray0;
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      NodePointer nodePointer0 = variablePointer0.createPath(jXPathContext0, (Object) "t.>><c+9bP~G2V3w_'");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, coreOperationSubtract0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3525, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(3525, expressionArray0);
      coreFunction1.compute((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("normalize-space");
      processingInstructionTest0.toString();
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2392, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      NodeSet nodeSet0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      QName qName0 = new QName("=/G5m", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "=/G5m");
      Expression[] expressionArray0 = new Expression[0];
      Step step0 = new Step(4, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      Step step1 = new Step(4, nodeNameTest0, expressionArray0);
      stepArray0[0] = step1;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step2;
      Step step3 = new Step(27, nodeNameTest0, expressionArray0);
      stepArray0[4] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, nameAttributeTest0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(locationPath0, nameAttributeTest0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, nameAttributeTest1);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 1;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, coreOperationAdd0);
      QName qName0 = new QName("p {AraHB'", "p {AraHB'");
      VariableReference variableReference0 = new VariableReference(qName0);
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3185));
      Step step0 = new Step(29, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(29, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3185), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, variableReference0);
      Constant constant0 = new Constant("CWu");
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(360, expressionArray0);
      coreFunction0.getArg2();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("2|7-", "2|7-");
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreOperationOr0.args = expressionArray0;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("j&zP");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-239), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-239()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionString(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("=/G5m", "JXPath: found  ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "JXPath: found  ");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, nameAttributeTest0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3412, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      QName qName0 = new QName("2|7-", "2|7-");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreOperationOr0.args = expressionArray0;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000008), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) * (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), -(org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 div (org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) * org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, $2|7-:2|7-, org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000008)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = null;
      QName qName0 = new QName("\"last\"", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      Constant constant0 = new Constant((String) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-2076), expressionArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, (Expression[]) null, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, expressionPath0);
      String string0 = "CWu";
      QName qName0 = new QName("9!w|LrSfwKUb$", "CWu");
      QName qName1 = new QName("CWu", "CWu");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = 2513;
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(2513, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      coreFunction0.compute((EvalContext) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3185()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3185), (Expression[]) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.NodeSetContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationAnd0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[4] = (Expression) constant0;
      QName qName0 = new QName("{O \u0002@Wh_/lsl@o@j");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, extensionFunction1);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1012), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.getArg3();
      assertEquals(15, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("=/G5m", "JXPath: found  ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3412, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3412()(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000004 div (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000005), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000005) > org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      QName qName0 = new QName("2|7-");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000008), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) * (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), -(org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 div (org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) * org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, $2|7-, org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000008)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Byte byte0 = new Byte((byte)0);
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("last");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-924), expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int int0 = 32;
      Expression[] expressionArray0 = new Expression[1];
      Expression expression0 = null;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("V");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("L~Wbf");
      Step step0 = new Step(1694, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1694, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1694, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1694, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      step3.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      processingInstructionTest0.toString();
      step3.toString();
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1694, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationAdd0.args = expressionArray0;
      QName qName0 = new QName("DiC%_z){U8]asB5", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(parentContext0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName(")?k~Nn!VW~o_J", ")?k~Nn!VW~o_J");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1835), expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-1835), int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray0);
      coreFunction0.toString();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      ancestorContext0.reset();
      // Undeclared exception!
      try { 
        ancestorContext0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JXPath iterators cannot remove nodes
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(469, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("CWu", "CWu");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant("CWu");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(2513, expressionArray0);
      coreFunction0.getArg2();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
