/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:18:57 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("substring-before");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      coreOperationLessThanOrEqual0.args = expressionArray1;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2790, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(2790, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(3517, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(3517, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-10));
      assertEquals((byte) (-10), (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("^E3EQ?= z");
      assertEquals("^E3EQ?= z", qName0.toString());
      assertEquals("^E3EQ?= z", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("^E3EQ?= z", qName0.toString());
      assertEquals("^E3EQ?= z", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray1);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      
      expressionArray0[6] = (Expression) extensionFunction1;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-767), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertEquals((-767), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CoreFunction coreFunction0 = new CoreFunction(45, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(45, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(45, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("node()", (String) null);
      assertEquals("node():null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("node()", qName0.getPrefix());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "node()", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("node():null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("node()", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "52", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(45, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("node():null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("node()", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(45, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("node():null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("node()", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(45, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("node():null", qName0.toString());
      assertNull(qName0.getName());
      assertEquals("node()", qName0.getPrefix());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: node():null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], constant0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      coreOperationGreaterThan0.args = expressionArray1;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((byte)25, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long(2L);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("f", object1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Byte byte0 = new Byte((byte)25);
      assertEquals((byte)25, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], constant0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)25, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(3, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("25", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertTrue(object1.equals((Object)object0));
      assertEquals("25", object1);
      assertEquals(3, expressionArray0.length);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Long long0 = new Long((-17L));
      assertEquals((-17L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(34, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(34, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(34, coreFunction1.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext(evalContextArray0[1], nodeNameTest0, true, true);
      assertEquals(9, evalContextArray0.length);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(childContext0);
      
      evalContextArray0[6] = (EvalContext) childContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      evalContextArray0[8] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(9, evalContextArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], constant0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) constant0;
      Object object0 = coreOperationGreaterThan0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(object0);
      
      CoreFunction coreFunction0 = new CoreFunction((byte)15, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("15", object1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      List list0 = basicNodeSet0.getNodes();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = nodeSetContext0.setPosition((-203));
      assertFalse(boolean0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals((-203), nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals((-203), nodeSetContext0.getPosition());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("52");
      assertNull(qName0.getPrefix());
      assertEquals("52", qName0.toString());
      assertEquals("52", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "52");
      assertNull(qName0.getPrefix());
      assertEquals("52", qName0.toString());
      assertEquals("52", qName0.getName());
      assertEquals("52", nodeNameTest0.toString());
      assertEquals("52", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("52", qName0.toString());
      assertEquals("52", qName0.getName());
      assertEquals("52", nodeNameTest0.toString());
      assertEquals("52", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(40, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-3237), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-3237), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      List list0 = basicNodeSet0.getNodes();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      CoreFunction coreFunction0 = new CoreFunction(3064, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3064, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      List list1 = basicNodeSet0.getPointers();
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3064, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(4521, processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(4521, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(266, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(266, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(4521, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(4521, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(4521, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(4521, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) extensionFunction0;
      Step step4 = new Step(255, processingInstructionTest0, expressionArray1);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(255, step4.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step5 = new Step(266, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(266, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(255, nodeNameTest0, expressionArray1);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(255, step6.getAxis());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(266, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(266, step7.getAxis());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(8, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[0], expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray0.length);
      assertEquals(2, expressionArray1.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, coreOperationSubtract0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals(2, expressionArray1.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(4521, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(4521, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Long long0 = new Long((-17L));
      assertEquals((-17L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-398), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-398), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("-17-17", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-398), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-17-17");
      assertEquals("-17-17", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-398), processingInstructionTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("-17-17", processingInstructionTest0.getTarget());
      assertEquals((-398), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1198, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals("-17-17", processingInstructionTest0.getTarget());
      assertEquals(1198, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1198, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals("-17-17", processingInstructionTest0.getTarget());
      assertEquals(1198, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-398), processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertEquals("-17-17", processingInstructionTest0.getTarget());
      assertEquals((-398), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("-17-17");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertEquals("-17-17", processingInstructionTest1.getTarget());
      assertNotNull(processingInstructionTest1);
      
      Step step4 = new Step((-1323), processingInstructionTest1, expressionArray0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals(2, expressionArray0.length);
      assertEquals("-17-17", processingInstructionTest1.getTarget());
      assertEquals((-1323), step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2633), processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertEquals(2, expressionArray0.length);
      assertEquals((-2633), step5.getAxis());
      assertEquals("-17-17", processingInstructionTest0.getTarget());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-398), coreFunction0.getFunctionCode());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-398), coreFunction0.getFunctionCode());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertNotNull(evalContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      List list0 = basicNodeSet0.getNodes();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      CoreFunction coreFunction0 = new CoreFunction(1381, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(1381, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, expressionArray0.length);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1381, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      QName qName0 = new QName("Invalid argument ype for 2sum': ");
      assertEquals("Invalid argument ype for 2sum': ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertEquals("Invalid argument ype for 2sum'", qName0.getPrefix());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("Invalid argument ype for 2sum': ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertEquals("Invalid argument ype for 2sum'", qName0.getPrefix());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "Invalid argument ype for 2sum': ");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(initialContext0, basicNodeSet0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(nodeSetContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertEquals(1.0, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2147483648()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(7, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long(193L);
      assertEquals(193L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction1.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction((-1341), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-1341), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals(7, expressionArray0.length);
      assertEquals((-1341), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNull(expression0);
      
      expressionArray0[0] = null;
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = (CoreOperationNegate)coreFunction0.getArg3();
      assertSame(coreOperationNegate1, coreOperationNegate0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-1341), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationNegate1);
      
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertNotNull(coreOperationAnd1);
      
      expressionArray0[6] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction1 = new CoreFunction((byte)15, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction1.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Jv:/dmy_$m+hh,9");
      assertFalse(boolean0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      List list0 = basicNodeSet0.getPointers();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      CoreFunction coreFunction0 = new CoreFunction(287, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(287, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = nodeSetContext0.toString();
      assertEquals("Empty expression context", string0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNotNull(string0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, expressionArray0.length);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(287, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertEquals(287, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("()");
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-1), nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), step1.getAxis());
      assertNotNull(step1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = step0.toString();
      assertNotSame(step0, step1);
      assertFalse(step0.equals((Object)step1));
      assertEquals("UNKNOWN::()[$()][null]", string0);
      assertEquals(2, expressionArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), step0.getAxis());
      assertNotNull(string0);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1486, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1486, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      String string1 = step2.toString();
      assertNotSame(step2, step1);
      assertNotSame(step2, step0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("UNKNOWN::()[$()][null]", string1);
      assertEquals(2, expressionArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1486, step2.getAxis());
      assertNotNull(string1);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(locationPath0.isAbsolute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step0, locale0);
      assertNotSame(step0, step2);
      assertNotSame(step0, step1);
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), step0.getAxis());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newChildNodePointer(beanPointer0, qName0, beanPointer0);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(step0, step2);
      assertNotSame(step0, step1);
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isContainer());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer1.isAttribute());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), step0.getAxis());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, step2, beanPointer1);
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isContainer());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer1.isAttribute());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals((-1), step0.getAxis());
      assertEquals(1486, step2.getAxis());
      assertTrue(locationPath0.isAbsolute());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotSame(step0, step2);
      assertNotSame(step0, step1);
      assertNotSame(step2, step1);
      assertNotSame(step2, step0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals("()", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), step0.getAxis());
      assertEquals(1486, step2.getAxis());
      assertTrue(locationPath0.isAbsolute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isContainer());
      assertEquals(1, beanPointer1.getLength());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(beanPointer1.isRoot());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(initialContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = new Locale("g", "g", "g");
      assertEquals("g", locale0.getVariant());
      assertEquals("g_G_g", locale0.toString());
      assertEquals("g", locale0.getLanguage());
      assertEquals("G", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("g", locale0.getVariant());
      assertEquals("g_G_g", locale0.toString());
      assertEquals("g", locale0.getLanguage());
      assertEquals("G", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("g", locale0.getVariant());
      assertEquals("g_G_g", locale0.toString());
      assertEquals("g", locale0.getLanguage());
      assertEquals("G", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("g", locale0.getVariant());
      assertEquals("g_G_g", locale0.toString());
      assertEquals("g", locale0.getLanguage());
      assertEquals("G", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertEquals(8, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("g", locale0.getVariant());
      assertEquals("g_G_g", locale0.toString());
      assertEquals("g", locale0.getLanguage());
      assertEquals("G", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long(52L);
      assertEquals(52L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertEquals("substring-before(52, 52)", string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[5];
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step((-2159), (NodeTest) null, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2159), step0.getAxis());
      assertNotNull(step0);
      
      Step step1 = new Step(58, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals(58, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(58, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(5, expressionArray0.length);
      assertEquals(58, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(638, (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals(638, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1227), (NodeTest) null, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertEquals(5, expressionArray0.length);
      assertEquals((-1227), step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2379), (NodeTest) null, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertEquals(5, expressionArray0.length);
      assertEquals((-2379), step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-2379), (NodeTest) null, expressionArray0);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertEquals(5, expressionArray0.length);
      assertEquals((-2379), step6.getAxis());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-31), (NodeTest) null, expressionArray0);
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertEquals(5, expressionArray0.length);
      assertEquals((-31), step7.getAxis());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step((-31), (NodeTest) null, expressionArray0);
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step3));
      assertEquals(5, expressionArray0.length);
      assertEquals((-31), step8.getAxis());
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(9, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], constant0);
      assertEquals(5, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      QName qName1 = new QName("qfL)<xN", (String) null);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("qfL)<xN:null", qName1.toString());
      assertNull(qName1.getName());
      assertEquals("qfL)<xN", qName1.getPrefix());
      assertNotNull(qName1);
      
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(5, expressionArray0.length);
      assertEquals("qfL)<xN:null", qName1.toString());
      assertNull(qName1.getName());
      assertEquals("qfL)<xN", qName1.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction((-2159), expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2159), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, true);
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(childContext0, coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2159), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(predicateContext0, (NodeTest) null, true);
      assertEquals(5, expressionArray0.length);
      assertEquals((-2159), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      coreFunction0.functionCount(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      coreOperationOr0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Long long0 = new Long((-17L));
      assertEquals((-17L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("Xh&:bdl$w/1U3j");
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-1082), nodeNameTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1082), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1689, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1689, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-105), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-105), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(2435, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertEquals(2435, step3.getAxis());
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(3, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertEquals(3, step4.getAxis());
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-105), nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals((-105), step5.getAxis());
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step5);
      
      Step step6 = new Step(13, nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertEquals(4, expressionArray0.length);
      assertEquals(13, step6.getAxis());
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(7, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      boolean boolean1 = step0.isContextDependent();
      assertNotSame(step0, step2);
      assertNotSame(step0, step6);
      assertNotSame(step0, step3);
      assertNotSame(step0, step4);
      assertNotSame(step0, step5);
      assertNotSame(step0, step1);
      assertFalse(boolean1 == boolean0);
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step6));
      assertFalse(step0.equals((Object)step3));
      assertFalse(step0.equals((Object)step4));
      assertFalse(step0.equals((Object)step5));
      assertFalse(step0.equals((Object)step1));
      assertTrue(boolean1);
      assertEquals(4, expressionArray0.length);
      assertEquals("bdl$w/1U3j", qName0.getName());
      assertEquals("Xh&:bdl$w/1U3j", qName0.toString());
      assertEquals("Xh&", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xh&:bdl$w/1U3j", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1082), step0.getAxis());
      
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      coreOperationOr0.args = expressionArray0;
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction1.functionStartsWith((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)boolean0));
      assertEquals(false, object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(object1);
      
      Object object2 = coreFunction1.compute((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object2);
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals("20", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant("Factory could not create object path: ");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray1[2] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray1[3] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray1[4] = (Expression) coreOperationUnion0;
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-704), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-704), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-704), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("substring-before");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      coreOperationLessThanOrEqual0.args = expressionArray1;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2790, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(2790, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction1.functionSubstringBefore((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Long long0 = new Long((-17L));
      assertEquals((-17L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant(long0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2178), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2178), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2178), coreFunction0.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long long0 = new Long(4398046510847L);
      assertEquals(4398046510847L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(3078, (NodeTest) null, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(3078, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(725, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals(725, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(204, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(204, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jdom.ContentList");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) coreFunction1;
      expressionArray2[2] = (Expression) coreFunction2;
      expressionArray2[3] = (Expression) coreFunction2;
      CoreFunction coreFunction3 = new CoreFunction(4194304, expressionArray2);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(4, expressionArray2.length);
      assertEquals(4, coreFunction3.getArgumentCount());
      assertEquals(4194304, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      Object object0 = coreFunction2.functionSubstring((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertEquals("", object0);
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-100));
      assertEquals((-100), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((byte)15, nodeTypeTest0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals((-100), nodeTypeTest0.getNodeType());
      assertEquals(15, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(24, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(8, expressionArray0.length);
      assertEquals((-100), nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(163, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(8, expressionArray0.length);
      assertEquals((-100), nodeTypeTest0.getNodeType());
      assertEquals(163, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)15, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertNotSame(expressionArray0, expressionArray1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertNull(expression0);
      
      expressionArray1[2] = null;
      expressionArray1[3] = (Expression) constant0;
      QName qName0 = new QName("11");
      assertEquals("11", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("11", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals("11", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("11", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray1[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray1.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction1.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Long long0 = new Long((-17L));
      assertEquals((-17L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = new Long(0L);
      assertFalse(long1.equals((Object)long0));
      assertEquals(0L, (long)long1);
      assertNotNull(long1);
      
      Constant constant0 = new Constant(long0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      coreOperationLessThanOrEqual0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(50, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("\" \"");
      assertEquals("\" \"", qName0.toString());
      assertEquals("\" \"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\" \"");
      assertEquals("\" \"", qName0.toString());
      assertEquals("\" \"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\" \"", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\" \"", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-1081), nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("\" \"", qName0.toString());
      assertEquals("\" \"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\" \"", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\" \"", nodeNameTest0.toString());
      assertEquals((-1081), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-510), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals("\" \"", qName0.toString());
      assertEquals("\" \"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\" \"", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\" \"", nodeNameTest0.toString());
      assertEquals((-510), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("\" \"", qName0.toString());
      assertEquals("\" \"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\" \"", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\" \"", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.computeValue(namespaceContext0);
      assertEquals(2, expressionArray0.length);
      assertEquals("\" \"", qName0.toString());
      assertEquals("\" \"", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("\" \"", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("\" \"", nodeNameTest0.toString());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNull(object0);
      
      // Undeclared exception!
      coreFunction0.functionLang(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals("20", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationGreaterThan0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertNotNull(coreOperationAnd1);
      
      expressionArray0[2] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction((-626), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-626), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply1 = (CoreOperationMultiply)coreFunction0.getArg2();
      assertSame(coreOperationMultiply1, coreOperationMultiply0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-626), coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertNotNull(coreOperationMultiply1);
      
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd2 = (CoreOperationAnd)coreFunction0.getArg3();
      assertSame(coreOperationAnd2, coreOperationAnd1);
      assertNotSame(coreOperationAnd2, coreOperationAnd0);
      assertFalse(coreOperationAnd2.equals((Object)coreOperationAnd0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-626), coreFunction0.getFunctionCode());
      assertEquals("and", coreOperationAnd2.getSymbol());
      assertNotNull(coreOperationAnd2);
      
      expressionArray0[5] = (Expression) coreOperationAnd2;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[4], coreOperationAnd2);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertFalse(coreOperationAnd2.equals((Object)coreOperationAnd0));
      assertEquals(7, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-626), coreFunction0.getFunctionCode());
      assertEquals("and", coreOperationAnd2.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("-17-17", "-17-17");
      assertEquals("-17-17:-17-17", qName0.toString());
      assertEquals("-17-17", qName0.getPrefix());
      assertEquals("-17-17", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("-17-17:-17-17", qName0.toString());
      assertEquals("-17-17", qName0.getPrefix());
      assertEquals("-17-17", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals("-17-17:-17-17", qName0.toString());
      assertEquals("-17-17", qName0.getPrefix());
      assertEquals("-17-17", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, expressionArray0[3]);
      assertEquals(7, expressionArray0.length);
      assertEquals("-17-17:-17-17", qName0.toString());
      assertEquals("-17-17", qName0.getPrefix());
      assertEquals("-17-17", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("11");
      assertEquals("11", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-65536), processingInstructionTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("11", processingInstructionTest0.getTarget());
      assertEquals((-65536), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, step1.getAxis());
      assertEquals("11", processingInstructionTest0.getTarget());
      assertNotNull(step1);
      
      stepArray0[1] = step0;
      Step step2 = new Step(2258, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals(2258, step2.getAxis());
      assertEquals("11", processingInstructionTest0.getTarget());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(7, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, step3.getAxis());
      assertEquals("11", processingInstructionTest0.getTarget());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[5] = (Expression) locationPath0;
      Float float0 = new Float((float) 7);
      assertEquals(7.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)102;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)36, (byte)102}, byteArray0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long((-17L));
      assertEquals((-17L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[1]);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-201));
      assertEquals((-201), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1544), nodeTypeTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-201), nodeTypeTest0.getNodeType());
      assertEquals((-1544), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(5, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals((-201), nodeTypeTest0.getNodeType());
      assertEquals(5, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(3695, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(9, expressionArray0.length);
      assertEquals(3695, step2.getAxis());
      assertEquals((-201), nodeTypeTest0.getNodeType());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[5], expressionArray0, stepArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[6] = (Expression) expressionPath0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-201), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-201), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, -(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Long long0 = new Long(20L);
      assertEquals(20L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction(38, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(38, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(38, coreFunction1.getFunctionCode());
      assertNull(object1);
      
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("20", object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long(26);
      assertEquals(26L, (long)long0);
      assertNotNull(long0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant("11");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      QName qName0 = new QName("11", "");
      assertEquals("11", qName0.getPrefix());
      assertEquals("11:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("11", qName0.getPrefix());
      assertEquals("11:", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant1 = new Constant(long0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray1[0] = (Expression) constant1;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expression0, constant1);
      assertSame(expression0, constant0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expression0.equals((Object)constant1));
      assertEquals(5, expressionArray1.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertNotNull(expression0);
      
      expressionArray1[4] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(5, expressionArray1.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)15;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15, (byte)15, (byte)15, (byte)15, (byte)15, (byte)15, (byte)15}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(21790719, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(21790719, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(21790719, coreFunction0.getFunctionCode());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(21790719, nodeNameTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(21790719, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[5] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant("11");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2022, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2022, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2022, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertFalse(object1.equals((Object)boolean0));
      assertEquals(true, object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2022, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, locale0, locale0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string0);
      assertEquals(0, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(string0);
      
      String string1 = (String)coreFunction0.functionLocalName(rootContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(0, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("J");
      assertEquals("J", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("J", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      QName qName0 = new QName("J", "J");
      assertEquals("J", qName0.getName());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "J");
      assertEquals("J", qName0.getName());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeNameTest0);
      assertEquals("J", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("J", qName0.getName());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertEquals("J", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("J", qName0.getName());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertNotNull(nodeSetContext0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("J", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("J", qName0.getName());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertEquals("1", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(80, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(80, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2947), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals((-2947), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      QName qName0 = new QName("\">=\"");
      assertNull(qName0.getPrefix());
      assertEquals("\">=\"", qName0.toString());
      assertEquals("\">=\"", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertNull(qName0.getPrefix());
      assertEquals("\">=\"", qName0.toString());
      assertEquals("\">=\"", qName0.getName());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction1, nullPointer0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals((-2947), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("\">=\"", qName0.toString());
      assertEquals("\">=\"", qName0.getName());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals((-2947), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("\">=\"", qName0.toString());
      assertEquals("\">=\"", qName0.getName());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      String string0 = (String)coreFunction1.functionNamespaceURI(rootContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", string0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-2947), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("\">=\"", qName0.toString());
      assertEquals("\">=\"", qName0.getName());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isContainer());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionArray0[2]);
      assertEquals(4, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MAX_VALUE, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(Integer.MAX_VALUE, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(7, nodeNameTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(7, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(4027, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4027, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      LocationPath locationPath1 = (LocationPath)coreFunction0.getArg1();
      assertSame(locationPath1, locationPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4027, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertTrue(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath1, coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4027, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertTrue(locationPath1.isAbsolute());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      assertEquals(9, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4027, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals(4027, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertTrue(locationPath1.isAbsolute());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[5] = (Expression) coreOperationNegate0;
      LocationPath locationPath2 = (LocationPath)coreFunction0.getArg1();
      assertSame(locationPath2, locationPath1);
      assertSame(locationPath2, locationPath0);
      assertEquals(9, expressionArray0.length);
      assertTrue(locationPath2.isAbsolute());
      assertEquals(4027, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(locationPath2);
      
      expressionArray0[6] = (Expression) locationPath2;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, expressionArray0[1]);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreFunction0, expressionArray0[1]);
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(9, expressionArray0.length);
      assertEquals(4027, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertNotNull(coreOperationSubtract1);
      
      expressionArray0[8] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      nameAttributeTest0.args = expressionArray0;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(1, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("J");
      assertEquals("J", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("J", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      QName qName0 = new QName("J", "J");
      assertEquals("J", qName0.getPrefix());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "J");
      assertEquals("J", qName0.getPrefix());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getName());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeNameTest0);
      assertEquals("J", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals("J", qName0.getPrefix());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getName());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertEquals("J", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals("J", qName0.getPrefix());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getName());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("J", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals("J", qName0.getPrefix());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getName());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionNull(nodeSetContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals("J", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals("J", qName0.getPrefix());
      assertEquals("J:J", qName0.toString());
      assertEquals("J", qName0.getName());
      assertEquals("J:J", nodeNameTest0.toString());
      assertEquals("J", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ", "Cannot allocate dynamic property handler of class ");
      assertEquals("Cannot allocate dynamic property handler of class ", qName0.getName());
      assertEquals("Cannot allocate dynamic property handler of class ", qName0.getPrefix());
      assertEquals("Cannot allocate dynamic property handler of class :Cannot allocate dynamic property handler of class ", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("Cannot allocate dynamic property handler of class ", qName0.getName());
      assertEquals("Cannot allocate dynamic property handler of class ", qName0.getPrefix());
      assertEquals("Cannot allocate dynamic property handler of class :Cannot allocate dynamic property handler of class ", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(578, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(578, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("nEW|TrA|P:mCe`]c", "nEW|TrA|P:mCe`]c");
      assertEquals("nEW|TrA|P:mCe`]c", qName0.getName());
      assertEquals("nEW|TrA|P:mCe`]c:nEW|TrA|P:mCe`]c", qName0.toString());
      assertEquals("nEW|TrA|P:mCe`]c", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("nEW|TrA|P:mCe`]c", qName0.getName());
      assertEquals("nEW|TrA|P:mCe`]c:nEW|TrA|P:mCe`]c", qName0.toString());
      assertEquals("nEW|TrA|P:mCe`]c", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("nEW|TrA|P:mCe`]c", qName0.getName());
      assertEquals("nEW|TrA|P:mCe`]c:nEW|TrA|P:mCe`]c", qName0.toString());
      assertEquals("nEW|TrA|P:mCe`]c", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      assertEquals(6, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(3109, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(3109, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertSame(expression0, constant0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertNotNull(expression0);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertTrue(object2.equals((Object)object0));
      assertEquals("", object2);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(object2);
      
      String string0 = coreFunction0.toString();
      assertFalse(string0.equals((Object)object0));
      assertFalse(string0.equals((Object)object2));
      assertEquals("sum(15, 15)", string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(20);
      assertEquals(20, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertEquals(20, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      NodePointer nodePointer0 = ancestorContext0.getCurrentNodePointer();
      assertEquals(20, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNull(nodePointer0);
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotNull(rootContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(45, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(40, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(670, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("1", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertSame(expression0, constant0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertNotNull(expression0);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object2.equals((Object)object0));
      assertEquals("", object2);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      EvalContext evalContext0 = null;
      int int0 = 670;
      CoreFunction coreFunction0 = new CoreFunction(670, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("1", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertSame(expression0, constant0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertNotNull(expression0);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(670, coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(80, (Expression[]) null);
      assertEquals(80, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(89);
      assertEquals(89, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(2, nodeTypeTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(89, nodeTypeTest0.getNodeType());
      assertEquals(2, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      Step step1 = new Step(89, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray1.length);
      assertEquals(89, nodeTypeTest0.getNodeType());
      assertEquals(89, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-278), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(2, expressionArray1.length);
      assertEquals(89, nodeTypeTest0.getNodeType());
      assertEquals((-278), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-316), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(2, expressionArray1.length);
      assertEquals(89, nodeTypeTest0.getNodeType());
      assertEquals((-316), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      QName qName0 = new QName("(Q&$mI>2+([(VZ=#`m?", "");
      assertEquals("(Q&$mI>2+([(VZ=#`m?:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("(Q&$mI>2+([(VZ=#`m?", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("(Q&$mI>2+([(VZ=#`m?:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("(Q&$mI>2+([(VZ=#`m?", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("(Q&$mI>2+([(VZ=#`m?:", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step4 = new Step((-316), nodeNameTest0, expressionArray1);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals("(Q&$mI>2+([(VZ=#`m?:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("(Q&$mI>2+([(VZ=#`m?", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("(Q&$mI>2+([(VZ=#`m?:", nodeNameTest0.toString());
      assertEquals((-316), step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      QName qName1 = new QName("");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertNotNull(qName1);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(2, expressionArray1.length);
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("$yD.U`9R");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-278), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals((-278), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Double double0 = new Double((-17.168154570426278));
      assertEquals((-17.168154570426278), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Object object0 = coreOperationDivide0.compute((EvalContext) null);
      assertFalse(object0.equals((Object)double0));
      assertEquals(1.0, object0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(object0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-187), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(object1);
      
      coreOperationDivide0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      CoreFunction coreFunction0 = new CoreFunction((-696), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-696), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals((-696), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreOperationUnion0;
      expressionArray0[1] = (Expression) coreOperationUnion0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      expressionArray0[3] = (Expression) coreOperationUnion0;
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("(qOI+V");
      assertEquals("(qOI+V", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertEquals("(qOI+V", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      SelfContext selfContext0 = new SelfContext(descendantContext0, processingInstructionTest0);
      assertEquals("(qOI+V", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(218, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(218, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-520), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals((-520), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-520), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertNotNull(variablePointerFactory0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName((String) null, "");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer0 = variablePointerFactory0.createNodePointer((NodePointer) variablePointer0, qName0, (Object) coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals((-520), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "", (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      
      Object object0 = coreFunction1.functionString(evalContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(0, expressionArray0.length);
      assertEquals((-520), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionPosition(evalContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, object1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(218, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(2, int0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(45, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(unknownFunction45()(null), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = null;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      expressionArray1[4] = null;
      CoreFunction coreFunction0 = new CoreFunction(45, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(45, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("8RvR^Z^GrL$jxU^M B,");
      assertEquals("8RvR^Z^GrL$jxU^M B,", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(45, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, expressionArray0.length);
      assertEquals("8RvR^Z^GrL$jxU^M B,", processingInstructionTest0.getTarget());
      assertEquals(45, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(45, coreFunction0.getFunctionCode());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = new Double(3868.41643788);
      assertEquals(3868.41643788, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, constant0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("last");
      assertEquals("last", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(76, processingInstructionTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("last", processingInstructionTest0.getTarget());
      assertEquals(76, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("5-i|a");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertEquals("5-i|a", processingInstructionTest1.getTarget());
      assertNotNull(processingInstructionTest1);
      
      Step step1 = new Step(41, processingInstructionTest1, expressionArray0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals("5-i|a", processingInstructionTest1.getTarget());
      assertEquals(41, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationSubtract0, expressionArray0[1]);
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertNotNull(coreOperationSubtract1);
      
      expressionArray0[5] = (Expression) coreOperationSubtract1;
      Constant constant1 = new Constant("5-i|a");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, coreOperationEqual0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationSubtract0.equals((Object)coreOperationSubtract1));
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(670, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(670, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("0", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(670, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      coreFunction0.args = expressionArray0;
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction((-23), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(45, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction((-23), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-23), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = (CoreFunction)coreFunction2.getArg3();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-23), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals((-23), coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      CoreFunction coreFunction4 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertEquals(3, expressionArray1.length);
      assertEquals(30, coreFunction4.getFunctionCode());
      assertEquals(3, coreFunction4.getArgumentCount());
      assertNotNull(coreFunction4);
      
      // Undeclared exception!
      try { 
        coreFunction4.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationSubtract0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(11, (NodeTest) null, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(11, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, expressionArray0[2]);
      assertEquals(6, expressionArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-46), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-46), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      coreFunction0.functionLast(selfContext0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      expressionArray0[3] = (Expression) coreOperationDivide0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[5]);
      assertEquals(7, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationLessThan0, expressionArray0[5]);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals(7, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 1, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(45, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = (CoreFunction)coreFunction2.getArg3();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(45, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      String string0 = (String)coreFunction2.functionTranslate((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals("", string0);
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(string0);
      
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, (NodeTest) null);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      Boolean boolean0 = (Boolean)coreFunction3.functionBoolean(attributeContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(3, expressionArray1.length);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(45, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction1, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction1;
      expressionArray1[8] = (Expression) constant0;
      Step step0 = new Step(109, (NodeTest) null, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction2 = new CoreFunction(12, expressionArray1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(12, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction((-1885), expressionArray1);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction3.getArgumentCount());
      assertEquals((-1885), coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      CoreFunction coreFunction4 = (CoreFunction)coreFunction3.getArg3();
      assertNotSame(coreFunction3, coreFunction4);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertSame(coreFunction4, coreFunction0);
      assertNotSame(coreFunction4, coreFunction2);
      assertNotSame(coreFunction4, coreFunction3);
      assertNotSame(coreFunction4, coreFunction1);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction3.getArgumentCount());
      assertEquals((-1885), coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction4.getArgumentCount());
      assertEquals(13, coreFunction4.getFunctionCode());
      assertNotNull(coreFunction4);
      
      CoreFunction coreFunction5 = new CoreFunction(614, expressionArray1);
      assertFalse(coreFunction5.equals((Object)coreFunction2));
      assertFalse(coreFunction5.equals((Object)coreFunction0));
      assertFalse(coreFunction5.equals((Object)coreFunction3));
      assertFalse(coreFunction5.equals((Object)coreFunction4));
      assertFalse(coreFunction5.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals(614, coreFunction5.getFunctionCode());
      assertEquals(9, coreFunction5.getArgumentCount());
      assertNotNull(coreFunction5);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000004 div org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003, substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001), substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'org.jdom.ContentList', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001), substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001), 'org.jdom.ContentList')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("UC>DHf=S![O4G[}");
      assertEquals("UC>DHf=S![O4G[}", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UC>DHf=S![O4G[}", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("UC>DHf=S![O4G[}", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("UC>DHf=S![O4G[}", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) coreOperationDivide0;
      expressionArray0[4] = (Expression) coreOperationDivide0;
      expressionArray0[5] = (Expression) coreOperationDivide0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(1287, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(1287, coreFunction0.getFunctionCode());
      assertNull(object0);
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(19, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(19, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(19, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant0);
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationMultiply0, constant0);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertNotNull(coreOperationMultiply1);
      
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      QName qName0 = new QName("\"parent::\"");
      assertEquals("\"parent", qName0.getPrefix());
      assertEquals(":\"", qName0.getName());
      assertEquals("\"parent::\"", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("\"parent", qName0.getPrefix());
      assertEquals(":\"", qName0.getName());
      assertEquals("\"parent::\"", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      Expression expression0 = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long(26);
      assertEquals(26L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(26, 26, 26, 26, 26, 26, 26, 26)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertEquals(2, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationMod0);
      assertEquals(2, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1868, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1868, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(2, int0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1868, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EvalContext evalContext0 = null;
      Double double0 = new Double((-17.168154570426278));
      assertEquals((-17.168154570426278), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      int int0 = 0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = (CoreFunction)coreFunction2.getArg3();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(45, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      Double double0 = (Double)coreFunction1.functionFloor((EvalContext) null);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(coreFunction1, coreFunction3);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion((Expression[]) null);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertNotNull(coreOperationUnion1);
      
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("v@<LQ2+Q6]_P", "");
      assertEquals("v@<LQ2+Q6]_P", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("v@<LQ2+Q6]_P:", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, locale0);
      assertEquals("v@<LQ2+Q6]_P", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("v@<LQ2+Q6]_P:", qName0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationUnion1, beanPointer0);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("v@<LQ2+Q6]_P", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("v@<LQ2+Q6]_P:", qName0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("v@<LQ2+Q6]_P", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("v@<LQ2+Q6]_P:", qName0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      assertNotSame(coreOperationUnion1, coreOperationUnion0);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("v@<LQ2+Q6]_P", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("v@<LQ2+Q6]_P:", qName0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvalContext evalContext0 = null;
      Double double0 = new Double((-17.168154570426278));
      assertEquals((-17.168154570426278), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-187), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      coreOperationDivide0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(45, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(13, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = (CoreFunction)coreFunction2.getArg3();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(45, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      
      Double double0 = (Double)coreFunction3.functionRound(parentContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(45, coreFunction3.getFunctionCode());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(double0);
      
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, (NodeTest) null);
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      Boolean boolean0 = (Boolean)coreFunction3.functionBoolean(attributeContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(3, expressionArray1.length);
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(45, coreFunction3.getFunctionCode());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionNot(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(unknownFunction45()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, unknownFunction45()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Long long0 = new Long(26);
      assertEquals(26L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      coreFunction0.args = expressionArray0;
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Double double0 = new Double((-17.168154570426278));
      assertEquals((-17.168154570426278), (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-187), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("-", object1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-187()(-17.168154570426278, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("V(c.");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      assertEquals(9, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationGreaterThan0);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(9, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      QName qName0 = new QName("V(c.");
      assertEquals("V(c.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("V(c.", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("V(c.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("V(c.", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      Constant constant1 = new Constant("V(c.");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[5] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[3]);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationGreaterThan1);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertFalse(coreOperationGreaterThan0.equals((Object)coreOperationGreaterThan1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(coreOperationNegate1);
      
      expressionArray0[7] = (Expression) coreOperationNegate1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("V(c.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("V(c.", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[8] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-45), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-45), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3p:A>Pq4rBx[[");
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-553), processingInstructionTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals((-553), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-553), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals((-553), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(454, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(454, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(454, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(454, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(19, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(19, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertEquals(6, expressionArray0.length);
      assertEquals(19, step6.getAxis());
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-1), processingInstructionTest0, expressionArray0);
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals((-1), step7.getAxis());
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step(28, processingInstructionTest0, expressionArray0);
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step2));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(28, step8.getAxis());
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], locationPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("Cannot add a second doctype, only one is allowed");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[4] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(variableReference0);
      
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-553), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-553), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("local-name", "local-name");
      assertEquals("local-name", qName0.getName());
      assertEquals("local-name", qName0.getPrefix());
      assertEquals("local-name:local-name", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "+zM,?T(m!");
      assertEquals("local-name", qName0.getName());
      assertEquals("local-name", qName0.getPrefix());
      assertEquals("local-name:local-name", qName0.toString());
      assertEquals("local-name:local-name", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("+zM,?T(m!", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-1216), nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("local-name", qName0.getName());
      assertEquals("local-name", qName0.getPrefix());
      assertEquals("local-name:local-name", qName0.toString());
      assertEquals("local-name:local-name", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("+zM,?T(m!", nodeNameTest0.getNamespaceURI());
      assertEquals((-1216), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1217, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals("local-name", qName0.getName());
      assertEquals("local-name", qName0.getPrefix());
      assertEquals("local-name:local-name", qName0.toString());
      assertEquals("local-name:local-name", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("+zM,?T(m!", nodeNameTest0.getNamespaceURI());
      assertEquals(1217, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1217, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertEquals("local-name", qName0.getName());
      assertEquals("local-name", qName0.getPrefix());
      assertEquals("local-name:local-name", qName0.toString());
      assertEquals("local-name:local-name", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("+zM,?T(m!", nodeNameTest0.getNamespaceURI());
      assertEquals(1217, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 15;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      Short short0 = new Short((short) (-1268));
      assertEquals((short) (-1268), (short)short0);
      assertNotNull(short0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      Constant constant1 = new Constant("\"preceding::\"");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[3] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-95), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-95), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, expressionPath0);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(4, expressionArray0.length);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(4, expressionArray0.length);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(45, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction2 = new CoreFunction(109, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(109, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(109, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(1, expressionArray0.length);
      assertEquals(109, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      Object object0 = coreFunction3.functionLocalName((EvalContext) null);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = (CoreFunction)coreFunction2.getArg3();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertSame(coreFunction3, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(3, expressionArray1.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(13, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      CoreFunction coreFunction4 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction4.getArgumentCount());
      assertEquals(30, coreFunction4.getFunctionCode());
      assertNotNull(coreFunction4);
      
      // Undeclared exception!
      try { 
        coreFunction4.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("z3", "z3");
      assertEquals("z3:z3", qName0.toString());
      assertEquals("z3", qName0.getPrefix());
      assertEquals("z3", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("z3:z3", qName0.toString());
      assertEquals("z3", qName0.getPrefix());
      assertEquals("z3", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], variableReference0);
      assertEquals(4, expressionArray0.length);
      assertEquals("z3:z3", qName0.toString());
      assertEquals("z3", qName0.getPrefix());
      assertEquals("z3", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      expressionArray1[4] = (Expression) variableReference0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1019), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertEquals((-1019), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationUnion coreOperationUnion1 = (CoreOperationUnion)coreFunction0.getArg2();
      assertSame(coreOperationUnion1, coreOperationUnion0);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals((-1019), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreOperationUnion1);
      
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreOperationGreaterThan coreOperationGreaterThan1 = (CoreOperationGreaterThan)coreFunction0.getArg1();
      assertSame(coreOperationGreaterThan1, coreOperationGreaterThan0);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals((-1019), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-1019), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertEquals((-1019), coreFunction2.getFunctionCode());
      assertEquals(4, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Iterator iterator0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant((Number) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, constant0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
      assertEquals(8, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Constant constant1 = new Constant((Number) null);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[4] = (Expression) constant1;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertNotNull(coreOperationAnd1);
      
      expressionArray0[5] = (Expression) coreOperationAnd1;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[4], expressionArray0[0]);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertEquals(8, expressionArray0.length);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[6] = (Expression) coreOperationEqual1;
      CoreOperationEqual coreOperationEqual2 = new CoreOperationEqual(expressionArray0[2], coreOperationAnd0);
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual0));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual1));
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertEquals(8, expressionArray0.length);
      assertEquals("=", coreOperationEqual2.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationEqual2);
      
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("U(9h[OdP:Ai57tp'0", "U(9h[OdP:Ai57tp'0");
      assertEquals("U(9h[OdP:Ai57tp'0", qName0.getPrefix());
      assertEquals("U(9h[OdP:Ai57tp'0", qName0.getName());
      assertEquals("U(9h[OdP:Ai57tp'0:U(9h[OdP:Ai57tp'0", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("U(9h[OdP:Ai57tp'0", qName0.getPrefix());
      assertEquals("U(9h[OdP:Ai57tp'0", qName0.getName());
      assertEquals("U(9h[OdP:Ai57tp'0:U(9h[OdP:Ai57tp'0", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("U(9h[OdP:Ai57tp'0:U(9h[OdP:Ai57tp'0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      String string0 = constant1.toString();
      assertNotSame(constant1, constant0);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals("'null'", string0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(string0);
      
      Step step0 = new Step((-1360), nodeNameTest0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("U(9h[OdP:Ai57tp'0", qName0.getPrefix());
      assertEquals("U(9h[OdP:Ai57tp'0", qName0.getName());
      assertEquals("U(9h[OdP:Ai57tp'0:U(9h[OdP:Ai57tp'0", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("U(9h[OdP:Ai57tp'0:U(9h[OdP:Ai57tp'0", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1360), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual2, expressionArray0, stepArray0);
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual0));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual1));
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertEquals(8, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("=", coreOperationEqual2.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      coreFunction0.functionTrue(unionContext0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) coreOperationDivide0;
      expressionArray0[7] = (Expression) coreOperationDivide0;
      expressionArray0[8] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationDivide0;
      expressionArray1[6] = (Expression) extensionFunction0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1793), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertEquals((-1793), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("*&%YH>/hb](Q8");
      assertEquals("*&%YH>/hb](Q8", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("*&%YH>/hb](Q8", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreFunction0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      QName qName0 = new QName("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $");
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "A%@GOd");
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, true);
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      Object object0 = coreFunction1.computeValue(childContext0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("._asK");
      assertEquals("._asK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("._asK", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("._asK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("._asK", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      assertEquals("._asK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("._asK", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      assertEquals("._asK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("._asK", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("._asK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("._asK", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("4|Oo\"'_ct");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("._asK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("._asK", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      expressionArray0[4] = (Expression) coreFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("._asK", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("._asK", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-827), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals((-827), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      Iterator iterator0 = coreFunction2.iteratePointers((EvalContext) null);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals((-827), coreFunction2.getFunctionCode());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      coreFunction2.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, variableReference0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, nameAttributeTest0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-3900), processingInstructionTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-3900), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step1 = new Step(983, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertEquals(983, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) nameAttributeTest0;
      Step step2 = new Step(10, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(5, expressionArray1.length);
      assertEquals(10, step2.getAxis());
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, locationPath0);
      assertEquals(3, stepArray0.length);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      expressionArray0[3] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction((-187), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(10);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(10, nodeTypeTest1.getNodeType());
      assertNotNull(nodeTypeTest1);
      
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, false, nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(10, nodeTypeTest1.getNodeType());
      assertNotNull(descendantContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, locationPath0);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(3, stepArray0.length);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(10, nodeTypeTest1.getNodeType());
      assertNotNull(predicateContext0);
      
      ChildContext childContext0 = new ChildContext(predicateContext0, processingInstructionTest0, true, false);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(3, stepArray0.length);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(10, nodeTypeTest1.getNodeType());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName(childContext0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(1464, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1464, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, jXPathContextReferenceImpl1, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1464, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      PredicateContext predicateContext0 = new PredicateContext(initialContext0, coreOperationLessThan0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1464, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(predicateContext0);
      
      RootContext rootContext0 = predicateContext0.getRootContext();
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1464, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      coreFunction0.functionRound(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(268435456, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(268435456, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(17, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(17, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      Object object0 = coreFunction2.functionNot((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(false, object0);
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(17, coreFunction2.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionStringLength((EvalContext) null);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(5.0, object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      Object object2 = coreFunction1.functionName((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object2);
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(268435456, coreFunction1.getFunctionCode());
      assertNotNull(object2);
      
      Object object3 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object3);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-187), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object1);
      assertEquals(3, expressionArray0.length);
      assertEquals((-187), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-187()(0, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[13];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(13, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      boolean boolean0 = locationPath0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(13, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(13, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 3, processingInstructionTest0);
      assertEquals(5, expressionArray0.length);
      assertEquals(13, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(1, evalContext0.getCurrentPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertNotNull(evalContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      coreFunction0.args = expressionArray0;
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNotEqual0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertEquals("0", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(string0);
      
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreFunction coreFunction0 = new CoreFunction(2668, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2668, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2668, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction((-65536), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals((-65536), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction1.functionConcat((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("11", object1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-65536), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(object1);
      
      Object object2 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object2.equals((Object)object1));
      assertEquals("", object2);
      assertEquals(2, expressionArray0.length);
      assertEquals((-65536), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3p:A>Pq4rBx[[");
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-553), processingInstructionTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals((-553), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-553), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals((-553), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(454, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(454, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(454, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(454, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(15, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(15, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(15, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(15, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(15, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertEquals(6, expressionArray0.length);
      assertEquals(15, step6.getAxis());
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-1), processingInstructionTest0, expressionArray0);
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertEquals(6, expressionArray0.length);
      assertEquals((-1), step7.getAxis());
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step(28, processingInstructionTest0, expressionArray0);
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step3));
      assertEquals(6, expressionArray0.length);
      assertEquals("3p:A>Pq4rBx[[", processingInstructionTest0.getTarget());
      assertEquals(28, step8.getAxis());
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], locationPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("Cannot add a second doctype, only one is allowed");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[4] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(variableReference0);
      
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-553), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-553), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float(1635.1F);
      assertEquals(1635.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(93, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(93, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      String string0 = coreFunction1.toString();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("unknownFunction93()(1635.0999755859375, 1635.0999755859375, 1635.0999755859375, 1635.0999755859375)", string0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(93, coreFunction1.getFunctionCode());
      assertNotNull(string0);
      
      EvalContext evalContext0 = null;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(iterator0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[3]);
      assertEquals(4, expressionArray0.length);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(93, coreFunction1.getFunctionCode());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction93()(1635.0999755859375, 1635.0999755859375, 1635.0999755859375, 1635.0999755859375)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("@QYmaLX>e0I =bIjZ");
      assertEquals("@QYmaLX>e0I =bIjZ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-2586), processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("@QYmaLX>e0I =bIjZ", processingInstructionTest0.getTarget());
      assertEquals((-2586), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals("@QYmaLX>e0I =bIjZ", processingInstructionTest0.getTarget());
      assertEquals(1, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step2 = new Step(1, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(1, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertEquals("@QYmaLX>e0I =bIjZ", processingInstructionTest0.getTarget());
      assertEquals(1, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(385, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertEquals(385, step4.getAxis());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(5, nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertEquals(3, expressionArray0.length);
      assertEquals(5, step5.getAxis());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(1, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertEquals(3, expressionArray0.length);
      assertEquals(1, step6.getAxis());
      assertEquals("@QYmaLX>e0I =bIjZ", processingInstructionTest0.getTarget());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-1607), nodeTypeTest0, expressionArray0);
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertEquals(3, expressionArray0.length);
      assertEquals((-1607), step7.getAxis());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, false);
      assertEquals("@QYmaLX>e0I =bIjZ", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      coreFunction0.functionNot(childContext0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(0, 0, 0, 0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Float float0 = new Float(1635.1F);
      assertEquals(1635.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      int int0 = 14;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-553), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-553), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Iterator iterator0 = coreFunction0.iterate((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-553), coreFunction0.getFunctionCode());
      assertNotNull(iterator0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertSame(expression0, constant0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-553), coreFunction0.getFunctionCode());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertNotNull(expression0);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("1635.09997558593751635.09997558593751635.0999755859375", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-553), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-553()(1635.0999755859375, 1635.0999755859375, 1635.0999755859375)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Long long0 = new Long((-1347L));
      assertEquals((-1347L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationLessThanOrEqual0);
      assertEquals(0, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      int int0 = 12;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(28, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Long long0 = new Long(25);
      assertEquals(25L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(0, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(1030, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(1030, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      int int0 = 20;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      QName qName0 = new QName("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $");
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "A%@GOd");
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      Byte byte0 = Byte.valueOf((byte)88);
      assertEquals((byte)88, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[3] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(88, nodeNameTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(88, step0.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "u,?G_p\"");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("u,?G_p\"", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(nodeNameTest1);
      
      Step step1 = new Step(88, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("u,?G_p\"", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(88, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(215, nodeNameTest0, expressionArray0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(215, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(215, nodeNameTest0, expressionArray0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(7, expressionArray0.length);
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(215, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(77, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertEquals(7, expressionArray0.length);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("u,?G_p\"", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(77, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(88, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertEquals(7, expressionArray0.length);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("u,?G_p\"", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(88, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(10, nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals(7, expressionArray0.length);
      assertEquals(10, step6.getAxis());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(77, nodeNameTest1, expressionArray0);
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step5));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(7, expressionArray0.length);
      assertEquals(77, step7.getAxis());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("u,?G_p\"", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationMultiply0);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, coreOperationLessThan0);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(7, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(88, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(88, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest1, true);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("u,?G_p\"", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("u,?G_p\"", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("u,?G_p\"", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      coreFunction0.functionRound(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2882, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2882, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationAdd0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("e4", "e4");
      assertEquals("e4", qName0.getPrefix());
      assertEquals("e4", qName0.getName());
      assertEquals("e4:e4", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("e4", qName0.getPrefix());
      assertEquals("e4", qName0.getName());
      assertEquals("e4:e4", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(1, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNumber((EvalContext) null);
      assertEquals(0L, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1.0, object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("ijf}A7`EkTjQz:(sR", "ijf}A7`EkTjQz:(sR");
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("pxXtT|4.?|v");
      assertEquals("pxXtT|4.?|v", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(104, processingInstructionTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("pxXtT|4.?|v", processingInstructionTest0.getTarget());
      assertEquals(104, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(27, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("pxXtT|4.?|v", processingInstructionTest0.getTarget());
      assertEquals(27, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(104, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("pxXtT|4.?|v", processingInstructionTest0.getTarget());
      assertEquals(104, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(104, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("pxXtT|4.?|v", processingInstructionTest0.getTarget());
      assertEquals(104, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step4 = new Step(104, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(104, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(27, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertEquals(9, expressionArray0.length);
      assertEquals(27, step5.getAxis());
      assertEquals("pxXtT|4.?|v", processingInstructionTest0.getTarget());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-2223), nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertEquals((-2223), step6.getAxis());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(104, processingInstructionTest0, expressionArray0);
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertEquals(9, expressionArray0.length);
      assertEquals(104, step7.getAxis());
      assertEquals("pxXtT|4.?|v", processingInstructionTest0.getTarget());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(8, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      assertEquals(8, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertNotNull(variableReference1);
      
      expressionArray0[3] = (Expression) variableReference1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, expressionArray0[1]);
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertEquals(9, expressionArray0.length);
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[1]);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationNegate1);
      
      expressionArray0[6] = (Expression) coreOperationNegate1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, coreOperationNegate0);
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertEquals(8, stepArray0.length);
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(locationPath0, coreOperationEqual0);
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertEquals(8, stepArray0.length);
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getPrefix());
      assertEquals("ijf}A7`EkTjQz:(sR", qName0.getName());
      assertEquals("ijf}A7`EkTjQz:(sR:ijf}A7`EkTjQz:(sR", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationLessThan1);
      
      expressionArray0[7] = (Expression) coreOperationLessThan1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[6], expressionArray0[2]);
      assertEquals(9, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[8] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("Xo8pB|'p3*jI06<", "Xo8pB|'p3*jI06<");
      assertEquals("Xo8pB|'p3*jI06<", qName0.getName());
      assertEquals("Xo8pB|'p3*jI06<", qName0.getPrefix());
      assertEquals("Xo8pB|'p3*jI06<:Xo8pB|'p3*jI06<", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("Xo8pB|'p3*jI06<", qName0.getName());
      assertEquals("Xo8pB|'p3*jI06<", qName0.getPrefix());
      assertEquals("Xo8pB|'p3*jI06<:Xo8pB|'p3*jI06<", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Xo8pB|'p3*jI06<:Xo8pB|'p3*jI06<", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(45, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual1, expressionArray0, stepArray0);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(expressionPath0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertNotNull(selfContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, (NodeTest) null);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(namespaceContext0, 109, (NodeTest) null);
      assertNotSame(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual1);
      assertNotSame(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNull(evalContext0);
      
      Object object0 = coreFunction2.functionNamespaceURI((EvalContext) null);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = null;
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("o-C $8:6X-A`v");
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationSubtract0);
      assertEquals(1, expressionArray0.length);
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreOperationDivide0);
      assertEquals(1, expressionArray0.length);
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(extensionFunction0, coreOperationDivide0);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(1, expressionArray0.length);
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      
      String string0 = coreOperationGreaterThan1.toString();
      assertNotSame(coreOperationGreaterThan0, coreOperationGreaterThan1);
      assertNotSame(coreOperationGreaterThan1, coreOperationGreaterThan0);
      assertFalse(coreOperationGreaterThan0.equals((Object)coreOperationGreaterThan1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(1, expressionArray0.length);
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(string0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("o-C $8", qName0.getPrefix());
      assertEquals("6X-A`v", qName0.getName());
      assertEquals("o-C $8:6X-A`v", qName0.toString());
      assertEquals("o-C $8:6X-A`v", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(3712, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3712, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[2]);
      assertEquals(5, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], coreOperationNotEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationAdd0, coreOperationLessThanOrEqual0);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertNotNull(nameAttributeTest1);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationGreaterThanOrEqual0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray1.length);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, expressionArray1.length);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Step step0 = new Step((-1219), (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertEquals((-1219), step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals(3, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(32, expressionArray1);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertEquals(32, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      QName qName0 = new QName("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $");
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "A%@GOd");
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      Object object0 = coreFunction0.functionBoolean(parentContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(false, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant1;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[2], coreOperationLessThanOrEqual0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray1[3] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[4] = (Expression) constant0;
      CoreFunction coreFunction2 = new CoreFunction(1119, expressionArray1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(1119, coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("k\"4[-5", "I}b?j)#%b2");
      assertEquals("k\"4[-5", qName0.getPrefix());
      assertEquals("I}b?j)#%b2", qName0.getName());
      assertEquals("k\"4[-5:I}b?j)#%b2", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("k\"4[-5", qName0.getPrefix());
      assertEquals("I}b?j)#%b2", qName0.getName());
      assertEquals("k\"4[-5:I}b?j)#%b2", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      boolean boolean0 = coreOperationUnion0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("k\"4[-5", qName0.getPrefix());
      assertEquals("I}b?j)#%b2", qName0.getName());
      assertEquals("k\"4[-5:I}b?j)#%b2", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("I}b?j)#%b2");
      assertEquals("I}b?j)#%b2", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertEquals("I}b?j)#%b2", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertFalse(object0.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean1));
      assertEquals(true, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionStringLength((EvalContext) null);
      assertEquals(1.0, object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object2);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 16;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Long long0 = new Long(16);
      assertEquals(16L, (long)long0);
      assertNotNull(long0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1658, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(1658, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 45;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreFunction coreFunction0 = new CoreFunction(45, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(45, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("MoHjetSFt~.}");
      assertNull(qName0.getPrefix());
      assertEquals("MoHjetSFt~.}", qName0.toString());
      assertEquals("MoHjetSFt~.}", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("MoHjetSFt~.}", qName0.toString());
      assertEquals("MoHjetSFt~.}", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("MoHjetSFt~.}", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-2025), nodeNameTest0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("MoHjetSFt~.}", qName0.toString());
      assertEquals("MoHjetSFt~.}", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("MoHjetSFt~.}", nodeNameTest0.toString());
      assertEquals((-2025), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(47);
      assertEquals(47, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step1 = new Step(45, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertEquals(47, nodeTypeTest0.getNodeType());
      assertEquals(45, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("MoHjetSFt~.}", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNull(qName0.getPrefix());
      assertEquals("MoHjetSFt~.}", qName0.toString());
      assertEquals("MoHjetSFt~.}", qName0.getName());
      assertNotNull(nodeNameTest1);
      
      Step step2 = new Step(12, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(1, expressionArray0.length);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("MoHjetSFt~.}", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(12, step2.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("MoHjetSFt~.}", qName0.toString());
      assertEquals("MoHjetSFt~.}", qName0.getName());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(expressionPath0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      Object object0 = coreFunction2.functionCeiling((EvalContext) null);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1.0, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(45, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionNumber((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(object1.equals((Object)object0));
      assertEquals(0.0, object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      QName qName0 = new QName("smJNq+$", "");
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertNotNull(qName0);
      
      Expression[] expressionArray0 = new Expression[2];
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-105), processingInstructionTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-105), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-105), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-105), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1523, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1523, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1523, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(2, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1523, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray0[1]);
      assertEquals(2, expressionArray0.length);
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationSubtract0);
      assertEquals(2, expressionArray0.length);
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, expressionPath0);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals(2, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[1]);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(2, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      String string0 = coreOperationGreaterThan0.toString();
      assertEquals(2, expressionArray0.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(string0);
      
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("smJNq+$:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("smJNq+$", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("smJNq+$:", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Long long0 = new Long(5);
      assertEquals(5L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, coreOperationLessThanOrEqual0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(5, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(5, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction((-3539), (Expression[]) null);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals((-3539), coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      CoreFunction coreFunction4 = new CoreFunction((-3539), (Expression[]) null);
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertEquals(0, coreFunction4.getArgumentCount());
      assertEquals((-3539), coreFunction4.getFunctionCode());
      assertNotNull(coreFunction4);
      
      boolean boolean0 = coreFunction4.computeContextDependent();
      assertNotSame(coreFunction4, coreFunction1);
      assertNotSame(coreFunction4, coreFunction0);
      assertNotSame(coreFunction4, coreFunction2);
      assertNotSame(coreFunction4, coreFunction3);
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(boolean0);
      assertEquals(0, coreFunction4.getArgumentCount());
      assertEquals((-3539), coreFunction4.getFunctionCode());
      
      CoreFunction coreFunction5 = new CoreFunction(5, (Expression[]) null);
      assertFalse(coreFunction5.equals((Object)coreFunction2));
      assertFalse(coreFunction5.equals((Object)coreFunction4));
      assertFalse(coreFunction5.equals((Object)coreFunction0));
      assertFalse(coreFunction5.equals((Object)coreFunction1));
      assertFalse(coreFunction5.equals((Object)coreFunction3));
      assertEquals(5, coreFunction5.getFunctionCode());
      assertEquals(0, coreFunction5.getArgumentCount());
      assertNotNull(coreFunction5);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      ChildContext childContext0 = new ChildContext(descendantContext0, processingInstructionTest0, false, false);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(9, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      Step[] stepArray0 = new Step[5];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals(0, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      coreFunction0.args = expressionArray0;
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      String string0 = constant0.toString();
      assertEquals("0", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(string0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNotEqual0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationGreaterThanOrEqual0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationGreaterThanOrEqual0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction1 = new CoreFunction(3, coreFunction0.args);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(3, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.isContextDependent();
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(3, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      Step step0 = new Step(9, (NodeTest) null, coreFunction0.args);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(9, step0.getAxis());
      assertNotNull(step0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertNotNull(parentContext0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CoreFunction coreFunction3 = new CoreFunction(21, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(21, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      Object object0 = coreFunction3.computeValue((EvalContext) null);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(21, coreFunction3.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction3.compute((EvalContext) null);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertTrue(object1.equals((Object)boolean0));
      assertFalse(object1.equals((Object)boolean1));
      assertEquals(false, object1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(21, coreFunction3.getFunctionCode());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ParentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], nameAttributeTest0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction0 = new CoreFunction(48, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(48, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(48, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(48, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("round");
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(48, nodeNameTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(48, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-437), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals((-437), step1.getAxis());
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(48, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals(48, step2.getAxis());
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(40, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(5, expressionArray0.length);
      assertEquals(40, step3.getAxis());
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(3286, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertEquals(5, expressionArray0.length);
      assertEquals(3286, step4.getAxis());
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual1, expressionArray0, stepArray0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(5, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(expressionPath0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals("round", qName0.getName());
      assertEquals("round", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(45, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      Step step0 = new Step(109, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(109, step0.getAxis());
      assertNotNull(step0);
      
      QName qName0 = new QName("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $");
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "A%@GOd");
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      Object object0 = coreFunction2.computeValue(childContext0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(45, coreFunction2.getFunctionCode());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.toString());
      assertEquals(" Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", qName0.getName());
      assertEquals("@(#) $RCSfile", qName0.getPrefix());
      assertEquals("A%@GOd", nodeNameTest0.getNamespaceURI());
      assertEquals("@(#) $RCSfile: Comment.java,v $ $Revision: 1.32 $ $Date: 2004/02/11 21:12:43 $ $Name: jdom_1_0 $", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Boolean
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.jdom.ContentList");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[5];
      NodeTest nodeTest0 = null;
      Step step0 = new Step(10, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(2264, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertEquals(2264, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(10, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(1, expressionArray0.length);
      assertEquals(10, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-446), (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(1, expressionArray0.length);
      assertEquals((-446), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(2264, (NodeTest) null, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertEquals(1, expressionArray0.length);
      assertEquals(2264, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 10, (NodeTest) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(0, evalContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals((-1), evalContext0.getDocumentOrder());
      assertNotNull(evalContext0);
      
      Object object0 = coreFunction0.functionString(evalContext0);
      assertEquals("false", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(0, evalContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals((-1), evalContext0.getDocumentOrder());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionNormalizeSpace(evalContext0);
      assertTrue(object1.equals((Object)object0));
      assertEquals("false", object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(0, evalContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals((-1), evalContext0.getDocumentOrder());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!=");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction((-446), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-446), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(1762, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(1762, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-446()(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = coreOperationDivide0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationAdd0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(2668, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2668, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2668, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction(45, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(45, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 5;
      Expression[] expressionArray0 = null;
      int int1 = 3000;
      Expression[] expressionArray1 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-2041), expressionArray1);
      assertEquals(3, expressionArray1.length);
      assertEquals((-2041), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(3, expressionArray1.length);
      assertEquals((-2041), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(expression0);
      
      expressionArray1[0] = null;
      Expression expression1 = coreFunction0.getArg2();
      assertEquals(3, expressionArray1.length);
      assertEquals((-2041), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(expression1);
      
      expressionArray1[1] = null;
      QName qName0 = new QName("substring-after");
      assertEquals("substring-after", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("substring-after", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray1[2] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction(3000, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(3000, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-2135), (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals((-2135), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[13];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 3, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, extensionFunction0);
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction1, extensionFunction1);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThan0.toString();
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(12, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-3688), nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(14, nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(32);
      Step step4 = new Step(14, nodeTypeTest1, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(12, nodeTypeTest1, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, (Expression[]) null, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      CoreFunction coreFunction0 = new CoreFunction(45, (Expression[]) null);
      coreFunction0.computeValue((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("F-");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      coreFunction0.functionFalse(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.args = expressionArray0;
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreFunction0);
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNotEqual0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreFunction0);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(3, coreFunction0.args);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      coreFunction2.isContextDependent();
      Step step0 = new Step(9, (NodeTest) null, coreFunction0.args);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction3 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(8, coreFunction0.args);
      // Undeclared exception!
      try { 
        coreFunction2.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      coreFunction0.getFunctionName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("x7x Ap8lfP`a0Xa?k");
      Step step0 = new Step(23, processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, (Step[]) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      expressionPath1.createContextForStep(parentContext0, (-1), processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction(17, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate((org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) mod (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, coreFunction0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationEqual0, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, nameAttributeTest1);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) nameAttributeTest1;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray1);
      coreFunction1.isContextDependent();
      Step step0 = new Step(9, (NodeTest) null, expressionArray0);
      EvalContext evalContext0 = null;
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      ParentContext parentContext0 = new ParentContext(rootContext0, (NodeTest) null);
      CoreFunction coreFunction3 = new CoreFunction((-3695), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      QName qName0 = new QName("", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1092), expressionArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.args = expressionArray0;
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreFunction0);
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNotEqual0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(3, coreFunction0.args);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      boolean boolean0 = coreFunction2.isContextDependent();
      assertFalse(boolean0);
      
      Step step0 = new Step(9, (NodeTest) null, coreFunction0.args);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction3 = new CoreFunction(21, expressionArray0);
      coreFunction3.computeValue((EvalContext) null);
      Object object0 = coreFunction3.compute((EvalContext) null);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationAdd0);
      coreOperationGreaterThan0.toString();
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[4] = (Expression) locationPath0;
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      expressionArray1[6] = (Expression) nameAttributeTest0;
      expressionArray1[7] = (Expression) coreOperationGreaterThan0;
      expressionArray1[8] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray1);
      QName qName0 = new QName("QMwDR#W;|kL{.(rr");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      Step[] stepArray0 = new Step[3];
      NodeTest nodeTest0 = null;
      Step step0 = new Step((-1154), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step1 = new Step(41, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(13, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      locationPath1.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\" could not be added to the element \"");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 - org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      QName qName0 = new QName("id");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("WV<EaBbzlb.BZqwbi");
      Step step0 = new Step(1024, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(297, processingInstructionTest0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, coreOperationAdd1);
      Step step2 = new Step(1024, processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-533), expressionArray0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.computeValue(parentContext0);
      coreFunction0.computeValue(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-533()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction((-3695), (Expression[]) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">SN)t'G>4qQ$Bo");
      Step step0 = new Step((-3695), processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step((-1375), processingInstructionTest0, (Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      Step step2 = new Step(1024, processingInstructionTest0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      coreFunction1.computeValue(parentContext0);
      coreFunction1.computeValue(parentContext0);
      coreFunction1.functionNumber(parentContext0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("jxpath.debug");
      processingInstructionTest1.toString();
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3695()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      nameAttributeTest0.equal(coreOperationAdd0, (Object) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("starts-with");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction((-756), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-756), expressionArray0);
      Step step0 = new Step((-756), processingInstructionTest0, expressionArray0);
      ParentContext parentContext1 = new ParentContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNull(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(+org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.args = expressionArray0;
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNotEqual0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(3, coreFunction0.args);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      Step step0 = new Step(9, (NodeTest) null, coreFunction0.args);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction3 = new CoreFunction(21, expressionArray0);
      Object object0 = coreFunction3.computeValue((EvalContext) null);
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      Step[] stepArray0 = new Step[13];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("_I4(");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(4, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationLessThanOrEqual0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(13, (Expression[]) null);
      assertEquals(13, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      Long long0 = new Long(25);
      Constant constant0 = new Constant(long0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationDivide0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationLessThanOrEqual0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1403, (Expression[]) null);
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreFunction0);
      coreOperationDivide0.isContextDependent();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationLessThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction1.toString();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction1, coreFunction0);
      coreFunction0.computeContextDependent();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction1, coreFunction1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreOperationLessThan0);
      coreFunction0.iteratePointers((EvalContext) null);
      coreFunction1.iterate((EvalContext) null);
      Variables variables0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationLessThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(nameAttributeTest0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(9, (Expression[]) null);
      Step step0 = new Step(9, (NodeTest) null, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual1, (Expression[]) null, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      expressionPath0.createContextForStep((EvalContext) null, 9, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(8, coreFunction0.args);
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray0);
      Step step0 = new Step(36, (NodeTest) null, coreFunction0.args);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      CoreFunction coreFunction3 = new CoreFunction(8, expressionArray0);
      String string0 = coreFunction2.toString();
      assertEquals("string()", string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThan0.toString();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationSubtract0, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, nameAttributeTest1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1168), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step0;
      Step step2 = new Step(30, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-3457), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 - org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThan0.toString();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationSubtract0, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, nameAttributeTest1);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 - org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[13];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 3, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count((org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) mod (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      Step[] stepArray0 = new Step[13];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("starts-with");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray1, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(1966, expressionArray1);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1966()(null, null, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(52, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      coreFunction0.getArg3();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">NV3dHfvE[Oe");
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName((String) null, ">NV3dHfvE[Oe");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((byte) (-6), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">NV3dHfvE[Oe");
      Step step1 = new Step((-4690), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step0;
      Step step2 = new Step((byte) (-24), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((byte) (-24), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1826, expressionArray0);
      Step[] stepArray1 = new Step[2];
      stepArray1[0] = step2;
      stepArray1[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray1);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      expressionPath0.createContextForStep(parentContext0, (-124), processingInstructionTest0);
      coreFunction0.computeValue(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThan0.toString();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationSubtract0, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, nameAttributeTest1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1168), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(30, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-3457), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 - org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2_Z9U5");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, expression0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationNotEqual0);
      coreOperationGreaterThan0.toString();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationNotEqual0, coreOperationAdd0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expression0, expressionArray0[0]);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(134, expressionArray1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(134, expressionArray1);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "2_Z9U5");
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, true);
      // Undeclared exception!
      try { 
        coreFunction2.functionString(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ChildContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.args = expressionArray0;
      CoreFunction coreFunction1 = new CoreFunction(8, coreFunction0.args);
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray0);
      Step step0 = new Step(36, (NodeTest) null, coreFunction0.args);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[1] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      ExpressionPath expressionPath1 = new ExpressionPath(coreFunction2, expressionArray0, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      expressionPath1.createContextForStep((EvalContext) null, 1556, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      Long long0 = new Long(3);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      Constant constant1 = new Constant(long0);
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationAdd0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreFunction0, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(1562, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(1562, expressionArray0);
      Step step0 = new Step(493, (NodeTest) null, expressionArray0);
      Step[] stepArray0 = new Step[7];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreFunction2);
      coreFunction2.computeValue(predicateContext0);
      // Undeclared exception!
      try { 
        coreFunction2.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      CoreFunction coreFunction0 = new CoreFunction(494, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationMod0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(23, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(23, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction0()()", string0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationLessThanOrEqual0);
      coreOperationGreaterThan0.toString();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(nameAttributeTest0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationDivide0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(890, expressionArray0);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction3 = new CoreFunction(0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction2, expressionArray0, (Step[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">M");
      expressionPath0.createContextForStep((EvalContext) null, (-1009), processingInstructionTest0);
      coreFunction2.computeValue((EvalContext) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("unknownFunction0()()");
      DecimalFormat decimalFormat0 = new DecimalFormat("unknownFunction0()()");
      Locale locale0 = Locale.CHINESE;
      variablePointerFactory0.createNodePointer(qName0, (Object) decimalFormat0, locale0);
      variablePointerFactory0.createNodePointer((NodePointer) null, qName0, (Object) nameAttributeTest1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      coreFunction2.functionNumber(rootContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[13];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 3, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Long long0 = new Long(0);
      Constant constant0 = new Constant(long0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(1562, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, expressionArray0[0]);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "true");
      CoreFunction coreFunction0 = new CoreFunction(1966, expressionArray0);
      coreFunction0.toString();
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1966()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 - org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationMod0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step[] stepArray0 = new Step[2];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction((-1009), expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      coreFunction0.getArg3();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      coreFunction1.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      Locale locale0 = Locale.CHINA;
      CoreFunction coreFunction2 = new CoreFunction(6, (Expression[]) null);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionID(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      coreFunction0.args = expressionArray0;
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-22()", string0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, (NodeTest) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.getArgumentCount();
      assertEquals((-22), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      coreFunction0.toString();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationGreaterThan0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationGreaterThan0);
      coreOperationGreaterThan0.toString();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(16000, (Expression[]) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual1, (Expression[]) null, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001");
      expressionPath0.createContextForStep((EvalContext) null, 16000, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2_Z9U5");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      int int0 = 6;
      Step step2 = new Step(6, processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      CoreFunction coreFunction1 = new CoreFunction(1975, expressionArray0);
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[6];
      stepArray0[0] = step0;
      stepArray0[1] = step2;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray1, stepArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(ancestorContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      QName qName0 = new QName("", "x^#>Qv#f *-U=^^l<?");
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      CoreFunction coreFunction2 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.functionLocalName(rootContext1);
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2_Z9U5");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationAdd0);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray0[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      stepArray0[2] = step0;
      Step step2 = new Step((-1665), processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray1);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray1, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(parentContext0, 36, processingInstructionTest0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2_Z9U5");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      Step step2 = new Step(6, processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      CoreFunction coreFunction1 = new CoreFunction(1975, expressionArray0);
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[6];
      stepArray0[0] = step0;
      stepArray0[1] = step2;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step2;
      stepArray0[5] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(parentContext0, 32, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNotEqual0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(3912, expressionArray0);
      coreFunction0.toString();
      assertEquals(3912, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      coreFunction0.toString();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationGreaterThan0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationGreaterThan0);
      coreOperationGreaterThan0.toString();
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(16000, (Expression[]) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001");
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2_Z9U5");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationAdd0);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray0[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      stepArray0[2] = step0;
      Step step2 = new Step((-1665), processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray1);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray1, stepArray0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(parentContext0, 36, processingInstructionTest0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      QName qName0 = new QName("ra~d5JZdFdLm-ko");
      VariableReference variableReference0 = new VariableReference(qName0);
      variableReference0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, variableReference0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep((EvalContext) null, 95, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      QName qName0 = new QName("", "x^#>Qv#f *-U=^^l<?");
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      rootContext0.getRootContext();
      QName qName1 = new QName("<<unknown namespace>>");
      CoreFunction coreFunction2 = new CoreFunction(2678, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      
      coreFunction0.functionName(rootContext0);
      Variables variables0 = jXPathContext0.getVariables();
      VariablePointer variablePointer0 = new VariablePointer(variables0, qName0);
      assertEquals(5, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte) (-6), (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("unknownFunction-6()()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6042, expressionArray0);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[0], expressionArray1[2]);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      Step step0 = new Step(12, processingInstructionTest0, expressionArray1);
      Step[] stepArray0 = new Step[10];
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, expressionArray1[2]);
      CoreFunction coreFunction1 = new CoreFunction((-1634), expressionArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction((-112), expressionArray0);
      coreFunction1.functionStringLength(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction6042()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      Long long0 = new Long(5);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, coreOperationLessThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(5, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(6042, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, coreOperationLessThanOrEqual0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationSubtract0, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, nameAttributeTest1);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = 21;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 - org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      locationPath0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      Variables variables0 = null;
      QName qName0 = new QName("lSg-Re%;K");
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getValue();
      unionContext0.nextSet();
      QName qName0 = new QName("P<}jQ", "P<}jQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext1 = new UnionContext(selfContext0, evalContextArray0);
      unionContext1.getContextNodePointer();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      PredicateContext predicateContext1 = new PredicateContext(predicateContext0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction((-2894), expressionArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "P<}jQ");
      ChildContext childContext0 = new ChildContext(selfContext0, nodeNameTest1, false, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      int int0 = 624;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "ra~d5JZdFdLm-ko");
      JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      QName qName0 = new QName("ra~d5JZdFdLm-ko");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(100);
      Step step4 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 100, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getValue();
      unionContext0.nextSet();
      QName qName0 = new QName("P<}jQ", "P<}jQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext1 = new UnionContext(selfContext0, evalContextArray0);
      unionContext1.getContextNodePointer();
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeNameTest0, true, true);
      QName qName1 = new QName("P<}jQ");
      Locale locale0 = new Locale("J w1|2B", "E{VW_KZ");
      UnionContext unionContext2 = new UnionContext(unionContext0, evalContextArray0);
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      NodePointer.newNodePointer(qName1, unionContext2, locale1);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6042, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-530), expressionArray0);
      coreFunction1.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction1);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction6042()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      processingInstructionTest0.toString();
      Step step0 = new Step(624, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, coreOperationLessThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expression0, coreOperationGreaterThan0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationSubtract0, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(extensionFunction0, nameAttributeTest1);
      CoreFunction coreFunction1 = new CoreFunction(789, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(21, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNot(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 - org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getValue();
      unionContext0.nextSet();
      QName qName0 = new QName("P<}jQ", "P<}jQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      UnionContext unionContext1 = new UnionContext(selfContext0, evalContextArray0);
      unionContext1.getContextNodePointer();
      CoreFunction coreFunction0 = new CoreFunction((-2894), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = 6042;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6042, expressionArray0);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[0], expressionArray1[2]);
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      Step step0 = new Step(12, processingInstructionTest0, expressionArray1);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, expressionArray1[2]);
      CoreFunction coreFunction1 = new CoreFunction((-1634), expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction(33, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      coreFunction0.toString();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationDivide0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationLessThanOrEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThanOrEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationGreaterThan0);
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step step0 = new Step(624, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      Constant constant0 = new Constant("}1as}#3Mm^z!pR,0s#");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, locationPath1);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      Step step1 = new Step(551, processingInstructionTest0, expressionArray0);
      LocationPath locationPath2 = new LocationPath(true, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, locationPath1);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest1);
      EvalContext evalContext0 = expressionPath0.createContextForStep(parentContext0, 13, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("", "");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, jXPathContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      coreFunction0.compute(evalContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationDivide0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationLessThanOrEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThanOrEqual0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationGreaterThan0, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(nameAttributeTest1, constant0);
      CoreFunction coreFunction1 = new CoreFunction(789, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(extensionFunction0, expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionName();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6042, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext[] evalContextArray0 = new EvalContext[0];
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction6042()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-864), (Expression[]) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-864()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = (-1590);
      CoreFunction coreFunction0 = new CoreFunction((-1590), (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getValue();
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(evalContextArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1590()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      Long long0 = new Long(5);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, coreOperationLessThanOrEqual0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, coreOperationLessThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(5, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(5, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      expressionPath0.createContextForStep(parentContext0, (-283), (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step step0 = new Step(624, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(624, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(624, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      int int0 = 624;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step step0 = new Step(624, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionStringLength(parentContext0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("!fp0xn");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(extensionFunction0, expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.args = expressionArray0;
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(350, (Expression[]) null);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.args = expressionArray0;
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction0()", string0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, (NodeTest) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.getArgumentCount();
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      QName qName0 = new QName("", "x^#>Qv#f *-U=^^l<?");
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, processingInstructionTest0, true);
      CoreFunction coreFunction2 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionFloor(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step step0 = new Step(624, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(parentContext0, 624, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      QName qName0 = new QName("", "x^#>Qv#f *-U=^^l<?");
      Locale locale0 = Locale.forLanguageTag("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, processingInstructionTest0, true);
      Object object0 = new Object();
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("local-name", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step step0 = new Step(624, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(parentContext0, 624, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Long long0 = new Long(593L);
      Constant constant0 = new Constant(long0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[2]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationLessThanOrEqual0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(constant0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[4], expressionArray0[3]);
      expressionArray0[5] = (Expression) nameAttributeTest1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-462), expressionArray0);
      coreFunction0.getArg1();
      assertEquals((-462), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step step0 = new Step(624, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      processingInstructionTest0.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, locationPath0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, locationPath0);
      Long long0 = new Long(290L);
      Constant constant0 = new Constant(long0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationGreaterThan0);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, locationPath0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationNegate0, locationPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(locationPath0, coreOperationNegate0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(3305, (Expression[]) null);
      coreFunction0.getFunctionName();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, (NodeTest) null);
      CoreFunction coreFunction2 = new CoreFunction(3305, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstringAfter(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3305()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName((String) null, "A*");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(17, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(41, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      QName qName0 = new QName("", "x^#>Qv#f *-U=^^l<?");
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, processingInstructionTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1060));
      Step step0 = new Step(396, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1295), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(396, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1060), nodeTypeTest0, expressionArray0);
      Step step4 = new Step((-1060), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1295), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-1295), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(343, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("$bJc/Op8Y[K");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction((-2821), expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      coreFunction0.functionFloor(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ra~d5JZdFdLm-ko");
      Step step0 = new Step(624, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      Constant constant0 = new Constant("}1as}#3Mm^z!pR,0s#");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, locationPath1);
      locationPath0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)73;
      byteArray0[8] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2_Z9U5");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationAdd0);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationMod0;
      expressionArray1[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      Step step2 = new Step((-2770), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1665), processingInstructionTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray1);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray1, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(parentContext0, 36, processingInstructionTest0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      assertEquals(32, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6042, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getValue();
      unionContext0.nextSet();
      unionContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Long long0 = new Long(593L);
      Constant constant0 = new Constant(long0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[2]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationLessThanOrEqual0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(constant0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[4], expressionArray0[3]);
      expressionArray0[5] = (Expression) nameAttributeTest1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-467), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-467()(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 mod org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003 > org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003, 593, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000006, org.apache.commons.jxpath.ri.compiler.Constant@0000000005 > (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007), org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008 = org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2254, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2202), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Double double0 = new Double((-2522));
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("]ByK1j-[Gp-");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      constant0.toString();
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], expressionArray0[1]);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-2522), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("k\"4[-5", "I}b?j)#%b2");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      coreOperationUnion0.computeContextDependent();
      expressionArray0[1] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("I}b?j)#%b2");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = (EvalContext) selfContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) namespaceContext0;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("format-number", "2O");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1060));
      Step step0 = new Step(396, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1295), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(396, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1060), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1060), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1295), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-1295), nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(343, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("$bJc/Op8Y[K");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction((-2821), expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      coreFunction0.functionFloor(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract0, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      String string0 = "yjzoQ\\|5\\";
      // Undeclared exception!
      try { 
        coreOperationSubtract0.isContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(3286, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      int int0 = 0;
      Step step1 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      int int1 = 0;
      Step step2 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      step0.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        expressionPath0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      int int0 = (-1590);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1590), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1590), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "org.apache.commons.jxpath.ri.axes.SelfContext";
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.SelfContext");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(1015, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2_Z9U5");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, coreOperationAdd0);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationMod0;
      expressionArray1[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      Step step2 = new Step((-2770), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1665), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      Constant constant0 = new Constant("}1as}#3Mm^z!pR,0s#");
      expressionArray0[5] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[3], expressionArray1[4]);
      expressionArray0[6] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("boolean", "boolean");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-720), expressionArray0);
      coreFunction0.getArg2();
      assertEquals((-720), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int int0 = 3445;
      CoreFunction coreFunction0 = new CoreFunction(3445, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = null;
      // Undeclared exception!
      try { 
        nodeSetContext0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2287);
      Step step0 = new Step(3357, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2287, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1929, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, expressionPath0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationAdd0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction0 = new CoreFunction(2287, expressionArray0);
      coreFunction0.getFunctionCode();
      QName qName0 = new QName("");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, (Locale) null);
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-104), (Expression[]) null);
      coreFunction0.getFunctionCode();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("not");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = null;
      try {
        jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, rootContext0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: not
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionName();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(350, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction350()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2030));
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, nodeTypeTest0, false);
      coreFunction0.functionNull(precedingOrFollowingContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      QName qName0 = new QName("", "x^#>Qv#f *-U=^^l<?");
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      QName qName0 = new QName("false");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "false");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest0, true, true);
      coreFunction0.functionTrue(childContext0);
      assertEquals(32, coreFunction0.getFunctionCode());
  }
}
