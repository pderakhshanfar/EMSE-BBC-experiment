/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:35:52 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "La6P-( ");
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.getValue();
      QName qName0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "La6P-( ");
      unionContext0.getCurrentNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("O&x=6cr", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("O&x=6cr");
      expressionArray0[3] = (Expression) constant0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Long long0 = new Long((-1));
      Constant constant0 = new Constant(long0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(248, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationSubtract0);
      Expression[] expressionArray0 = new Expression[2];
      coreOperationGreaterThanOrEqual0.isContextDependent();
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2673), expressionArray1);
      coreOperationSubtract0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2673), expressionArray1);
      coreFunction0.functionTranslate((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = new Long(11);
      Constant constant0 = new Constant(long0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2280), expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[1] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(238, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationSubtract0.args = expressionArray0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2673), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Long long0 = new Long(11);
      Constant constant0 = new Constant(long0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(238, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationGreaterThanOrEqual0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2673), expressionArray1);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float((double) 44);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(225, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(44, expressionArray1);
      coreFunction1.functionSum((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long(29);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 23;
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("44", "L$csmT!T");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      Expression[] expressionArray1 = new Expression[19];
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(namespaceContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Float float0 = new Float((-2995.0));
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("4");
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, attributeContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      rootContext1.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      coreFunction0.computeValue(rootContext1);
      coreFunction0.functionContains(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float float0 = new Float((-2995.0));
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("4");
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, attributeContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      rootContext1.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      coreFunction0.computeValue(rootContext1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long(11);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      coreOperationSubtract0.args = expressionArray0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationOr0);
      coreOperationLessThanOrEqual0.toString();
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionArray0[1]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, coreOperationOr0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("z|\"o]t ,");
      VariableReference variableReference0 = new VariableReference(qName0);
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionPath0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[0], variableReference0);
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      ExpressionPath expressionPath1 = new ExpressionPath(variableReference0, expressionArray1, (Step[]) null);
      expressionArray0[4] = (Expression) expressionPath1;
      Float float0 = new Float(0.0F);
      Constant constant0 = new Constant(float0);
      expressionArray0[5] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationMod0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(32767, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte)75);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[[sYm.!Pj8MbbDv");
      Constant constant0 = new Constant(byte0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer");
      VariableReference variableReference0 = new VariableReference(qName0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-365), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variableReference0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "[[sYm.!Pj8MbbDv");
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeTypeTest0);
      EvalContext evalContext0 = rootContext1.getConstantContext(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointer
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(276);
      Step step0 = new Step(276, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      QName qName0 = new QName("66", "66");
      nodeTypeTest0.toString();
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UNKNOWN()");
      CoreFunction coreFunction0 = new CoreFunction(276, expressionArray0);
      coreFunction0.getArg2();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) locationPath0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, rootContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "66", nodePointer0);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, nodePointer0);
      RootContext rootContext2 = rootContext1.getRootContext();
      EvalContext evalContext0 = rootContext2.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("zMW;");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Step[] stepArray0 = new Step[9];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "zMW;");
      Step step0 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1234), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3658, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1234), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-191), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1610612736, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(2180, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step((-191), nodeNameTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 5600, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("fF;Q1y:~=@T#s8<f");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, processingInstructionTest0, true);
      constant0.iterate(precedingOrFollowingContext0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Long long0 = new Long(11);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Float float0 = new Float(12.0);
      Long long0 = new Long(11);
      Constant constant0 = new Constant(long0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.toString();
      coreOperationSubtract0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction(148, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("parent");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(310, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "parent");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      coreFunction0.functionStringLength(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float float0 = new Float(12.0);
      Long long0 = new Long(11);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(148, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long(11);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(148, expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float float0 = new Float(12.0);
      Long long0 = new Long(32);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(148, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction148()(32, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Float float0 = new Float(12.0);
      Long long0 = new Long(32);
      Constant constant0 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(148, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(148, expressionArray0);
      coreFunction1.functionStartsWith((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction148()(32, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 - org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("44", "L$csmT!T");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray1);
      // Undeclared exception!
      coreFunction1.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(6492, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(65528, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      Locale locale0 = Locale.FRANCE;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("fD4h^j");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Byte byte0 = new Byte((byte)3);
      Constant constant0 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant0;
      Constant constant1 = new Constant("fD4h^j");
      expressionArray0[3] = (Expression) constant1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(128, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[1] = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("4747", "4747");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expression0, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreFunction coreFunction1 = new CoreFunction(512, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1021);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      CoreFunction coreFunction0 = new CoreFunction(1744, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("Y{y{Q");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Y{y{Q");
      Step step0 = new Step(28, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-4966), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) variableReference0;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-615), processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(24, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(1, processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(1005, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-1130), (NodeTest) null, expressionArray1);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[2], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2020, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Integer integer0 = new Integer(23);
      Constant constant0 = new Constant(integer0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationMultiply0, constant0);
      expressionArray0[1] = (Expression) coreOperationNotEqual1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      Step step0 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2793, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-371), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("sTjP3)&");
      Step step5 = new Step(23, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(16, nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step((-14), nodeTypeTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[3], coreOperationNotEqual1);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[1]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual2 = new CoreOperationNotEqual(expressionArray0[3], expressionArray0[4]);
      expressionArray0[6] = (Expression) coreOperationNotEqual2;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      PredicateContext predicateContext0 = new PredicateContext(unionContext0, expressionArray0[6]);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, processingInstructionTest0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-763));
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeTypeTest1, true);
      // Undeclared exception!
      coreFunction0.functionFloor(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(40, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(40, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[1], coreOperationAdd0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationDivide0);
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(112, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(112, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(8, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant0 = new Constant("\"mc2bnD!C*");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationDivide0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float((double) 4);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(521, expressionArray0);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float float0 = new Float((double) 4);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(521, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-1168), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      QName qName0 = new QName("3232");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string-length");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Double double0 = new Double(2012);
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, coreOperationDivide0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationDivide0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr1;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("(vdjkIX9)N(/Z");
      Step step0 = new Step(2012, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2012, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2012, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      QName qName0 = new QName("(vdjkIX9)N(/Z", "Cannot set value for xpath: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step3 = new Step((-766), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2012, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2012, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      expressionArray0[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], (Expression) null);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd2;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd2, expressionArray0[1]);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], coreOperationSubtract0);
      expressionArray0[7] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Integer integer0 = new Integer(2925);
      Constant constant0 = new Constant(integer0);
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(564, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(8, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2925, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2925, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      Locale locale0 = Locale.FRANCE;
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getJXPathContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, ancestorContext0, (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("-? o_-q4@.BNJ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) extensionFunction0;
      Step step0 = new Step((-2775), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], locationPath0);
      coreOperationLessThanOrEqual0.computeContextDependent();
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2775), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      coreFunction0.functionFalse(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step(24, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3139, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-752), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(5, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2596, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(3139, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLast(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(32, 32)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(1.0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant constant0 = new Constant("");
      CoreFunction coreFunction0 = new CoreFunction((-221), expressionArray0);
      Integer integer0 = new Integer((-1006));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-804));
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, nodeTypeTest0, true);
      EvalContext evalContext0 = rootContext0.getConstantContext(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ", "Cannot allocate dynamic property handler of class ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(197, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("y>.");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1021);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      coreFunction0.functionTrue(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 6;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      Locale locale0 = Locale.GERMAN;
      NodePointer nodePointer0 = null;
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getJXPathContext();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JXPathContext.newContext((JXPathContext) null, (Object) decimalFormat0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction((-4086), expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("fI588", "fI588");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[1] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray1[2] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[2], coreOperationUnion0);
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      Expression[] expressionArray2 = new Expression[8];
      expressionArray2[0] = (Expression) extensionFunction0;
      expressionArray2[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], coreOperationLessThan0);
      expressionArray2[2] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray2[0], coreFunction0);
      expressionArray2[3] = (Expression) coreOperationLessThan1;
      expressionArray2[4] = (Expression) coreOperationUnion0;
      expressionArray2[5] = (Expression) coreFunction0;
      expressionArray2[6] = (Expression) coreOperationGreaterThan0;
      expressionArray2[7] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray2);
      expressionArray1[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction((-4086), expressionArray1);
      // Undeclared exception!
      coreFunction1.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction((-1148), (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      QName qName0 = new QName("!C^SHxecAkN;", "!C^SHxecAkN;");
      Locale locale0 = Locale.CANADA_FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, nodeTypeTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: !C^SHxecAkN;:!C^SHxecAkN;
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("#m!CQ5A3Yn[d3^fyV");
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("#6]E8On!6:");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("<^7cZ*ew~ee}A:", "<^7cZ*ew~ee}A:");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("\"m*^=E=U^", "\"m*^=E=U^");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-937), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      CoreOperationMultiply coreOperationMultiply2 = new CoreOperationMultiply(coreOperationGreaterThan0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMultiply2;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationMultiply1);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionArray0[2]);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step(606, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3785, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3785, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(28, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(412, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(569, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(606, (NodeTest) null, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[7] = (Expression) extensionFunction1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[6], coreOperationMultiply0);
      expressionArray0[8] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("Cannot set undefined variable: ");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("Cannot set undefined variable: ", "org.apache.commons.jxpath.ri.compiler.CoreOperationCompare");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(Integer.MIN_VALUE, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      Locale locale0 = Locale.CHINA;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, nodeTypeTest0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertEquals(2, evalContext0.getPosition());
      assertEquals(1.0, object0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      AttributeContext attributeContext1 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      attributeContext1.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodeTypeTest0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionLast(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 43);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      coreOperationMultiply0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(43, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(1.0);
      Constant constant0 = new Constant(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(568, expressionArray1);
      constant0.iterate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(1, 1, andorg.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      coreFunction0.computeContextDependent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      Locale locale0 = Locale.GERMAN;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "round", (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getJXPathContext();
      JXPathContext.compile("round");
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, rootContext0, (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("local-name", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(1.0);
      Constant constant0 = new Constant(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      EvalContext evalContext0 = null;
      constant0.iterate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(1, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant("sum");
      expressionArray0[6] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, expressionArray0[4]);
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 43);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-386), expressionArray0);
      expressionArray1[5] = (Expression) coreFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[4], expressionArray1[0]);
      expressionArray1[6] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[7] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      EvalContext evalContext0 = null;
      Expression[] expressionArray2 = new Expression[5];
      Expression expression0 = coreFunction1.getArg1();
      expressionArray2[0] = expression0;
      expressionArray2[1] = (Expression) coreOperationAnd0;
      expressionArray2[2] = (Expression) coreFunction1;
      expressionArray2[3] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray2[4] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[7];
      QName qName0 = new QName("YLi>A<r", "YLi>A<r");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationOr0;
      extensionFunction0.isContextDependent();
      Constant constant0 = new Constant("substring");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-4285), expressionArray0);
      coreFunction0.getArgumentCount();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Locale locale0 = Locale.CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray1[1], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray1[0], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      variablePointerFactory0.createNodePointer(nodePointer0, qName0, (Object) coreOperationAnd0);
      jXPathContextReferenceImpl0.setNamespaceContextPointer((Pointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      jXPathContext0.iteratePointers("YLi>A<r");
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(rootContext1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float((double) 6);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(539, expressionArray0);
      coreFunction1.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",p-e_");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant(",p-e_");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], constant0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      Double double0 = Expression.ZERO;
      Constant constant1 = new Constant(double0);
      expressionArray0[4] = (Expression) constant1;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1755), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 5588;
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = new Double(5588);
      Constant constant0 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant("");
      expressionArray0[1] = (Expression) constant1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(5588, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[4];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationSubtract0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, (Expression) null);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      Byte byte0 = new Byte((byte)95);
      Constant constant0 = new Constant(byte0);
      expressionArray1[1] = (Expression) constant0;
      QName qName0 = new QName((String) null, "k#dj\u0005xQ");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2417), expressionArray1);
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3691), expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(201, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction((-2417), expressionArray0);
      coreFunction2.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?qZ[#");
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 43);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(43, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionCount((EvalContext) null);
      constant0.iterate((EvalContext) null);
      constant0.iterate((EvalContext) null);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(1.0);
      Constant constant0 = new Constant(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      EvalContext evalContext0 = null;
      Expression[] expressionArray2 = new Expression[8];
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray2[2] = (Expression) coreOperationAdd0;
      expressionArray2[3] = (Expression) coreFunction0;
      expressionArray2[4] = (Expression) coreOperationAnd0;
      expressionArray2[5] = (Expression) coreFunction0;
      expressionArray2[6] = (Expression) constant0;
      expressionArray2[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(131, expressionArray2);
      coreFunction1.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      coreFunction0.computeContextDependent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      Locale locale0 = Locale.GERMAN;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null, (Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, fileSystemHandling0, (Pointer) null);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(1.0);
      Constant constant0 = new Constant(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant constant1 = new Constant("");
      CoreFunction coreFunction0 = new CoreFunction(65528, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant1;
      expressionArray1[1] = (Expression) constant1;
      CoreFunction coreFunction1 = new CoreFunction(6492, expressionArray1);
      CoreFunction coreFunction2 = new CoreFunction(65528, expressionArray1);
      coreFunction1.functionSubstring((EvalContext) null);
      assertEquals(6492, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-480);
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("4 w^*pL0</u{RTE1(", "4 w^*pL0</u{RTE1(");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      coreOperationEqual0.isContextDependent();
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      Expression expression0 = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-480), expressionArray0);
      extensionFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      Integer integer0 = new Integer(769);
      Constant constant1 = new Constant(integer0);
      expressionArray0[1] = (Expression) constant1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant1);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationOr0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, coreOperationMod0);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], coreOperationMod0);
      expressionArray0[8] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(382, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      // Undeclared exception!
      coreFunction0.functionNot(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(5199.611308);
      Constant constant0 = new Constant(float0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[3];
      Constant constant1 = new Constant("}");
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-16), expressionArray0);
      coreFunction2.functionSubstring((EvalContext) null);
      assertEquals((-16), coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[1], coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2049));
      Step step0 = new Step(16809983, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(16809983, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2049), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      Step step6 = new Step(36, nodeTypeTest0, expressionArray1);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply2 = new CoreOperationMultiply(expressionArray1[0], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationMultiply2;
      CoreFunction coreFunction0 = new CoreFunction((-2049), expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray1, stepArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, decimalFormat0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(10);
      expressionPath0.createContextForStep(evalContext0, (-295), nodeTypeTest1);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(12, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationNegate0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, coreOperationUnion0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<(3Fg$Y5`OhplPZ:");
      Step step0 = new Step(2596, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2596, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2596, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2596, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2596, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2596, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      Step step6 = new Step(2596, processingInstructionTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(2596, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(2596, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((double) 23);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant constant1 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-2456), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-827), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(43, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2117);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expression0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(2117, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Float float0 = new Float((double) 2058);
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("s.<S*ranK{a");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(3292, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3292, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-241), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2730), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(3292, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1579, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-254), nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step7 = new Step((-254), processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2058, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      coreFunction1.isContextDependent();
      QName qName0 = new QName("pXPe&2J7lmvu-");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float((double) 4);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(539, expressionArray0);
      coreFunction1.functionConcat((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      coreFunction1.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      NodePointer nodePointer0 = null;
      QName qName0 = new QName("'R]5k~!&.F>W", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      QName qName1 = new QName("(aP[U/]N7i");
      // Undeclared exception!
      try { 
        variablePointer0.createChild(jXPathContext0, qName1, 30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Factory is not set on the JXPathContext - cannot create path: $'R]5k~!&.F>W:
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(805, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      coreFunction1.isContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationGreaterThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("<^aKTi<Jlc,p");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      int int0 = (-671);
      Step step1 = new Step((-671), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, coreFunction0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.getCurrentPosition();
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, coreOperationNotEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("Dzf%c\"#JDVq{lNkq", "m#8JQn\"");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationNotEqual0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-510), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-510), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray0);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-510()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      coreFunction1.getFunctionName();
      String string0 = coreFunction1.getFunctionName();
      assertEquals("ceiling", string0);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?qZ[#");
      processingInstructionTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(5199.611308);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("substring-after", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("floor", string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-662));
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = new QName("floor");
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl1).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl1).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, nodeTypeTest0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl2.getAbsoluteRootContext();
      Object object0 = coreFunction1.computeValue(evalContext0);
      assertNotNull(object0);
      
      coreFunction1.functionString(evalContext0);
      coreFunction1.functionString(evalContext0);
      assertEquals(6, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object0);
      
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionName((EvalContext) null);
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("1024", object1);
      
      coreFunction0.functionName((EvalContext) null);
      assertEquals(32, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext1 = rootContext0.getJXPathContext();
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext1, predicateContext0, (Pointer) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(predicateContext0, nodeTypeTest0, true);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl((JXPathContext) null, precedingOrFollowingContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl2.getAbsoluteRootContext();
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      coreFunction1.computeValue(rootContext0);
      coreFunction1.functionString(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(evalContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3117), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      QName qName0 = new QName("%2J7C8LCkIpw`Y|C6");
      Locale locale0 = Locale.JAPAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      coreFunction0.computeContextDependent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction((-27), (Expression[]) null);
      Locale locale0 = Locale.KOREAN;
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      NamespaceResolver namespaceResolver1 = new NamespaceResolver(namespaceResolver0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getJXPathContext();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((double) 23);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1898, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, coreOperationGreaterThan0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1898, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.computeContextDependent();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("namespace-uri", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("_xmP%rwHq<%Bq");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("_xmP%rwHq<%Bq", "_xmP%rwHq<%Bq");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-765), expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-765), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(5199.611308);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[3];
      Constant constant1 = new Constant("");
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      coreFunction2.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("contains", string0);
      
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3315), expressionArray0);
      coreFunction0.computeContextDependent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction(1152, expressionArray0);
      QName qName0 = new QName("9|;`lz", "9|;`lz");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variablePointer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext1.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "9|;`lz", (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 9|;`lz:9|;`lz
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H'O>b=@");
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(2, expressionArray0);
      Object object0 = coreFunction2.functionCeiling((EvalContext) null);
      assertEquals(0.0, object0);
      assertEquals(2, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1631);
      coreFunction0.computeContextDependent();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null, (Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      JXPathContext jXPathContext0 = rootContext1.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, rootContext1, (Pointer) null);
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      rootContext2.getJXPathContext();
      PredicateContext predicateContext0 = new PredicateContext(rootContext1, coreFunction1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, predicateContext0, (Pointer) null);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      coreFunction1.computeValue(rootContext0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(16383, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionString(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction16383()(false(), false())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("false()", string0);
      
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("false()");
      Step step0 = new Step(183, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(21, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(871, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(2649, processingInstructionTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step((-2971), processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(21, processingInstructionTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(183, processingInstructionTest0, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step((-2971), processingInstructionTest0, (Expression[]) null);
      stepArray0[7] = step7;
      Step step8 = new Step(11, processingInstructionTest0, (Expression[]) null);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, processingInstructionTest0, true);
      coreFunction0.functionTrue(precedingOrFollowingContext0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.getArgumentCount();
      assertEquals(21, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(3990.859450934065);
      Constant constant0 = new Constant((Number) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 21;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?qZ[#");
      processingInstructionTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.functionLast(attributeContext0);
      assertEquals(1, attributeContext0.getPosition());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(18, (Expression[]) null);
      coreFunction2.computeContextDependent();
      CoreFunction coreFunction3 = new CoreFunction(74, (Expression[]) null);
      coreFunction3.computeValue((EvalContext) null);
      CoreFunction coreFunction4 = new CoreFunction(18, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, expressionPath0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[3], extensionFunction0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationNotEqual0);
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[8] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 43);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      coreOperationMultiply0.computeContextDependent();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(43, expressionArray0);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      Object object0 = coreFunction1.functionBoolean((EvalContext) null);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertFalse(object0.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(50);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction(23, expressionArray0);
      Object object1 = coreFunction2.functionBoolean((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction2.functionRound((EvalContext) null);
      assertEquals(23, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) coreOperationMultiply0;
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray1);
      EvalContext evalContext0 = null;
      int int0 = (-594);
      CoreFunction coreFunction1 = new CoreFunction((-594), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(0, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 0, 0, 0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(3990.859450934065);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(33, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction33()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("string-length", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2742, expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(2742, expressionArray0);
      EvalContext evalContext1 = null;
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-1357), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1357()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("*Hgm)");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) constant0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, decimalFormat0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, nodeNameTest0);
      coreOperationOr0.iterate(ancestorContext0);
      coreOperationOr0.args = expressionArray0;
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext1 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(evalContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang('*Hgm)', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("concat");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionNull(attributeContext0);
      QName qName0 = new QName("concat", "concat");
      coreFunction0.compute((EvalContext) null);
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      int int0 = 2742;
      CoreFunction coreFunction0 = new CoreFunction(2742, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-510), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(3976.325);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 30;
      coreOperationMultiply0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("sum", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("concat");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(22, (Expression[]) null);
      EvalContext evalContext0 = null;
      int int0 = 3641;
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreOperationAnd0;
      expressionArray0[3] = (Expression) coreFunction1;
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("starts-with", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("()");
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, processingInstructionTest0);
      RootContext rootContext0 = ancestorContext0.getRootContext();
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext1 = rootContext1.getAbsoluteRootContext();
      Object object0 = coreFunction0.computeValue(evalContext1);
      assertNotNull(object0);
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("concat", string0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, nodeTypeTest0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Object object0 = coreFunction1.computeValue(evalContext0);
      assertNotNull(object0);
      
      coreFunction1.functionString(evalContext0);
      coreFunction1.functionString(evalContext0);
      assertEquals(6, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(968, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction968()(null)", string0);
      
      coreFunction0.getArg1();
      assertEquals(968, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float(3976.325);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      coreOperationMultiply0.isContextDependent();
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(3976.324951171875, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 3976.324951171875)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(1757, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(95, expressionArray1);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(2, expressionArray0);
      coreFunction3.functionFloor((EvalContext) null);
      assertEquals(2, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      coreFunction0.computeContextDependent();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction28()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Float float0 = new Float((double) 4);
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(539, expressionArray0);
      coreFunction1.functionConcat((EvalContext) null);
      coreFunction1.functionContains((EvalContext) null);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction539()(4, 4)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(32, (Expression[]) null);
      coreFunction1.computeValue((EvalContext) null);
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNotNull(object0);
      assertEquals(20, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 15;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      expressionArray1[8] = (Expression) coreOperationAdd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[3] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference((QName) null);
      expressionArray0[4] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 != org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005), $null, $null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-4849), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4849()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?Cr,W*");
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("b");
      processingInstructionTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionLast(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction((-368), (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(20, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreFunction2;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction1;
      expressionArray0[3] = (Expression) coreFunction2;
      expressionArray0[4] = (Expression) coreFunction1;
      expressionArray0[5] = (Expression) coreFunction2;
      expressionArray0[6] = (Expression) coreFunction2;
      expressionArray0[7] = (Expression) coreFunction2;
      CoreFunction coreFunction3 = new CoreFunction(20, expressionArray0);
      coreFunction3.functionConcat((EvalContext) null);
      CoreFunction coreFunction4 = new CoreFunction((-368), expressionArray0);
      coreFunction4.computeValue((EvalContext) null);
      CoreFunction coreFunction5 = new CoreFunction((-1830), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("true()");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("#^K*w6FKb8VF-E");
      processingInstructionTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("false", string0);
      
      CoreFunction coreFunction1 = new CoreFunction((-4849), (Expression[]) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      coreFunction1.compute((EvalContext) null);
      assertEquals((-4849), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationMultiply0.toString();
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.getFunctionName();
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(1172, expressionArray0);
      coreFunction0.getArg2();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, (Expression) null);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, nameAttributeTest0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationLessThanOrEqual0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction((-3169), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      processingInstructionTest0.toString();
      parentContext0.reset();
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstringAfter(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.functionName((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction((-4205), expressionArray0);
      Object object1 = coreFunction2.functionBoolean((EvalContext) null);
      assertEquals(false, object1);
      
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction2.functionRound((EvalContext) null);
      assertEquals((-4205), coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((double) 32);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction32()", string0);
      
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionName((EvalContext) null);
      Object object1 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(1024.0, object1);
      
      coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(32, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) attributeContext0;
      evalContextArray0[1] = (EvalContext) attributeContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) attributeContext0;
      UnionContext unionContext0 = new UnionContext(attributeContext0, evalContextArray0);
      AttributeContext attributeContext1 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      Object object0 = coreFunction0.compute(attributeContext1);
      assertNotNull(object0);
      assertEquals(8, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 32;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-3649), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Float float0 = new Float((-463.100205));
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(41, (Expression[]) null);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[3] = expression0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[4], coreFunction0);
      expressionArray1[6] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[0], expressionArray1[4]);
      expressionArray1[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction2 = new CoreFunction(41, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(unknownFunction41()(), position(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001), position(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, position(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003, org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000004 div org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(100, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction32()", string0);
      
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionName((EvalContext) null);
      assertEquals(32, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-251));
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(17);
      Expression[] expressionArray1 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("or");
      CoreFunction coreFunction1 = new CoreFunction((-3309), (Expression[]) null);
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      int int0 = 15;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction32()", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      coreFunction1.functionNumber((EvalContext) null);
      coreFunction0.functionString((EvalContext) null);
      assertEquals(32, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Float float0 = new Float((-2659.4));
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(2502, (Expression[]) null);
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction1.toString();
      // Undeclared exception!
      try { 
        coreFunction1.functionName(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.getFunctionName();
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = new Float((-2659.4));
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(-2659.39990234375, -2659.39990234375, -2659.39990234375, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1039);
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      QName qName0 = new QName(">^oq");
      CoreFunction coreFunction2 = new CoreFunction(2502, (Expression[]) null);
      assertEquals(2502, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(35, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("attribute");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(unknownFunction35()(), unknownFunction35()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 2;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(738);
      Step step0 = new Step(2, (NodeTest) null, (Expression[]) null);
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(279, (Expression[]) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      // Undeclared exception!
      try { 
        coreFunction2.functionStringLength(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ChildContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("{object of type ");
      Step step0 = new Step(880, processingInstructionTest0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      processingInstructionTest1.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      ProcessingInstructionTest processingInstructionTest2 = new ProcessingInstructionTest("");
      processingInstructionTest1.toString();
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(14, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = 95;
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(95);
      Expression[] expressionArray0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("o9pGsE");
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      parentContext0.reset();
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, coreOperationNegate0);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      expressionArray1[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1160), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1160()((org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000005) | (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000006) | (org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000008), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000005) | (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000006) | (org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000008), substring-before(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003 < (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003, -org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000007))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.VariablePointerFactory$VariableContextWrapper");
      Locale locale0 = new Locale("2=&AUafr>?n5l", "org.apache.commons.jxpath.ri.model.VariablePointerFactory$VariableContextWrapper");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, (Object) null, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*+^St");
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("-gTU|Zb", "f`6yxn");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationGreaterThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationUnion0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("round");
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(191, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction191()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      Constant constant0 = new Constant(float0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      coreFunction0.functionRound((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("parent");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = (-1548);
      Expression[] expressionArray0 = new Expression[1];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1548), expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "Invalid argument type for 'sum': ";
      QName qName0 = new QName("Invalid argument type for 'sum': ");
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.isContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1599, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      parentContext0.reset();
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ParentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("The Content already has an existing parent document");
      processingInstructionTest0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      parentContext0.reset();
      CoreFunction coreFunction0 = new CoreFunction(1404, expressionArray0);
      processingInstructionTest0.toString();
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      coreFunction0.iterate(parentContext0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, expressionArray1[0]);
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1404, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1404()(unknownFunction1404()(), unknownFunction1404()(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 <= org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003, unknownFunction1404()(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 | org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005 | org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 | org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 | org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 | org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003, unknownFunction1404()(), unknownFunction1404()(), unknownFunction1404()(), unknownFunction1404()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = (-1889);
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName((String) null, "6-~@9Q]69T[5=p5dR");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2757, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Float float0 = new Float((-2659.4));
      Constant constant0 = new Constant(float0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, coreOperationAnd0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionConcat((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction95()(-2659.39990234375, -2659.39990234375, -2659.39990234375, -2659.39990234375, -2659.39990234375, -2659.39990234375)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      QName qName0 = new QName("-gTU|Zb", "f`6yxn");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("{object of type ");
      Expression[] expressionArray0 = null;
      int int0 = 880;
      Step step0 = new Step(880, processingInstructionTest0, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-609), expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      coreFunction0.getFunctionName();
      coreFunction0.functionTrue((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      coreFunction0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(95);
      Step step0 = new Step(2, nodeTypeTest0, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-609), expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      coreFunction2.functionStringLength(childContext0);
      CoreFunction coreFunction3 = new CoreFunction(2, (Expression[]) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      coreFunction2.functionString(namespaceContext0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      String string1 = processingInstructionTest0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction95()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("{object of type ");
      Step step0 = new Step(880, processingInstructionTest0, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, coreFunction0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, processingInstructionTest0);
      coreFunction0.functionNumber(namespaceContext0);
      assertEquals(2, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreOperationOr");
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("The Content already has an existing parent document");
      processingInstructionTest0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      parentContext0.reset();
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      parentContext0.reset();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(880, processingInstructionTest0, (Expression[]) null);
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-609), expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-609()(|org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(95);
      Step step0 = new Step(2, nodeTypeTest0, (Expression[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-609), expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      coreFunction2.functionStringLength(childContext0);
      CoreFunction coreFunction3 = new CoreFunction(17, (Expression[]) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      coreFunction2.functionString(namespaceContext0);
      coreFunction3.toString();
      // Undeclared exception!
      try { 
        coreFunction3.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      String string0 = "FOV8po2\"\\O_@Rf";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("FOV8po2\"O_@Rf");
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction((-334), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      QName qName0 = new QName("_3yM\"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(13, nodeNameTest0, (Expression[]) null);
      Step step1 = new Step(28, nodeNameTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      Step step2 = new Step(13, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step2;
      stepArray0[1] = step1;
      stepArray0[2] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, (Expression[]) null, stepArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      expressionPath0.evalSteps(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      parentContext0.reset();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      QName qName0 = new QName("SqtHPya88j.^0(Ed");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual1, expressionArray0[1]);
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationLessThanOrEqual1);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], coreOperationLessThanOrEqual1);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction((-671), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(22);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationEqual1);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual2 = new CoreOperationEqual(coreOperationNegate0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationEqual2;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      QName qName0 = new QName((String) null, "i|{I,~U\"p0d;`IJ>a");
      QName qName1 = new QName("string-length");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(1150, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1150()(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationGreaterThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("<^aKTi<Jlc,p");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      CoreFunction coreFunction1 = new CoreFunction((-671), expressionArray1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreOperationLessThan0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
      CoreFunction coreFunction2 = new CoreFunction((-671), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      Step step0 = new Step(8, (NodeTest) null, (Expression[]) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1461, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationGreaterThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("<^aKTi<Jlc,p");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      int int0 = (-671);
      Step step1 = new Step((-671), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, coreFunction0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.getCurrentPosition();
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(58, (Expression[]) null);
      int int0 = (-650);
      CoreFunction coreFunction1 = new CoreFunction((-650), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      String string0 = "";
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(721, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationGreaterThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("<^aKTi<Jlc,p");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-671), nodeNameTest0, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray1, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      QName qName0 = new QName("number");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, coreOperationLessThanOrEqual1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      QName qName1 = new QName((String) null, "!#\"4uBI}a");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "@(n+BmFLhi<q)");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      namespaceContext0.getCurrentPosition();
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = (-1729);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("namespace-uri");
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, processingInstructionTest0);
      processingInstructionTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("namespace-uri", "");
      CoreFunction coreFunction0 = new CoreFunction(633, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(evalContextArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-333));
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Expression[] expressionArray1 = null;
      Step step0 = new Step(2, processingInstructionTest0, (Expression[]) null);
      EvalContext evalContext1 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(86, expressionArray0);
      coreOperationAdd0.args = expressionArray0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      Constant constant0 = new Constant((String) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationSubtract0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, coreOperationAdd0);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(410);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(+org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationEqual1);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual2 = new CoreOperationEqual(coreOperationNegate0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationEqual2;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1500);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext1 = new AttributeContext(attributeContext0, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1500, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-3637), expressionArray0);
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int int0 = (-3637);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3637), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3637()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3637), expressionArray0);
      int int0 = 2611;
      CoreFunction coreFunction1 = new CoreFunction((-3637), expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("?Cr,W*");
      processingInstructionTest1.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      coreFunction1.functionLast(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("SqtHPya88j.^0(Ed");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual1, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(14, nodeNameTest0, expressionArray0);
      Step step1 = new Step((-671), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stepArray0[0] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, nodeNameTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step((-2555), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2497), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(11, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2421), (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(11, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-354), (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-2421), (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, locationPath0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], locationPath0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationAdd0);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2497), expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      NamespaceContext namespaceContext0 = new NamespaceContext(childContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext");
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      coreOperationAdd0.args = expressionArray0;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction95()(+org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(2611, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(48, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(2611, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3637), expressionArray0);
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3637), expressionArray0);
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(24, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(628);
      Step step6 = new Step(24, nodeTypeTest0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1343, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext1 = new ParentContext(parentContext0, nodeTypeTest0);
      coreFunction0.functionTrue((EvalContext) null);
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1343()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = (-1729);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("namespace-uri");
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, processingInstructionTest0);
      processingInstructionTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("namespace-uri", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction((-1729), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1729()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("JNqN<>8mM.Zk~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      coreFunction1.getArgumentCount();
      QName qName1 = new QName("translate", "?Bi.Ugi#3d");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M>G@sLH<Ab|`X&Sqny");
      namespaceContext0.getCurrentPosition();
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(2611, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?Cr,W*");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      CoreFunction coreFunction1 = new CoreFunction(48, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(3, (Expression[]) null);
      coreFunction2.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction2.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("JNqN<>8mM.Zk~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1240);
      Step step0 = new Step(1240, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      Step step1 = new Step(1240, nodeTypeTest0, expressionArray1);
      Step step2 = new Step(10, nodeTypeTest0, (Expression[]) null);
      Step step3 = new Step((-171), nodeTypeTest0, expressionArray0);
      Step step4 = new Step((-1724), nodeTypeTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(10);
      Step step5 = new Step((-171), nodeTypeTest0, expressionArray1);
      Step[] stepArray0 = new Step[7];
      stepArray0[0] = step4;
      stepArray0[1] = step0;
      stepArray0[2] = step2;
      stepArray0[3] = step2;
      stepArray0[4] = step4;
      stepArray0[5] = step1;
      stepArray0[6] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray1, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      UnionContext unionContext0 = new UnionContext(evalContext0, (EvalContext[]) null);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      int int0 = 2611;
      CoreFunction coreFunction0 = new CoreFunction(2611, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?Cr,W*");
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("?lO*5^@owc8");
      processingInstructionTest1.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionLast(attributeContext0);
      coreFunction0.functionLast(attributeContext0);
      coreFunction0.functionPosition(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2611()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2640, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      String string0 = "last";
      QName qName0 = new QName("last");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2640);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      coreFunction0.computeValue(descendantContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'last'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("namespace-uri");
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, processingInstructionTest0);
      processingInstructionTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("namespace-uri", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1729), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1729()($namespace-uri:, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007 > org.apache.commons.jxpath.ri.compiler.VariableReference@0000000007)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      coreOperationAdd0.args = expressionArray0;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionSum(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("SqtHPya88j.^0(Ed");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual1, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      QName qName1 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.getCurrentPosition();
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring($SqtHPya88j.^0(Ed, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003), null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, (Step[]) null);
      expressionArray0[1] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(64, expressionArray0);
      locationPath0.isContextDependent();
      LocationPath locationPath2 = (LocationPath)coreFunction0.getArg2();
      assertTrue(locationPath2.isAbsolute());
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction64()(, , null)", string0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      Short short0 = new Short((short)8);
      Constant constant0 = new Constant(short0);
      Constant constant1 = new Constant(short0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3637), expressionArray0);
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      EvalContext evalContext0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.NamespaceContext", "org.apache.commons.jxpath.ri.axes.NamespaceContext");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "z66p");
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeNameTest0);
      coreFunction0.functionFalse(selfContext0);
      Step step0 = new Step(20, nodeNameTest0, (Expression[]) null);
      Step step1 = new Step(2742, nodeNameTest0, (Expression[]) null);
      Step step2 = new Step(20, nodeNameTest0, (Expression[]) null);
      Step step3 = new Step(95, nodeNameTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      Step step4 = new Step(2742, nodeTypeTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-1162));
      Step step5 = new Step(23, nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[7];
      stepArray0[0] = step1;
      stepArray0[1] = step3;
      stepArray0[2] = step1;
      stepArray0[3] = step5;
      stepArray0[4] = step1;
      Step step6 = new Step(55, nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step6;
      stepArray0[6] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(423, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(423, (Expression[]) null);
      coreFunction1.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("JNqN<>8mM.Zk~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2840, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1729), (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("namespace-uri");
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, processingInstructionTest0);
      processingInstructionTest0.toString();
      processingInstructionTest0.toString();
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      ancestorContext0.getContextNodePointer();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1729()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("java.util.concurrent.atomic.AtomicLong", "java.util.concurrent.atomic.AtomicLong");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("java.util.concurrent.atomic.AtomicLong");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-1889), expressionArray0);
      coreFunction0.getArg3();
      assertEquals((-1889), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(607, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      Step step3 = new Step(24, processingInstructionTest0, expressionArray0);
      Step step4 = new Step(1240, processingInstructionTest0, expressionArray0);
      Step step5 = new Step(1240, processingInstructionTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1623);
      Step step6 = new Step(0, nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[6];
      stepArray0[0] = step5;
      stepArray0[1] = step0;
      stepArray0[2] = step3;
      stepArray0[3] = step4;
      stepArray0[4] = step4;
      stepArray0[5] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps((EvalContext) null);
      UnionContext unionContext0 = new UnionContext(evalContext1, (EvalContext[]) null);
      CoreFunction coreFunction0 = new CoreFunction(628, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction628()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("JNqN<>8mM.Zk~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      coreFunction1.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("SqtHPya88j.^0(Ed");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual1, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      Short short0 = new Short((short)91);
      Constant constant0 = new Constant(short0);
      expressionArray0[5] = (Expression) constant0;
      Constant constant1 = new Constant(short0);
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((short)91, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction91()()", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("JNqN<>8mM.Zk~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      Step step0 = new Step(2576, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(2576, processingInstructionTest0, expressionArray0);
      Step step2 = new Step(2576, processingInstructionTest0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step3 = new Step(5, nodeNameTest0, expressionArray0);
      Step step4 = new Step(10, processingInstructionTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 2576, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int int0 = 10;
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("JNqN<>8mM.Zk~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(2611, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?Cr,W*");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      DescendantContext descendantContext0 = new DescendantContext(precedingOrFollowingContext0, true, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(precedingOrFollowingContext0, coreOperationNegate0);
      EvalContext[] evalContextArray0 = new EvalContext[25];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      evalContextArray0[1] = (EvalContext) precedingOrFollowingContext0;
      evalContextArray0[2] = (EvalContext) precedingOrFollowingContext0;
      evalContextArray0[3] = (EvalContext) predicateContext0;
      evalContextArray0[4] = (EvalContext) precedingOrFollowingContext0;
      evalContextArray0[5] = (EvalContext) predicateContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = (EvalContext) precedingOrFollowingContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(evalContextArray0[4]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2611()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("S#+HPya883.^0(Ed");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual1, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(41, (Expression[]) null);
      QName qName0 = new QName("The specified collection element does not exist: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-473), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-473), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-473), processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step((-1515), processingInstructionTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step((-1515), processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray1[3] = (Expression) locationPath0;
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray1[5] = (Expression) coreOperationUnion1;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[3] = (Expression) coreOperationUnion2;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[2], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationUnion1, coreOperationMultiply0);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[6], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion3 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[7] = (Expression) coreOperationUnion3;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[8] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction((-473), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(nameAttributeTest0, coreOperationAnd0);
      expressionArray0[1] = (Expression) nameAttributeTest1;
      Short short0 = new Short((short)1789);
      Constant constant0 = new Constant(short0);
      expressionArray0[2] = (Expression) constant0;
      coreOperationAnd0.computeContextDependent();
      Constant constant1 = new Constant(short0);
      expressionArray0[3] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(607, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction607()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) = (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002 = (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), 1789, 1789)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(".'ejw!g*PCQ6o");
      Step step0 = new Step(407, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(407, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(407, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant(".'ejw!g*PCQ6o");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, constant0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("U]:~3oM[9", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(407, expressionArray0);
      coreFunction0.getArg1();
      assertEquals(407, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("SqtHPya88j.^0(Ed");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual1, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      Short short0 = new Short((short)91);
      Constant constant0 = new Constant(short0);
      expressionArray0[5] = (Expression) constant0;
      Constant constant1 = new Constant(short0);
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(9, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.isContextDependent();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.iterate((EvalContext) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("JNqN<>8mM.Zk~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      DescendantContext descendantContext0 = new DescendantContext(precedingOrFollowingContext0, true, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, expressionArray0[2]);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) descendantContext0;
      evalContextArray0[1] = (EvalContext) predicateContext0;
      evalContextArray0[2] = (EvalContext) predicateContext0;
      evalContextArray0[3] = (EvalContext) predicateContext0;
      evalContextArray0[4] = (EvalContext) descendantContext0;
      evalContextArray0[5] = (EvalContext) descendantContext0;
      evalContextArray0[6] = (EvalContext) precedingOrFollowingContext0;
      evalContextArray0[7] = (EvalContext) predicateContext0;
      UnionContext unionContext0 = new UnionContext(predicateContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = null;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, (Step[]) null);
      expressionArray0[1] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(64, expressionArray0);
      locationPath0.isContextDependent();
      Expression expression0 = coreFunction0.getArg2();
      coreFunction0.toString();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(64, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("unknownFunction64()(, , null)", "unknownFunction64()(, , null)");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ka@o1O");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      namespaceContext0.getCurrentPosition();
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction64()(, , )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(41, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("The specified collection element does not exist: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, processingInstructionTest0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2372), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2372()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[0] = null;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationAnd0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int int0 = (-1729);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1729), (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("namespace-uri");
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, processingInstructionTest0);
      processingInstructionTest0.toString();
      coreFunction0.functionTrue(evalContextArray0[2]);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1729()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(58, (Expression[]) null);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction58()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      coreOperationAdd0.args = expressionArray0;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction95()(+org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationNegate0, coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationEqual1;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationGreaterThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("<^aKTi<Jlc,p");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-671), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray1, stepArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, nodeNameTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(selfContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3637), expressionArray0);
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(24, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-3637), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(628);
      Step step6 = new Step(24, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2826, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      coreFunction0.getFunctionName();
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction-2147483648()");
      Step step0 = new Step(Integer.MIN_VALUE, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(Integer.MIN_VALUE, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(2141, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(Integer.MIN_VALUE, processingInstructionTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(2141, processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(2141, processingInstructionTest0, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("unknownFunction-2147483648()", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeNameTest0, true);
      expressionPath0.evalSteps(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2147483648()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
