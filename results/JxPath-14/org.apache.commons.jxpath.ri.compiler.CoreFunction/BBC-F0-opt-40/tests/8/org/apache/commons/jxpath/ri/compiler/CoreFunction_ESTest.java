/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:37:46 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("7A'k{je/# NN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("7A'k{je/# NN");
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/# NN", qName0.getName());
      assertEquals("7A'k{je/# NN", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "7A'k{je/# NN");
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/# NN", qName0.getName());
      assertEquals("7A'k{je/# NN", qName0.toString());
      assertEquals("7A'k{je/# NN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/# NN", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(2395, nodeNameTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/# NN", qName0.getName());
      assertEquals("7A'k{je/# NN", qName0.toString());
      assertEquals("7A'k{je/# NN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/# NN", nodeNameTest0.toString());
      assertEquals(2395, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/# NN", qName0.getName());
      assertEquals("7A'k{je/# NN", qName0.toString());
      assertEquals("7A'k{je/# NN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/# NN", nodeNameTest0.toString());
      assertEquals(32, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2395, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/# NN", qName0.getName());
      assertEquals("7A'k{je/# NN", qName0.toString());
      assertEquals("7A'k{je/# NN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/# NN", nodeNameTest0.toString());
      assertEquals(2395, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(4653, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/# NN", qName0.getName());
      assertEquals("7A'k{je/# NN", qName0.toString());
      assertEquals("7A'k{je/# NN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/# NN", nodeNameTest0.toString());
      assertEquals(4653, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1367), nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/# NN", qName0.getName());
      assertEquals("7A'k{je/# NN", qName0.toString());
      assertEquals("7A'k{je/# NN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/# NN", nodeNameTest0.toString());
      assertEquals((-1367), step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      QName qName1 = new QName("7A'k{je/# NN", "7A'k{je/# NN");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("7A'k{je/# NN", qName1.getName());
      assertEquals("7A'k{je/# NN", qName1.getPrefix());
      assertEquals("7A'k{je/# NN:7A'k{je/# NN", qName1.toString());
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("7A'k{je/# NN", qName1.getName());
      assertEquals("7A'k{je/# NN", qName1.getPrefix());
      assertEquals("7A'k{je/# NN:7A'k{je/# NN", qName1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("7A'k{je/# NN:7A'k{je/# NN", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNotNull(nodeNameTest1);
      
      Step step5 = new Step(1947, nodeNameTest1, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertEquals("7A'k{je/# NN", qName1.getName());
      assertEquals("7A'k{je/# NN", qName1.getPrefix());
      assertEquals("7A'k{je/# NN:7A'k{je/# NN", qName1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("7A'k{je/# NN:7A'k{je/# NN", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(1947, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(6, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2395, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2395, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/# NN", qName0.getName());
      assertEquals("7A'k{je/# NN", qName0.toString());
      assertEquals("7A'k{je/# NN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/# NN", nodeNameTest0.toString());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", "org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer");
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variableReference0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-496), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-496), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      VariablePointer variablePointer0 = (VariablePointer)jXPathContextReferenceImpl0.getVariablePointer(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer:org.apache.commons.jxpath.ri.model.jdom.JDOMNodePointer
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Long long0 = new Long(2);
      assertEquals(2L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'VhLAk 5");
      assertEquals("'VhLAk 5", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(2, processingInstructionTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("'VhLAk 5", processingInstructionTest0.getTarget());
      assertEquals(2, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(2, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals("'VhLAk 5", processingInstructionTest0.getTarget());
      assertEquals(2, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(5319, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals("'VhLAk 5", processingInstructionTest0.getTarget());
      assertEquals(5319, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(10, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(7, expressionArray0.length);
      assertEquals("'VhLAk 5", processingInstructionTest0.getTarget());
      assertEquals(10, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("'VhLAk 5");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertEquals("'VhLAk 5", processingInstructionTest1.getTarget());
      assertNotNull(processingInstructionTest1);
      
      Step step4 = new Step((-1588), processingInstructionTest1, expressionArray0);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertEquals(7, expressionArray0.length);
      assertEquals("'VhLAk 5", processingInstructionTest1.getTarget());
      assertEquals((-1588), step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      Constant constant1 = new Constant("'VhLAk 5");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      Constant constant2 = new Constant(long0);
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertNotNull(constant2);
      
      expressionArray0[3] = (Expression) constant2;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, expressionArray0[3]);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.equals((Object)constant2));
      assertEquals(7, expressionArray0.length);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant3 = new Constant("'VhLAk 5");
      assertFalse(constant3.equals((Object)constant1));
      assertFalse(constant3.equals((Object)constant2));
      assertFalse(constant3.equals((Object)constant0));
      assertFalse(constant3.isContextDependent());
      assertFalse(constant3.computeContextDependent());
      assertNotNull(constant3);
      
      expressionArray0[5] = (Expression) constant3;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(7, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath1);
      
      expressionArray0[6] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      String string0 = "Ik";
      QName qName0 = new QName("Ik");
      assertEquals("Ik", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Ik", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("Ik", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Ik", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-435), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-435), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationSubtract0, coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "|4RYp)fN");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertTrue(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(3, expressionArray0.length);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("\"last\"");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1225);
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(8388608, nodeTypeTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(8388608, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(8388608, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(8388608, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(25, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(5, expressionArray0.length);
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(25, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(104, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(104, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(1225, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertEquals(1225, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-65536), nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertEquals(5, expressionArray0.length);
      assertEquals((-65536), step5.getAxis());
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(936, nodeTypeTest0, expressionArray0);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertEquals(5, expressionArray0.length);
      assertEquals(936, step6.getAxis());
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(936, nodeTypeTest0, expressionArray0);
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertEquals(5, expressionArray0.length);
      assertEquals(936, step7.getAxis());
      assertEquals(1225, nodeTypeTest0.getNodeType());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, coreOperationEqual0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, coreOperationLessThanOrEqual1);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationEqual0);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertEquals(5, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(8388608, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(8388608, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(";5L-~D+");
      assertEquals(";5L-~D+", qName0.toString());
      assertEquals(";5L-~D+", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(";5L-~D+", qName0.toString());
      assertEquals(";5L-~D+", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variableReference0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(";5L-~D+", qName0.toString());
      assertEquals(";5L-~D+", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(";5L-~D+", qName0.toString());
      assertEquals(";5L-~D+", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(";5L-~D+", qName0.toString());
      assertEquals(";5L-~D+", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: ;5L-~D+
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant constant0 = new Constant("7'k{je/#\"NN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Byte byte0 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      Constant constant2 = new Constant(byte0);
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertNotNull(constant2);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant1, constant2);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7'k{je/#\"NN");
      assertFalse(boolean0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant1, constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-184), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-184), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-184), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction((-184), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-184), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object1 = coreFunction1.functionTranslate((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertEquals("7'k{j/#\"NN", object1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-184), coreFunction1.getFunctionCode());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Constant constant0 = new Constant("!0/;?wvYq0");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Byte byte0 = new Byte((byte) (-98));
      assertEquals((byte) (-98), (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant1, constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant1, coreOperationMod0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((byte) (-98), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-98), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-98), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("Q", "cJq");
      assertEquals("Q", qName0.getPrefix());
      assertEquals("Q:cJq", qName0.toString());
      assertEquals("cJq", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals("Q", qName0.getPrefix());
      assertEquals("Q:cJq", qName0.toString());
      assertEquals("cJq", qName0.getName());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Byte byte0 = new Byte((byte)104);
      assertEquals((byte)104, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      Constant constant2 = new Constant(byte0);
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertNotNull(constant2);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant1, constant2);
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant2, coreOperationMod0);
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant2;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant1, constant1);
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-175), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-175), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-175), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[2], constant1);
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals(3, expressionArray0.length);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertNotNull(coreOperationMod1);
      
      expressionArray1[0] = (Expression) coreOperationMod1;
      expressionArray1[1] = (Expression) constant1;
      expressionArray1[2] = (Expression) constant2;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreOperationMod0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreOperationDivide0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(40, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(162);
      assertEquals(162, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(23, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals(162, nodeTypeTest0.getNodeType());
      assertEquals(23, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(40, coreFunction1.getFunctionCode());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 30, nodeTypeTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(40, coreFunction1.getFunctionCode());
      assertEquals(162, nodeTypeTest0.getNodeType());
      assertNull(evalContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-175()(104, org.apache.commons.jxpath.ri.compiler.Constant@0000000002 < org.apache.commons.jxpath.ri.compiler.Constant@0000000002, org.apache.commons.jxpath.ri.compiler.Constant@0000000002 mod org.apache.commons.jxpath.ri.compiler.Constant@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte)117);
      assertEquals((byte)117, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, coreOperationMultiply0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals(2, expressionArray0.length);
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      CoreFunction coreFunction1 = new CoreFunction(901, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(901, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("117", object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(901, coreFunction1.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.NodePointer");
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.model.NodePointer");
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Step step0 = new Step(41, nodeNameTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.model.NodePointer", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(41, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      Integer integer0 = new Integer(3160);
      assertEquals(3160, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(3160, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3160, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Byte byte0 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant1);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) coreOperationMod0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(2486, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2486, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Expression[] expressionArray0 = new Expression[3];
      Byte byte0 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-603), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      coreOperationDivide0.args = expressionArray0;
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("21", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("21");
      assertEquals("21", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals("21", processingInstructionTest0.getTarget());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = nodeSetContext0.hasNext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      List list0 = basicNodeSet0.getNodes();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean2 = nodeSetContext0.setPosition((-1990));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals((-1990), nodeSetContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(1275, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1275, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals((-1990), nodeSetContext0.getPosition());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1275, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Byte byte0 = new Byte((byte)58);
      assertEquals((byte)58, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[1]);
      assertEquals(5, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7A'k{je/#\" NLN");
      assertEquals("7A'k{je/#\" NLN", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(68, processingInstructionTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", processingInstructionTest0.getTarget());
      assertEquals(68, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(3, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", processingInstructionTest0.getTarget());
      assertEquals(3, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(342, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(5, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", processingInstructionTest0.getTarget());
      assertEquals(342, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      QName qName0 = new QName("7A'k{je/#\" NLN");
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "7A'k{je/#\" NLN");
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step3 = new Step((-242), nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-242), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertEquals(5, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, coreOperationAdd0);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertNotNull(coreOperationNotEqual1);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("`K(WAN*,!N", "q/^gKP-l?'{");
      assertEquals("`K(WAN*,!N:q/^gKP-l?'{", qName0.toString());
      assertEquals("q/^gKP-l?'{", qName0.getName());
      assertEquals("`K(WAN*,!N", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("`K(WAN*,!N:q/^gKP-l?'{", qName0.toString());
      assertEquals("q/^gKP-l?'{", qName0.getName());
      assertEquals("`K(WAN*,!N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, variableReference0);
      assertEquals("`K(WAN*,!N:q/^gKP-l?'{", qName0.toString());
      assertEquals("q/^gKP-l?'{", qName0.getName());
      assertEquals("`K(WAN*,!N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-1073741824), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1073741824), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) variableReference0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("`K(WAN*,!N:q/^gKP-l?'{", qName0.toString());
      assertEquals("q/^gKP-l?'{", qName0.getName());
      assertEquals("`K(WAN*,!N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("q/^gKP-l?'{");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("q/^gKP-l?'{", qName1.getName());
      assertEquals("q/^gKP-l?'{", qName1.toString());
      assertNull(qName1.getPrefix());
      assertNotNull(qName1);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, expressionArray0[0], locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName1.equals((Object)qName0));
      assertNotSame(qName1, qName0);
      assertEquals(1, expressionArray0.length);
      assertEquals("q/^gKP-l?'{", qName1.getName());
      assertEquals("q/^gKP-l?'{", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals("`K(WAN*,!N:q/^gKP-l?'{", qName0.toString());
      assertEquals("q/^gKP-l?'{", qName0.getName());
      assertEquals("`K(WAN*,!N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("q/^gKP-l?'{", qName1.getName());
      assertEquals("q/^gKP-l?'{", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newChildNodePointer(beanPointer0, qName0, "`K(WAN*,!N");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(1, expressionArray0.length);
      assertEquals("`K(WAN*,!N:q/^gKP-l?'{", qName0.toString());
      assertEquals("q/^gKP-l?'{", qName0.getName());
      assertEquals("`K(WAN*,!N", qName0.getPrefix());
      assertEquals("q/^gKP-l?'{", qName1.getName());
      assertEquals("q/^gKP-l?'{", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertNotNull(beanPointer1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertEquals(1, expressionArray0.length);
      assertEquals("`K(WAN*,!N:q/^gKP-l?'{", qName0.toString());
      assertEquals("q/^gKP-l?'{", qName0.getName());
      assertEquals("`K(WAN*,!N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("q/^gKP-l?'{", qName1.getName());
      assertEquals("q/^gKP-l?'{", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(qName0, qName1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName1, qName0);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(beanPointer1, beanPointer0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals("`K(WAN*,!N:q/^gKP-l?'{", qName0.toString());
      assertEquals("q/^gKP-l?'{", qName0.getName());
      assertEquals("`K(WAN*,!N", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("q/^gKP-l?'{", qName1.getName());
      assertEquals("q/^gKP-l?'{", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertFalse(beanPointer1.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotNull(rootContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: `K(WAN*,!N:q/^gKP-l?'{
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)20, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("last");
      assertEquals("last", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertEquals("last", processingInstructionTest0.getTarget());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      Object object1 = new Object();
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant("5");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.forLanguageTag("5");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("5", "5");
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertNotNull(nodePointer0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(nodePointer0, qName0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl1).getLocale();
      doReturn(beanPointer0).when(jXPathContextReferenceImpl1).getPointerByID(anyString());
      doReturn(beanPointer0).when(jXPathContextReferenceImpl1).getContextPointer();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl1).getNamespaceResolver();
      QName qName1 = new QName("5", "substring");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("substring", qName1.getName());
      assertEquals("5", qName1.getPrefix());
      assertEquals("5:substring", qName1.toString());
      assertNotNull(qName1);
      
      Locale locale1 = Locale.PRC;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertNotNull(locale1);
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newNodePointer(qName1, jXPathContextReferenceImpl1, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals("substring", qName1.getName());
      assertEquals("5", qName1.getPrefix());
      assertEquals("5:substring", qName1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNotNull(beanPointer1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals("substring", qName1.getName());
      assertEquals("5", qName1.getPrefix());
      assertEquals("5:substring", qName1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals("substring", qName1.getName());
      assertEquals("5", qName1.getPrefix());
      assertEquals("5:substring", qName1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, "substring", beanPointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals("substring", qName1.getName());
      assertEquals("5", qName1.getPrefix());
      assertEquals("5:substring", qName1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals("substring", qName1.getName());
      assertEquals("5", qName1.getPrefix());
      assertEquals("5:substring", qName1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionStringLength(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(1.0, (double)double0, 0.01);
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals("substring", qName1.getName());
      assertEquals("5", qName1.getPrefix());
      assertEquals("5:substring", qName1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(double0);
      
      BeanPointer beanPointer2 = (BeanPointer)coreFunction0.functionID(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(beanPointer2.equals((Object)beanPointer1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(beanPointer2, beanPointer1);
      assertSame(beanPointer2, beanPointer0);
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertSame(beanPointer0, beanPointer2);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(beanPointer1, beanPointer2);
      assertEquals(1, expressionArray0.length);
      assertFalse(beanPointer2.isContainer());
      assertFalse(beanPointer2.isAttribute());
      assertFalse(beanPointer2.isCollection());
      assertTrue(beanPointer2.isNode());
      assertFalse(beanPointer2.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer2.getNamespaceURI());
      assertFalse(beanPointer2.isRoot());
      assertEquals(1, beanPointer2.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer2.getIndex());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals("substring", qName1.getName());
      assertEquals("5", qName1.getPrefix());
      assertEquals("5:substring", qName1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isAttribute());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertNull(beanPointer1.getNamespaceURI());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(beanPointer2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      String string0 = processingInstructionTest0.toString();
      assertEquals("processing-instruction('null')", string0);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(string0);
      
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(string1.equals((Object)string0));
      assertEquals("position", string1);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(string1);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Byte byte0 = new Byte((byte)20);
      assertEquals((byte)20, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) coreOperationMod0;
      expressionArray0[2] = (Expression) coreOperationMod0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) coreOperationDivide0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((byte)20, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, true);
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionTranslate((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("0", object0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertNotNull(object0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, int0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(785, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(785, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(785, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(785, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(2523, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(2523, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      Object object0 = coreFunction2.functionCount((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0.0, object0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(2523, coreFunction2.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      QName qName0 = new QName("h9NI){NA_8$,!fMi h");
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, qName0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, evalContextArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      RootContext rootContext1 = unionContext0.getRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(1, evalContextArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){NA_8$,!fMi h", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertNotNull(rootContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-1969843567), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1969843567), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationDivide coreOperationDivide1 = (CoreOperationDivide)coreFunction0.getArg3();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(coreOperationDivide1, coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1969843567), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      expressionArray1[0] = (Expression) coreOperationDivide1;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreOperationSubtract0;
      Step step0 = new Step(2661, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(2661, step0.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(4, stepArray0.length);
      assertEquals(3, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"tre\"");
      assertEquals(");LD*:\"tre\"", qName0.toString());
      assertEquals("\"tre\"", qName0.getName());
      assertEquals(");LD*", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*:\"tre\"", qName0.toString());
      assertEquals("\"tre\"", qName0.getName());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*:\"tre\"", qName0.toString());
      assertEquals("\"tre\"", qName0.getName());
      assertEquals(");LD*", qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*:\"tre\"", qName0.toString());
      assertEquals("\"tre\"", qName0.getName());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      Double double0 = (Double)coreFunction0.functionCount(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*:\"tre\"", qName0.toString());
      assertEquals("\"tre\"", qName0.getName());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:\"tre\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"true\"");
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variableReference0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      String string0 = basicVariables0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      CoreFunction coreFunction0 = new CoreFunction((-248), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-248), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string1 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals((-248), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(string1);
      
      Double double0 = (Double)coreFunction0.functionCount(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0.0, (double)double0, 0.01);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals((-248), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:\"true\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", ");LD*");
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variableReference0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(initialContext0);
      
      Iterator iterator0 = variableReference0.iteratePointers(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(iterator0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("falsefalse");
      assertEquals("falsefalse", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("processing-instruction('falsefalse')", string0);
      assertEquals("falsefalse", processingInstructionTest0.getTarget());
      assertNotNull(string0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, processingInstructionTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(initialContext0.equals((Object)iterator0));
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("falsefalse", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      Double double0 = (Double)coreFunction0.functionCount(namespaceContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(initialContext0.equals((Object)iterator0));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(initialContext0, iterator0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*:);LD*", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("falsefalse", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:);LD*
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "last");
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("A[<3|BOx#");
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = (ChildContext)expressionPath0.createContextForStep(rootContext0, 2, processingInstructionTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      Double double0 = (Double)coreFunction0.functionCount(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals("last", qName0.getName());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(double0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:last
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "last");
      assertEquals("last", qName0.getName());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("last", qName0.getName());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("last", qName0.getName());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("last", qName0.getName());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("last", qName0.getName());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("A[<3|BOx#");
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = (ChildContext)expressionPath0.createContextForStep(rootContext0, 2, processingInstructionTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals("last", qName0.getName());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      Double double0 = (Double)coreFunction0.functionCount(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals("last", qName0.getName());
      assertEquals(");LD*:last", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(double0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:last
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(iterator0);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      QName qName0 = new QName("7A'k{je/#\" NLN");
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1024, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      byte[] byteArray0 = new byte[1];
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      
      byteArray0[0] = (byte)12;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      String string0 = constant0.toString();
      assertEquals("'null'", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5232);
      assertEquals(5232, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertEquals(5232, nodeTypeTest0.getNodeType());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(5232, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5232, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstringAfter(descendantContext0);
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5232, nodeTypeTest0.getNodeType());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5232, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction5232()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"true\"");
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("A[<3|BOx#");
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = (ChildContext)expressionPath0.createContextForStep(rootContext0, 2, processingInstructionTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      Double double0 = (Double)coreFunction0.functionCount(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(double0);
      
      VariableReference variableReference1 = (VariableReference)coreFunction0.getArg1();
      assertSame(variableReference1, variableReference0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertNotNull(variableReference1);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, int0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"true\"");
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      String string0 = (String)coreFunction0.functionName(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(string0);
      
      String string1 = (String)coreFunction0.functionLocalName(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string1);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(string1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      VariableReference variableReference1 = (VariableReference)coreFunction0.getArg1();
      assertSame(variableReference1, variableReference0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertNotNull(variableReference1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:\"true\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"true\"");
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(27, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:\"true\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"true\"");
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("A[<3|BOx#");
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = (ChildContext)expressionPath0.createContextForStep(rootContext0, 2, processingInstructionTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      Double double0 = (Double)coreFunction0.functionSum(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"true\"");
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("A[<3|BOx#");
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = (ChildContext)expressionPath0.createContextForStep(rootContext0, 2, processingInstructionTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(2719, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2719, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:\"true\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"true\"");
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      String string0 = (String)coreFunction0.functionName(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(string0);
      
      String string1 = (String)coreFunction0.functionLocalName(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals("\"true\"", qName0.getName());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(string1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(");LD*", "\"true\"");
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("A[<3|BOx#");
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = (ChildContext)expressionPath0.createContextForStep(rootContext0, 2, processingInstructionTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      Double double0 = (Double)coreFunction0.functionCount(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals("\"true\"", qName0.getName());
      assertEquals(");LD*:\"true\"", qName0.toString());
      assertEquals(");LD*", qName0.getPrefix());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("A[<3|BOx#", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(double0);
      
      VariableReference variableReference1 = (VariableReference)coreFunction0.getArg1();
      assertSame(variableReference1, variableReference0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertNotNull(variableReference1);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, int0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: );LD*:\"true\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Constant constant0 = new Constant("wm77(ZpL");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreFunction coreFunction0 = new CoreFunction((-596), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-596), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-596), coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("wm77(ZpL", "");
      assertEquals("", qName0.getName());
      assertEquals("wm77(ZpL:", qName0.toString());
      assertEquals("wm77(ZpL", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "aw|O&~yPz@c;");
      assertEquals("", qName0.getName());
      assertEquals("wm77(ZpL:", qName0.toString());
      assertEquals("wm77(ZpL", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("wm77(ZpL:", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("wm77(ZpL:", qName0.toString());
      assertEquals("wm77(ZpL", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("wm77(ZpL:", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-596), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals((-596), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("wm77(ZpL", object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-596), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-596()('wm77(ZpL', unknownFunction-596()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      List list0 = basicNodeSet0.getNodes();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = nodeSetContext0.setPosition((-1990));
      assertFalse(boolean0);
      assertEquals((-1990), nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction(1275, (Expression[]) null);
      assertEquals(1275, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals((-1990), nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1275, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("bfsEp3.h~L\"i");
      assertEquals("bfsEp3.h~L\"i", qName0.toString());
      assertEquals("bfsEp3.h~L\"i", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "bfsEp3.h~L\"i");
      assertEquals("bfsEp3.h~L\"i", qName0.toString());
      assertEquals("bfsEp3.h~L\"i", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("bfsEp3.h~L\"i", nodeNameTest0.toString());
      assertEquals("bfsEp3.h~L\"i", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("bfsEp3.h~L\"i", qName0.toString());
      assertEquals("bfsEp3.h~L\"i", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("bfsEp3.h~L\"i", nodeNameTest0.toString());
      assertEquals("bfsEp3.h~L\"i", nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("bfsEp3.h~L\"i", qName0.toString());
      assertEquals("bfsEp3.h~L\"i", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("bfsEp3.h~L\"i", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertNotNull(nodeNameTest1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("bfsEp3.h~L\"i", qName0.toString());
      assertEquals("bfsEp3.h~L\"i", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("bfsEp3.h~L\"i", nodeNameTest0.toString());
      assertEquals("bfsEp3.h~L\"i", nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant1 = new Constant("kW{{K+kqV9,4k_");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray1[0] = (Expression) constant1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("bfsEp3.h~L\"i", qName0.toString());
      assertEquals("bfsEp3.h~L\"i", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(extensionFunction0);
      
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) extensionFunction0;
      expressionArray2[3] = (Expression) constant1;
      extensionFunction0.args = expressionArray2;
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("bfsEp3.h~L\"i", qName0.toString());
      assertEquals("bfsEp3.h~L\"i", qName0.getName());
      assertNull(qName0.getPrefix());
      
      expressionArray1[6] = (Expression) coreOperationSubtract0;
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant2 = new Constant(integer0);
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertNotNull(constant2);
      
      expressionArray1[7] = (Expression) constant2;
      CoreFunction coreFunction2 = new CoreFunction((-112), expressionArray1);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertEquals(8, coreFunction2.getArgumentCount());
      assertEquals((-112), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      coreFunction2.functionContains(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("Cannot invoke extension function ");
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot invoke extension function ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-232), nodeNameTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot invoke extension function ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-232), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1032, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot invoke extension function ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1032, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-232), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot invoke extension function ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-232), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(931, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot invoke extension function ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(931, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(1032, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot invoke extension function ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1032, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("l]'$vYL},uQ1@(:s1");
      assertEquals("l]'$vYL},uQ1@(:s1", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) variableReference0;
      Step step5 = new Step(25, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertEquals(5, expressionArray1.length);
      assertEquals("l]'$vYL},uQ1@(:s1", processingInstructionTest0.getTarget());
      assertEquals(25, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(6, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[4], expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1032, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1032, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "Cannot invoke extension function ");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.toString());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.getNamespaceURI());
      assertNotNull(nodeNameTest1);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.toString());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.getNamespaceURI());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeNameTest1, true);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.toString());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.getNamespaceURI());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.toString());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.getNamespaceURI());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("Cannot invoke extension function ", qName0.toString());
      assertEquals("Cannot invoke extension function ", qName0.getName());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("Cannot invoke extension function ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.toString());
      assertEquals("Cannot invoke extension function ", nodeNameTest1.getNamespaceURI());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      QName qName0 = new QName("\"descendant-or-self::\"");
      assertEquals("\"descendant-or-self", qName0.getPrefix());
      assertEquals("\"descendant-or-self::\"", qName0.toString());
      assertEquals(":\"", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("\"descendant-or-self", qName0.getPrefix());
      assertEquals("\"descendant-or-self::\"", qName0.toString());
      assertEquals(":\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1176), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1176), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"descendant-or-self::\"");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, extensionFunction0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertEquals("\"descendant-or-self", qName0.getPrefix());
      assertEquals("\"descendant-or-self::\"", qName0.toString());
      assertEquals(":\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertEquals("\"descendant-or-self", qName0.getPrefix());
      assertEquals("\"descendant-or-self::\"", qName0.toString());
      assertEquals(":\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "No such variable: '");
      assertEquals("\"descendant-or-self", qName0.getPrefix());
      assertEquals("\"descendant-or-self::\"", qName0.toString());
      assertEquals(":\"", qName0.getName());
      assertEquals("No such variable: '", nodeNameTest0.getNamespaceURI());
      assertEquals("\"descendant-or-self::\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeNameTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertEquals("\"descendant-or-self", qName0.getPrefix());
      assertEquals("\"descendant-or-self::\"", qName0.toString());
      assertEquals(":\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("No such variable: '", nodeNameTest0.getNamespaceURI());
      assertEquals("\"descendant-or-self::\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant constant0 = new Constant("5");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      QName qName0 = new QName("5", "substring");
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, expressionArray0[0]);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "substring");
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("5:substring", nodeNameTest0.toString());
      assertEquals("substring", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, true, nodeNameTest0);
      assertEquals(1, expressionArray0.length);
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("5:substring", nodeNameTest0.toString());
      assertEquals("substring", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, ancestorContext0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, expressionArray0.length);
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("5:substring", nodeNameTest0.toString());
      assertEquals("substring", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, basicNodeSet0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("5:substring", nodeNameTest0.toString());
      assertEquals("substring", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("5:substring", nodeNameTest0.toString());
      assertEquals("substring", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = (JXPathContextReferenceImpl)rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("5:substring", nodeNameTest0.toString());
      assertEquals("substring", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertNotNull(jXPathContextReferenceImpl3);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl4 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl3, nodeNameTest0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl3));
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("5:substring", nodeNameTest0.toString());
      assertEquals("substring", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertFalse(jXPathContextReferenceImpl4.isLenient());
      assertNotNull(jXPathContextReferenceImpl4);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl4));
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl4);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("5:substring", nodeNameTest0.toString());
      assertEquals("substring", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionLang(nodeSetContext0);
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(boolean0);
      
      String string0 = (String)coreFunction0.functionString(predicateContext0);
      assertEquals("5", string0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1501), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1501), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1501), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("T");
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNotNull(qName0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "7A'k{je/#\" NLN");
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertEquals("T", nodeNameTest0.toString());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertEquals("T", nodeNameTest0.toString());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertEquals("T", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertNotNull(nodeNameTest1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertEquals("T", nodeNameTest0.toString());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      assertTrue(object0.equals((Object)boolean1));
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1501), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstringAfter(descendantContext0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("", object1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1501), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertEquals("T", nodeNameTest0.toString());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionSubstringBefore(namespaceContext0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("", object2);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1501), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertEquals("T", nodeNameTest0.toString());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertNotNull(object2);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNotNull(variablePointer0);
      
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest1);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertEquals("T", nodeNameTest0.toString());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("T", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null, (Object) attributeContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertSame(variablePointer0, nodePointer0);
      assertSame(nodePointer0, variablePointer0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertNull(nodePointer0.getNamespaceURI());
      assertTrue(nodePointer0.isActual());
      assertTrue(nodePointer0.isContainer());
      assertFalse(nodePointer0.isNode());
      assertTrue(nodePointer0.isRoot());
      assertFalse(nodePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nodePointer0.getIndex());
      assertNull(qName0.getPrefix());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertEquals("T", nodeNameTest0.toString());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("T", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertNotNull(nodePointer0);
      
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, nodePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Constant constant0 = new Constant("5");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.forLanguageTag("5");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("5", "5");
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(variablePointer0);
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(nodePointer0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(nodePointer0, qName0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl1).getLocale();
      doReturn((Pointer) null).when(jXPathContextReferenceImpl1).getPointerByID(anyString());
      doReturn(beanPointer0).when(jXPathContextReferenceImpl1).getContextPointer();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl1).getNamespaceResolver();
      QName qName1 = new QName("5", "substring");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("substring", qName1.getName());
      assertEquals("5:substring", qName1.toString());
      assertEquals("5", qName1.getPrefix());
      assertNotNull(qName1);
      
      Locale locale1 = Locale.PRC;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertNotNull(locale1);
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newNodePointer(qName1, jXPathContextReferenceImpl1, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("substring", qName1.getName());
      assertEquals("5:substring", qName1.toString());
      assertEquals("5", qName1.getPrefix());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNull(beanPointer1.getNamespaceURI());
      assertNotNull(beanPointer1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("substring", qName1.getName());
      assertEquals("5:substring", qName1.toString());
      assertEquals("5", qName1.getPrefix());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("substring", qName1.getName());
      assertEquals("5:substring", qName1.toString());
      assertEquals("5", qName1.getPrefix());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, "substring", beanPointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("substring", qName1.getName());
      assertEquals("5:substring", qName1.toString());
      assertEquals("5", qName1.getPrefix());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("substring", qName1.getName());
      assertEquals("5:substring", qName1.toString());
      assertEquals("5", qName1.getPrefix());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionStringLength(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(1.0, (double)double0, 0.01);
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("substring", qName1.getName());
      assertEquals("5:substring", qName1.toString());
      assertEquals("5", qName1.getPrefix());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(double0);
      
      Object object0 = coreFunction0.functionID(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertNotSame(qName0, qName1);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(qName1, qName0);
      assertNotSame(locale1, locale0);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("5:5", qName0.toString());
      assertEquals("5", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals("substring", qName1.getName());
      assertEquals("5:substring", qName1.toString());
      assertEquals("5", qName1.getPrefix());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertFalse(beanPointer1.isContainer());
      assertTrue(beanPointer1.isRoot());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertEquals(1, beanPointer1.getLength());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer1.isNode());
      assertNull(beanPointer1.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$ 6s-iYX");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("$ 6s-iYX");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      String string0 = constant0.toString();
      assertEquals("'$ 6s-iYX'", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(2569, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2569, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2569, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2569, coreFunction0.getFunctionCode());
      assertNull(object1);
      
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("'$ 6s-iYX'");
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'$ 6s-iYX'", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(26, nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'$ 6s-iYX'", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(26, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(4465, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals(4465, step1.getAxis());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'$ 6s-iYX'", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("'$ 6s-iYX'", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(nodeNameTest1);
      
      Step step2 = new Step(25, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("'$ 6s-iYX'", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(25, step2.getAxis());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-959), nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("'$ 6s-iYX'", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals((-959), step3.getAxis());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(2569, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("'$ 6s-iYX'", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(2569, step4.getAxis());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-603), nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("'$ 6s-iYX'", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals((-603), step5.getAxis());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-959), nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals(2, expressionArray0.length);
      assertEquals((-959), step6.getAxis());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'$ 6s-iYX'", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(1, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("'$ 6s-iYX'", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, step7.getAxis());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step(1, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step5));
      assertEquals(2, expressionArray0.length);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("'$ 6s-iYX'", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(1, step8.getAxis());
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 35, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("'$ 6s-iYX'", qName0.getName());
      assertEquals("'$ 6s-iYX'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("'$ 6s-iYX'", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(evalContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2569()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002 > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      QName qName0 = new QName("h9NI){N_8$,!fMi h");
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){N_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){N_8$,!fMi h", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CoreFunction coreFunction0 = new CoreFunction((-2020), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2020), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2020), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2020), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "h9NI){N_8$,!fMi h", (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){N_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){N_8$,!fMi h", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){N_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){N_8$,!fMi h", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNull(qName0.getPrefix());
      assertEquals("h9NI){N_8$,!fMi h", qName0.toString());
      assertEquals("h9NI){N_8$,!fMi h", qName0.getName());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2020), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1501), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1501), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1501), coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("T");
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "7A'k{je/#\" NLN");
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("T", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("T", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("T", nodeNameTest1.toString());
      assertNotNull(nodeNameTest1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("T", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1501), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1501), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionContains((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean1));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1501), coreFunction1.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionSubstringAfter(descendantContext0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("T", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1501), coreFunction1.getFunctionCode());
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionStartsWith(descendantContext0);
      assertTrue(object2.equals((Object)boolean0));
      assertTrue(object2.equals((Object)boolean1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals(false, object2);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1501), coreFunction0.getFunctionCode());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("T", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(object2);
      
      Object object3 = coreFunction0.functionConcat(namespaceContext0);
      assertFalse(object3.equals((Object)object1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("NaN7A'k{je/#\" NLN", object3);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1501), coreFunction0.getFunctionCode());
      assertEquals("T", qName0.getName());
      assertEquals("T", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("T", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Constant constant0 = new Constant("5");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.forLanguageTag("5");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl1).getLocale();
      doReturn((Pointer) null).when(jXPathContextReferenceImpl1).getContextPointer();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl1).getNamespaceResolver();
      QName qName0 = new QName("5", "substring");
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale1 = Locale.PRC;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl1, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, "substring", beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(locale1, locale0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionStringLength(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1.0, (double)double0, 0.01);
      assertNotSame(locale1, locale0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("substring", qName0.getName());
      assertEquals("5", qName0.getPrefix());
      assertEquals("5:substring", qName0.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(locale0).when(jXPathContextReferenceImpl0).getLocale();
      doReturn(namespaceResolver0, namespaceResolver0).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale1 = Locale.PRC;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertNotNull(locale1);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertFalse(namespaceResolver0.isSealed());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertFalse(namespaceResolver0.isSealed());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertFalse(namespaceResolver0.isSealed());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "substring", beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertFalse(namespaceResolver0.isSealed());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertTrue(namespaceResolver0.isSealed());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionLang(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(boolean0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertTrue(namespaceResolver0.isSealed());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(1182, (Expression[]) null);
      assertEquals(1182, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1182, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("Cannot set ", "7A'k{je/#\" NLN");
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNotNull(qName0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("dJ");
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null, (Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "O0.+'");
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("Cannot set :7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O0.+'", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Cannot set :7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O0.+'", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      JXPathContext jXPathContext0 = ancestorContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Cannot set :7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O0.+'", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "7A'k{je/#\" NLN", beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Cannot set :7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O0.+'", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext1.equals((Object)rootContext0));
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Cannot set :7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O0.+'", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotNull(rootContext1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.equals((Object)rootContext1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext1.equals((Object)rootContext0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(rootContext0, rootContext1);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(rootContext1, rootContext0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Cannot set :7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O0.+'", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, beanPointer0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.equals((Object)rootContext1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Cannot set :7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O0.+'", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertNotNull(jXPathContextReferenceImpl3);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.equals((Object)rootContext1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(rootContext0, rootContext1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals("Cannot set :7A'k{je/#\" NLN", qName0.toString());
      assertEquals("Cannot set ", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("-dJ", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("dJ#", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("dJ#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("dJ", decimalFormat0.getPositivePrefix());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("Cannot set :7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("O0.+'", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(initialContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(ancestorContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Constant constant0 = new Constant("x.4gu/%(}]");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[5], expressionArray0[0]);
      assertEquals(8, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[6] = (Expression) coreOperationMod0;
      expressionArray0[7] = (Expression) constant0;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(iterator0);
      
      CoreFunction coreFunction0 = new CoreFunction(111, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(111, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[15];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(15, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertNotNull(unionContext0);
      
      UnionContext unionContext1 = new UnionContext(evalContextArray0[1], evalContextArray0);
      assertFalse(unionContext1.equals((Object)unionContext0));
      assertEquals(15, evalContextArray0.length);
      assertTrue(unionContext1.isChildOrderingRequired());
      assertEquals(1, unionContext1.getDocumentOrder());
      assertEquals(0, unionContext1.getPosition());
      assertNotNull(unionContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(unionContext1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNotNull(nodeNameTest1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionContains((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionStartsWith(descendantContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertTrue(object1.equals((Object)boolean0));
      assertEquals(false, object1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      QName qName0 = new QName("2Hh71TsU]|X\"%DX$w", "");
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale1 = Locale.PRC;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, locale1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) namespaceResolver0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(namespaceResolver0.isSealed());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, (Object) null, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(126, processingInstructionTest0, (Expression[]) null);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(126, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(expressionPath0);
      
      AncestorContext ancestorContext0 = (AncestorContext)expressionPath0.createContextForStep(rootContext0, 10, processingInstructionTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "y^26");
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y^26", nodeNameTest0.getNamespaceURI());
      assertEquals("2Hh71TsU]|X\"%DX$w:", nodeNameTest0.toString());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext1 = new AncestorContext(ancestorContext0, true, nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y^26", nodeNameTest0.getNamespaceURI());
      assertEquals("2Hh71TsU]|X\"%DX$w:", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertNotNull(ancestorContext1);
      
      RootContext rootContext1 = ancestorContext1.getRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertNotSame(ancestorContext0, ancestorContext1);
      assertNotSame(ancestorContext1, ancestorContext0);
      assertSame(rootContext1, rootContext0);
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y^26", nodeNameTest0.getNamespaceURI());
      assertEquals("2Hh71TsU]|X\"%DX$w:", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertNotNull(rootContext1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertSame(rootContext0, rootContext1);
      assertNotSame(ancestorContext0, ancestorContext1);
      assertNotSame(ancestorContext1, ancestorContext0);
      assertSame(rootContext1, rootContext0);
      assertSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y^26", nodeNameTest0.getNamespaceURI());
      assertEquals("2Hh71TsU]|X\"%DX$w:", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertNotNull(jXPathContextReferenceImpl3);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl4 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, ancestorContext0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl4.equals((Object)jXPathContextReferenceImpl2));
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl4.isLenient());
      assertNotNull(jXPathContextReferenceImpl4);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl5 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl3, "substring", beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl2));
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y^26", nodeNameTest0.getNamespaceURI());
      assertEquals("2Hh71TsU]|X\"%DX$w:", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertFalse(jXPathContextReferenceImpl5.isLenient());
      assertNotNull(jXPathContextReferenceImpl5);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl5.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl5));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl5));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl5));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(ancestorContext0.equals((Object)ancestorContext1));
      assertFalse(ancestorContext1.equals((Object)ancestorContext0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl5));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl5.equals((Object)jXPathContextReferenceImpl2));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl5);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl5);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl5);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl4);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertSame(rootContext0, rootContext1);
      assertNotSame(ancestorContext0, ancestorContext1);
      assertNotSame(ancestorContext1, ancestorContext0);
      assertSame(rootContext1, rootContext0);
      assertSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl5);
      assertNotSame(jXPathContextReferenceImpl5, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl5, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl5, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl5, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl5, jXPathContextReferenceImpl2);
      assertEquals(1, stepArray0.length);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("y^26", nodeNameTest0.getNamespaceURI());
      assertEquals("2Hh71TsU]|X\"%DX$w:", nodeNameTest0.toString());
      assertEquals((-1), ancestorContext1.getDocumentOrder());
      assertEquals(0, ancestorContext1.getPosition());
      assertTrue(ancestorContext1.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertFalse(jXPathContextReferenceImpl5.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      InitialContext initialContext1 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl5));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(initialContext1.equals((Object)initialContext0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl4));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl5));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl5));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl4));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl5);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl4);
      assertNotSame(initialContext1, initialContext0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl4);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl5);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl5);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl4);
      assertSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertSame(rootContext0, rootContext1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("2Hh71TsU]|X\"%DX$w", qName0.getPrefix());
      assertEquals("2Hh71TsU]|X\"%DX$w:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertEquals(0, initialContext1.getPosition());
      assertEquals(0, initialContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(initialContext1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(initialContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 2Hh71TsU]|X\"%DX$w:
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "E*`^H\"O&+~V");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(890, variablePointerFactory0.getOrder());
      assertNotNull(variablePointerFactory0);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, object0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      NodePointer nodePointer0 = variablePointerFactory0.createNodePointer((NodePointer) beanPointer0, qName0, (Object) locale0);
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(nodePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-46), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-46), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertSame(expression0, constant0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-46), coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertNotNull(expression0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, expression0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-46), coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreFunction coreFunction1 = new CoreFunction(554, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(554, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(554, coreFunction1.getFunctionCode());
      
      QName qName0 = new QName("Incorrect number of arguments: ");
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Incorrect number of arguments: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Incorrect number of arguments: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("Incorrect number of arguments: ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertNotNull(nodeNameTest1);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Incorrect number of arguments: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Incorrect number of arguments: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction1.functionContains(namespaceContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(554, coreFunction1.getFunctionCode());
      assertEquals("Incorrect number of arguments", qName0.getPrefix());
      assertEquals("Incorrect number of arguments: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Incorrect number of arguments: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionStartsWith((EvalContext) null);
      assertFalse(object1.equals((Object)boolean0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(true, object1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(554, coreFunction1.getFunctionCode());
      assertNotNull(object1);
      
      Expression expression1 = coreFunction1.getArg1();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertSame(expression1, constant0);
      assertSame(expression1, expression0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(expression1.computeContextDependent());
      assertFalse(expression1.isContextDependent());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(554, coreFunction1.getFunctionCode());
      assertNotNull(expression1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Constant constant0 = new Constant("5");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertFalse(namespaceResolver0.isSealed());
      assertNotNull(namespaceResolver0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(locale0).when(jXPathContextReferenceImpl0).getLocale();
      doReturn(namespaceResolver0, namespaceResolver0).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("5", "substring");
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale1 = Locale.PRC;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertNotNull(locale1);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "substring", beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(namespaceResolver0.isSealed());
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotNull(initialContext0);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionLang(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(boolean0);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertTrue(namespaceResolver0.isSealed());
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotNull(boolean0);
      
      Double double0 = (Double)coreFunction0.functionStringLength((EvalContext) null);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(double0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1392));
      assertEquals((-1392), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(103, nodeTypeTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-1392), nodeTypeTest0.getNodeType());
      assertEquals(103, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2327), nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertEquals((-1392), nodeTypeTest0.getNodeType());
      assertEquals((-2327), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2327), nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals((-1392), nodeTypeTest0.getNodeType());
      assertEquals((-2327), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-2446), nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertEquals((-1392), nodeTypeTest0.getNodeType());
      assertEquals((-2446), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(103, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertEquals(6, expressionArray0.length);
      assertEquals(103, step4.getAxis());
      assertEquals((-1392), nodeTypeTest0.getNodeType());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-721), nodeTypeTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertEquals(6, expressionArray0.length);
      assertEquals((-721), step5.getAxis());
      assertEquals((-1392), nodeTypeTest0.getNodeType());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(6, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[4] = (Expression) coreOperationAnd0;
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-1392), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1392), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, (-1124), nodeTypeTest0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotSame(constant1, constant0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals((-1392), nodeTypeTest0.getNodeType());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNull(evalContext0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      assertEquals(6, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      coreFunction0.functionStartsWith(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Constant constant0 = new Constant("5");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("5", "substring");
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, "substring", beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("5:substring", qName0.toString());
      assertEquals("5", qName0.getPrefix());
      assertEquals("substring", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2007), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2007), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionNull((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2007), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2007), coreFunction0.getFunctionCode());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      coreFunction0.args = expressionArray0;
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2007), coreFunction0.getFunctionCode());
      
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Constant constant0 = new Constant("$");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Byte byte0 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant1, constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      Constant constant2 = new Constant("$");
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertNotNull(constant2);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant2, coreOperationMod0);
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant2;
      expressionArray0[1] = (Expression) constant2;
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1040), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1040), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[K");
      assertEquals("[K", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-203), processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("[K", processingInstructionTest0.getTarget());
      assertEquals((-203), step0.getAxis());
      assertNotNull(step0);
      
      Step step1 = new Step(81, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals("[K", processingInstructionTest0.getTarget());
      assertEquals(81, step1.getAxis());
      assertNotNull(step1);
      
      Step step2 = new Step(41, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals("[K", processingInstructionTest0.getTarget());
      assertEquals(41, step2.getAxis());
      assertNotNull(step2);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(expressionPath0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps(predicateContext0);
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertSame(predicateContext0, evalContext0);
      assertSame(evalContext0, predicateContext0);
      assertNotSame(constant1, constant2);
      assertNotSame(constant1, constant0);
      assertNotSame(constant2, constant0);
      assertNotSame(constant2, constant1);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(evalContext0);
      
      ChildContext childContext0 = new ChildContext(evalContext0, processingInstructionTest0, false, false);
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("[K", processingInstructionTest0.getTarget());
      assertNotNull(childContext0);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals("0", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1040), coreFunction0.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Expression[] expressionArray0 = new Expression[3];
      Byte byte0 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-603), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(49, processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(49, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-603), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-603), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-134217536), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals((-134217536), step2.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(step2);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNotNull(expressionPath0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-603()(21, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 mod org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("local-name", string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("7A'k{je/#\" NLN");
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNotNull(nodeNameTest1);
      
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, nodeNameTest1);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.functionContains(namespaceContext0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Constant constant0 = new Constant("!0/;?wvYq0");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "!0/;?wvYq0");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      String string0 = (String)coreFunction0.computeValue(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("\uFFFD", string0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('!0/;?wvYq0', '!0/;?wvYq0', '!0/;?wvYq0')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1153, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1153, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1077), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-1077), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionSum((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-1077), coreFunction1.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant constant0 = new Constant("$");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = (-1);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("w~LP-9bK-\"\"A4LnSe", "y");
      assertEquals("y", qName0.getName());
      assertEquals("w~LP-9bK-\"\"A4LnSe:y", qName0.toString());
      assertEquals("w~LP-9bK-\"\"A4LnSe", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("y", qName0.getName());
      assertEquals("w~LP-9bK-\"\"A4LnSe:y", qName0.toString());
      assertEquals("w~LP-9bK-\"\"A4LnSe", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(1221, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1221, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1221, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("7A'k{je/#\" NLN", object0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('7A'k{je/#\" NLN')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertNotNull(nodeNameTest1);
      
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, nodeNameTest1);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.functionContains(namespaceContext0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NL;");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("7A'k{je/#\" NL;");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      String string0 = constant1.toString();
      assertFalse(constant1.equals((Object)constant0));
      assertEquals("'7A'k{je/#\" NL;'", string0);
      assertNotSame(constant1, constant0);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(string0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant1, expressionArray0, stepArray0);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(8, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant1;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2296), expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals((-2296), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("org.apache.commons.jxpath.ClassFunctions", "org.apache.commons.jxpath.ClassFunctions");
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ClassFunctions:org.apache.commons.jxpath.ClassFunctions", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ClassFunctions:org.apache.commons.jxpath.ClassFunctions", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ClassFunctions:org.apache.commons.jxpath.ClassFunctions", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2062, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2062, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, extensionFunction0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ClassFunctions:org.apache.commons.jxpath.ClassFunctions", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[0], beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ClassFunctions:org.apache.commons.jxpath.ClassFunctions", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ClassFunctions:org.apache.commons.jxpath.ClassFunctions", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(initialContext0, nodeTypeTest0, true);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ClassFunctions", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ClassFunctions:org.apache.commons.jxpath.ClassFunctions", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      CoreFunction coreFunction1 = new CoreFunction(3242, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3242, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "", beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("JXPath internal error: compareChildNodes called for ");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("JXPath internal error: compareChildNodes called for ", qName1.toString());
      assertEquals(" compareChildNodes called for ", qName1.getName());
      assertEquals("JXPath internal error", qName1.getPrefix());
      assertNotNull(qName1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("JXPath internal error: compareChildNodes called for ", qName1.toString());
      assertEquals(" compareChildNodes called for ", qName1.getName());
      assertEquals("JXPath internal error", qName1.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName1.toString());
      assertEquals(" compareChildNodes called for ", qName1.getName());
      assertEquals("JXPath internal error", qName1.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName1.toString());
      assertEquals(" compareChildNodes called for ", qName1.getName());
      assertEquals("JXPath internal error", qName1.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertNotNull(rootContext1);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName1.toString());
      assertEquals(" compareChildNodes called for ", qName1.getName());
      assertEquals("JXPath internal error", qName1.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: JXPath internal error: compareChildNodes called for 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NL;");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "7A'k{je/#\" NL;");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean('7A'k{je/#\" NL;', null, '7A'k{je/#\" NL;')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("7A'k{je/#\" NLN", "7A'k{je/#\" NLN");
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(32, nodeNameTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertEquals(32, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(108, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertEquals(108, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(88, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertEquals(88, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(108, nodeNameTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertEquals(108, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(8, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertEquals(8, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(88, nodeNameTest0, (Expression[]) null);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertEquals(88, step5.getAxis());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-5), nodeNameTest0, (Expression[]) null);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertEquals((-5), step6.getAxis());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(8, nodeNameTest0, (Expression[]) null);
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertEquals(8, step7.getAxis());
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(8, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(823, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(823, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.getPrefix());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("7A'k{je/#\" NLN:7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, evalContextArray0.length);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Expression expression0 = coreFunction0.getArg2();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(expression0, constant0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertNotNull(expression0);
      
      expressionArray1[0] = expression0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray1[3] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[0], expressionArray1[2]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray1[4] = (Expression) coreOperationEqual0;
      expressionArray1[5] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("7A'k{je/#\" NLN", object0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("", "normalize-space");
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "normalize-space", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "normalize-space");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "+02u6&tpd}Daeb9V");
      assertTrue(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, locale0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, beanPointer0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertEquals(1, evalContextArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("7A'k{je/#\" NLN");
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "vHzWBsR_A-xCX@hk");
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("vHzWBsR_A-xCX@hk", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(514, nodeNameTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("vHzWBsR_A-xCX@hk", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("7A'k{je/#\" NLN", nodeNameTest0.toString());
      assertEquals(514, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[8] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2003), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2003), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1711), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1711), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1711), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1711), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction((-1258), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-1258), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Constant constant0 = new Constant("<");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("<", object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      int int0 = 27;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      coreOperationAdd0.args = expressionArray0;
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertNotNull(parentContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertNotNull(nodeSetContext0);
      
      // Undeclared exception!
      coreFunction0.functionSubstring(parentContext0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1652), (Expression[]) null);
      assertEquals((-1652), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1652));
      assertEquals((-1652), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1652), nodeTypeTest0, (Expression[]) null);
      assertEquals((-1652), nodeTypeTest0.getNodeType());
      assertEquals((-1652), step0.getAxis());
      assertNotNull(step0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Constant constant0 = new Constant("<");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")r~\"C[(3)c");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName(")r~\"C[(3)c", ")r~\"C[(3)c");
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(30, nodeNameTest0, (Expression[]) null);
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(30, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(30, nodeNameTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(30, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(30, nodeNameTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(30, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(26, nodeNameTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(26, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(26, nodeNameTest0, (Expression[]) null);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertEquals(26, step4.getAxis());
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(853, nodeNameTest0, (Expression[]) null);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertEquals(853, step5.getAxis());
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(6, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(expressionPath0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(precedingOrFollowingContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeSetContext0);
      
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, nodeNameTest0);
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(")r~\"C[(3)c", qName0.getPrefix());
      assertEquals(")r~\"C[(3)c", qName0.getName());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", qName0.toString());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(")r~\"C[(3)c:)r~\"C[(3)c", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        expressionPath0.createContextForStep(parentContext0, 114, nodeNameTest0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Constant constant0 = new Constant("We");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionStringLength((EvalContext) null);
      assertEquals(2.0, object1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Constant constant0 = new Constant(" ]!63{p*X#.C?H");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "vH'Be p8)!d8cY~gs";
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vH'Be p8)!d8cY~gs");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("?W$Tral6e6ON:kE~2h", (String) null);
      assertEquals("?W$Tral6e6ON:kE~2h", qName0.getPrefix());
      assertEquals("?W$Tral6e6ON:kE~2h:null", qName0.toString());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("?W$Tral6e6ON:kE~2h", qName0.getPrefix());
      assertEquals("?W$Tral6e6ON:kE~2h:null", qName0.toString());
      assertNull(qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertEquals("?W$Tral6e6ON:kE~2h", qName0.getPrefix());
      assertEquals("?W$Tral6e6ON:kE~2h:null", qName0.toString());
      assertNull(qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(610, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(610, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationMod0);
      assertEquals(1, expressionArray0.length);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(437, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(437, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(102, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(102, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(iterator0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationAdd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName(")BM<se(a{0{U&[)");
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(")BM<se(a{0{U&[)");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(512, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(512, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg1();
      assertSame(coreOperationAdd1, coreOperationAdd0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(512, coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertNotNull(coreOperationAdd1);
      
      ExtensionFunction extensionFunction1 = (ExtensionFunction)coreFunction0.getArg3();
      assertSame(extensionFunction1, extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(512, coreFunction0.getFunctionCode());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ")BM<se(a{0{U&[)");
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(30, nodeNameTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(30, step0.getAxis());
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.toString());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction1, expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(512, coreFunction0.getFunctionCode());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(expressionPath0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.toString());
      assertNotNull(descendantContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeNameTest0);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.toString());
      assertNotNull(namespaceContext0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertNotNull(nodeNameTest1);
      
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.toString());
      assertNotNull(parentContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, extensionFunction0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals(4, expressionArray0.length);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.toString());
      assertNotNull(predicateContext0);
      
      PredicateContext predicateContext1 = (PredicateContext)expressionPath0.evalSteps(predicateContext0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(predicateContext1.equals((Object)predicateContext0));
      assertSame(extensionFunction0, extensionFunction1);
      assertSame(extensionFunction1, extensionFunction0);
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertNotSame(predicateContext0, predicateContext1);
      assertNotSame(predicateContext1, predicateContext0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals(")BM<se(a{0{U&[)", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")BM<se(a{0{U&[)", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(512, coreFunction0.getFunctionCode());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest0.toString());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(")BM<se(a{0{U&[)", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext1.getPosition());
      assertFalse(predicateContext1.isChildOrderingRequired());
      assertEquals(0, predicateContext1.getDocumentOrder());
      assertNotNull(predicateContext1);
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(predicateContext1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("boolean");
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertEquals("boolean", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertEquals("boolean", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(7, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertEquals("boolean", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertFalse(expression0.equals((Object)extensionFunction1));
      assertSame(expression0, extensionFunction0);
      assertNotSame(expression0, extensionFunction1);
      assertEquals(7, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      assertNotNull(expression0);
      
      expressionArray0[2] = expression0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expression0, expression0);
      assertFalse(expression0.equals((Object)extensionFunction1));
      assertEquals(7, expressionArray0.length);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[1]);
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(7, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertEquals("boolean", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertEquals("boolean", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[5] = (Expression) variableReference0;
      Expression expression1 = coreFunction0.getArg3();
      assertFalse(expression1.equals((Object)extensionFunction1));
      assertNotSame(expression1, extensionFunction1);
      assertSame(expression1, extensionFunction0);
      assertSame(expression1, expression0);
      assertEquals(7, expressionArray0.length);
      assertTrue(expression1.computeContextDependent());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(expression1);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], expression1);
      assertFalse(expression1.equals((Object)extensionFunction1));
      assertEquals(7, expressionArray0.length);
      assertTrue(expression1.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, coreOperationGreaterThanOrEqual0);
      assertFalse(expression1.equals((Object)extensionFunction1));
      assertEquals(7, expressionArray0.length);
      assertTrue(expression1.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNull(qName0.getPrefix());
      assertEquals("boolean", qName0.getName());
      assertEquals("boolean", qName0.toString());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreFunction coreFunction1 = new CoreFunction(1024, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(1024, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat('', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAnd0);
      assertEquals(4, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      evalContextArray0[1] = (EvalContext) predicateContext0;
      evalContextArray0[1] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(5, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      coreFunction0.functionConcat(evalContextArray0[1]);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      QName qName0 = new QName("7A'k{je/#\" NLN");
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("7A'k{je/#\" NLN", qName0.getName());
      assertEquals("7A'k{je/#\" NLN", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(1024, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNotNull(nodeSetContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      int int0 = nodeSetContext0.getCurrentPosition();
      assertEquals(0, int0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('7A'k{je/#\" NLN', '7A'k{je/#\" NLN', '7A'k{je/#\" NLN', '7A'k{je/#\" NLN', '7A'k{je/#\" NLN')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      byte[] byteArray0 = new byte[1];
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(iterator0);
      
      byteArray0[0] = (byte)12;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)12}, byteArray0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(38, (Expression[]) null);
      assertEquals(38, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertNotNull(decimalFormat0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormat0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(1, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName(".0", "@R<2S");
      assertEquals("@R<2S", qName0.getName());
      assertEquals(".0", qName0.getPrefix());
      assertEquals(".0:@R<2S", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("@R<2S", qName0.getName());
      assertEquals(".0", qName0.getPrefix());
      assertEquals(".0:@R<2S", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(variablePointer0);
      
      VariablePointer variablePointer1 = (VariablePointer)variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(variablePointer0, variablePointer1);
      assertSame(variablePointer1, variablePointer0);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("@R<2S", qName0.getName());
      assertEquals(".0", qName0.getPrefix());
      assertEquals(".0:@R<2S", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer1.isRoot());
      assertNotNull(variablePointer1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("@R<2S", qName0.getName());
      assertEquals(".0", qName0.getPrefix());
      assertEquals(".0:@R<2S", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer1.isNode());
      assertFalse(variablePointer1.isAttribute());
      assertNull(variablePointer1.getNamespaceURI());
      assertTrue(variablePointer1.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer1.getIndex());
      assertTrue(variablePointer1.isContainer());
      assertTrue(variablePointer1.isRoot());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "7A'k{je/#\" NLN");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, expressionArray0[2], locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, expressionArray0.length);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "7A'k{je/#\" NLN", beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"7A'k{je/#\" NLN\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Expression[] expressionArray0 = new Expression[3];
      Byte byte0 = new Byte((byte)21);
      assertEquals((byte)21, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-603), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(49, processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(49, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-603), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-603), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step2 = new Step((-134217536), processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray1.length);
      assertEquals((-134217536), step2.getAxis());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNull(evalContext0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, true);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(childContext0);
      
      Object object0 = coreFunction0.functionTranslate(childContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("21", object0);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(3, expressionArray0.length);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-603), coreFunction0.getFunctionCode());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = null;
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = null;
      try {
        jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "", variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-4096), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-4096), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertNotNull(decimalFormat0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormat0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      QName qName0 = new QName(".0", "=<&N");
      assertEquals("=<&N", qName0.getName());
      assertEquals(".0:=<&N", qName0.toString());
      assertEquals(".0", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale1 = Locale.KOREA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "&(Ss|c", locale1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("=<&N", qName0.getName());
      assertEquals(".0:=<&N", qName0.toString());
      assertEquals(".0", qName0.getPrefix());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("=<&N", qName0.getName());
      assertEquals(".0:=<&N", qName0.toString());
      assertEquals(".0", qName0.getPrefix());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("=<&N", qName0.getName());
      assertEquals(".0:=<&N", qName0.toString());
      assertEquals(".0", qName0.getPrefix());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(locale1, locale0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("=<&N", qName0.getName());
      assertEquals(".0:=<&N", qName0.toString());
      assertEquals(".0", qName0.getPrefix());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(string0);
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("=<&N", qName0.getName());
      assertEquals(".0:=<&N", qName0.toString());
      assertEquals(".0", qName0.getPrefix());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1969), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(3084, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(3084, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      String string0 = coreFunction0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("unknownFunction-1969()('')", string0);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(string0);
      
      CoreFunction coreFunction3 = new CoreFunction(3084, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(1, expressionArray0.length);
      assertEquals(3084, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction3));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction3);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      Object object1 = coreFunction3.functionNot((EvalContext) null);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(true, object1);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertEquals(3084, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionBoolean((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction3));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object2.equals((Object)object1));
      assertEquals(false, object2);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction3);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object2);
      
      CoreFunction coreFunction4 = new CoreFunction(18, expressionArray0);
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction4.getArgumentCount());
      assertEquals(18, coreFunction4.getFunctionCode());
      assertNotNull(coreFunction4);
      
      Object object3 = coreFunction4.functionStringLength((EvalContext) null);
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertEquals(0.0, object3);
      assertNotSame(coreFunction4, coreFunction0);
      assertNotSame(coreFunction4, coreFunction1);
      assertNotSame(coreFunction4, coreFunction2);
      assertNotSame(coreFunction4, coreFunction3);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction4.getArgumentCount());
      assertEquals(18, coreFunction4.getFunctionCode());
      assertNotNull(object3);
      
      Object object4 = coreFunction4.functionNormalizeSpace((EvalContext) null);
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(object4.equals((Object)string0));
      assertEquals("", object4);
      assertNotSame(coreFunction4, coreFunction0);
      assertNotSame(coreFunction4, coreFunction1);
      assertNotSame(coreFunction4, coreFunction2);
      assertNotSame(coreFunction4, coreFunction3);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction4.getArgumentCount());
      assertEquals(18, coreFunction4.getFunctionCode());
      assertNotNull(object4);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeNameTest0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(selfContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThan0, variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], (Expression) null);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(29, nodeTypeTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(29, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(29, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals(29, step1.getAxis());
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step2 = new Step(29, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(29, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(29, nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(9, expressionArray0.length);
      assertEquals(29, step3.getAxis());
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(29, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(29, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(29, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(29, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(29, nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(29, step6.getAxis());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-241), nodeTypeTest0, expressionArray0);
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertEquals(9, expressionArray0.length);
      assertEquals((-241), step7.getAxis());
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step((-1483), nodeNameTest0, expressionArray0);
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step4));
      assertEquals(9, expressionArray0.length);
      assertEquals((-1483), step8.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[5] = (Expression) expressionPath0;
      QName qName1 = new QName("concat");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("concat", qName1.getName());
      assertEquals("concat", qName1.toString());
      assertNull(qName1.getPrefix());
      assertNotNull(qName1);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(9, expressionArray0.length);
      assertEquals("concat", qName1.getName());
      assertEquals("concat", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray0[0]);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(9, expressionArray0.length);
      assertEquals("concat", qName1.getName());
      assertEquals("concat", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[4], variableReference0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(9, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[7] = (Expression) coreOperationDivide0;
      Step[] stepArray1 = new Step[7];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step8;
      stepArray1[1] = step1;
      stepArray1[2] = step1;
      stepArray1[3] = step3;
      stepArray1[4] = step0;
      stepArray1[5] = step7;
      stepArray1[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray1);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertEquals(7, stepArray1.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[8] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-241), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-241), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNull(object1);
      
      Object object2 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(0.0, object2);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1969()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, evalContextArray0.length);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(6, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Constant constant0 = new Constant("A");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertNotNull(decimalFormat0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormat0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("()", "()");
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotNull(rootContext1);
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext1, false, (NodeTest) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      RootContext rootContext2 = ancestorContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("():()", qName0.toString());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertNotNull(rootContext2);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(rootContext2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '():()'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      QName qName0 = new QName("unknownFunction", "Y1]");
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("Y1]", qName0.getName());
      assertEquals("unknownFunction:Y1]", qName0.toString());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "Y1]", locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("Y1]", qName0.getName());
      assertEquals("unknownFunction:Y1]", qName0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("Y1]", qName0.getName());
      assertEquals("unknownFunction:Y1]", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("Y1]", qName0.getName());
      assertEquals("unknownFunction:Y1]", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, beanPointer0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("Y1]", qName0.getName());
      assertEquals("unknownFunction:Y1]", qName0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("Y1]", qName0.getName());
      assertEquals("unknownFunction:Y1]", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("Y1]", qName0.getName());
      assertEquals("unknownFunction:Y1]", qName0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, evalContextArray0.length);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertNotNull(unionContext0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(945, processingInstructionTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(945, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-542), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-542), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2765, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(2765, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-542), processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-542), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(945, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(945, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(2765, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertEquals(4, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(2765, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-542), processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertEquals(4, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-542), step6.getAxis());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(7, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      Integer integer0 = new Integer(945);
      assertEquals(945, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      Constant constant1 = new Constant((String) null);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      Constant constant2 = new Constant("Error: Ignoring invalid lexical state : ");
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertNotNull(constant2);
      
      expressionArray0[3] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction(945, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(945, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-3004), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3004), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      assertEquals(11, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-2472), nodeTypeTest0, (Expression[]) null);
      assertEquals(11, nodeTypeTest0.getNodeType());
      assertEquals((-2472), step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("\"translate\"", "\"translate\"");
      assertEquals("\"translate\":\"translate\"", qName0.toString());
      assertEquals("\"translate\"", qName0.getPrefix());
      assertEquals("\"translate\"", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("\"translate\":\"translate\"", qName0.toString());
      assertEquals("\"translate\"", qName0.getPrefix());
      assertEquals("\"translate\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals("\"translate\":\"translate\"", qName0.toString());
      assertEquals("\"translate\"", qName0.getPrefix());
      assertEquals("\"translate\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(2226, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(2226, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[3]);
      assertEquals(4, expressionArray0.length);
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2280), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-2280), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionString((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-2280), coreFunction1.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object1.equals((Object)object0));
      assertEquals("", object1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      boolean boolean1 = unionContext0.nextSet();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("", "OkKS8Ri& TJh");
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(557, nodeNameTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertEquals(557, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertEquals(3, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[2] = step1;
      Step step2 = new Step(557, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertEquals(557, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[3] = step2;
      Step step3 = new Step(982, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertEquals(982, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[4] = step3;
      Step step4 = new Step(8, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertEquals(8, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[5] = step4;
      Step step5 = new Step(974, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertEquals(974, step5.getAxis());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNotNull(step5);
      
      stepArray0[6] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      Step[] stepArray1 = new Step[0];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      LocationPath locationPath0 = new LocationPath(false, stepArray1);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertEquals(0, stepArray1.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertEquals(0, stepArray1.length);
      assertFalse(locationPath0.isAbsolute());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      nameAttributeTest0.args = expressionArray0;
      assertFalse(locationPath0.isAbsolute());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray1.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertFalse(stepArray0.equals((Object)stepArray1));
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContext jXPathContext0 = null;
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(890, variablePointerFactory0.getOrder());
      assertNotNull(variablePointerFactory0);
      
      QName qName0 = new QName("X-#%k}`lUCY<i9l", "X-#%k}`lUCY<i9l");
      assertEquals("X-#%k}`lUCY<i9l:X-#%k}`lUCY<i9l", qName0.toString());
      assertEquals("X-#%k}`lUCY<i9l", qName0.getName());
      assertEquals("X-#%k}`lUCY<i9l", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      NodePointer nodePointer0 = variablePointerFactory0.createNodePointer(qName0, (Object) nameAttributeTest0, locale0);
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotSame(stepArray1, stepArray0);
      assertEquals(0, stepArray1.length);
      assertEquals(890, variablePointerFactory0.getOrder());
      assertEquals("X-#%k}`lUCY<i9l:X-#%k}`lUCY<i9l", qName0.toString());
      assertEquals("X-#%k}`lUCY<i9l", qName0.getName());
      assertEquals("X-#%k}`lUCY<i9l", qName0.getPrefix());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(locationPath0.isAbsolute());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[0], (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(5, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(5, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(5, expressionArray0.length);
      assertEquals("X-#%k}`lUCY<i9l:X-#%k}`lUCY<i9l", qName0.toString());
      assertEquals("X-#%k}`lUCY<i9l", qName0.getName());
      assertEquals("X-#%k}`lUCY<i9l", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertNotNull(evalContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(890);
      assertEquals(890, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals("UNKNOWN()", string0);
      assertEquals(890, nodeTypeTest0.getNodeType());
      assertNotNull(string0);
      
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, nodeTypeTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(5, expressionArray0.length);
      assertEquals("X-#%k}`lUCY<i9l:X-#%k}`lUCY<i9l", qName0.toString());
      assertEquals("X-#%k}`lUCY<i9l", qName0.getName());
      assertEquals("X-#%k}`lUCY<i9l", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(890, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      coreFunction0.computeValue(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      Integer integer0 = new Integer(632);
      assertEquals(632, (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) integer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      QName qName0 = new QName("Factory did not assign a collection to variable '", "");
      assertEquals("", qName0.getName());
      assertEquals("Factory did not assign a collection to variable ':", qName0.toString());
      assertEquals("Factory did not assign a collection to variable '", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("Factory did not assign a collection to variable ':", qName0.toString());
      assertEquals("Factory did not assign a collection to variable '", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("Factory did not assign a collection to variable ':", qName0.toString());
      assertEquals("Factory did not assign a collection to variable '", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("Factory did not assign a collection to variable ':", qName0.toString());
      assertEquals("Factory did not assign a collection to variable '", qName0.getPrefix());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(12, nodeTypeTest0, (Expression[]) null);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(12, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction1 = new CoreFunction(2943, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2943, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationUnion0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-425), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-425), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeNameTest0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeNameTest0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext(coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      String string0 = (String)coreFunction0.computeValue(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(string0);
      
      String string1 = (String)coreFunction0.compute(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, coreOperationMultiply0);
      assertEquals(8, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Byte byte0 = new Byte((byte)119);
      assertEquals((byte)119, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(0, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[2]);
      assertEquals(8, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      assertEquals(0, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant("X}/#-bD");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[5] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(locationPath0, expressionArray0[2]);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertEquals(8, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(coreOperationGreaterThanOrEqual1);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      QName qName0 = new QName("X}/#-bD");
      assertNull(qName0.getPrefix());
      assertEquals("X}/#-bD", qName0.toString());
      assertEquals("X}/#-bD", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("X}/#-bD", qName0.toString());
      assertEquals("X}/#-bD", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-3063), expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals((-3063), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1969), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(3084, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(3084, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(20, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction3));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction3);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      Object object1 = coreFunction2.functionName((EvalContext) null);
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals("", object1);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(3084, coreFunction2.getFunctionCode());
      assertNotNull(object1);
      
      Object object2 = coreFunction3.functionNot((EvalContext) null);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(true, object2);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(20, coreFunction3.getFunctionCode());
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = 15;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(2, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = unionContext0.nextSet();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(2, evalContextArray0.length);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      Object object0 = coreFunction0.functionConcat(unionContext0);
      assertEquals("7A'k{je/#\" NLN7A'k{je/#\" NLN7A'k{je/#\" NLN", object0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, evalContextArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstring(unionContext0);
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(3, expressionArray0.length);
      assertEquals(2, evalContextArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("\"format-number\"");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("", "\"format-number\"");
      assertEquals("", qName0.getPrefix());
      assertEquals(":\"format-number\"", qName0.toString());
      assertEquals("\"format-number\"", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "\"format-number\"");
      assertEquals("", qName0.getPrefix());
      assertEquals(":\"format-number\"", qName0.toString());
      assertEquals("\"format-number\"", qName0.getName());
      assertEquals("\"format-number\"", nodeNameTest0.getNamespaceURI());
      assertEquals(":\"format-number\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(499, nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals(":\"format-number\"", qName0.toString());
      assertEquals("\"format-number\"", qName0.getName());
      assertEquals("\"format-number\"", nodeNameTest0.getNamespaceURI());
      assertEquals(":\"format-number\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(499, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-3641), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-3641), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, (Expression) null);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, coreOperationNotEqual0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("", (String) null);
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertEquals(":null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-1277), nodeNameTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertEquals(":null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1277), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(5, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertEquals(":null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(5, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(5, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertEquals(":null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(5, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-1277), nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertEquals(":null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1277), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1277), nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals(4, expressionArray0.length);
      assertEquals((-1277), step4.getAxis());
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertEquals(":null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1277), nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertEquals(4, expressionArray0.length);
      assertEquals((-1277), step5.getAxis());
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertEquals(":null", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, coreOperationNotEqual0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, expressionArray0[2]);
      assertEquals(4, expressionArray0.length);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(12, nodeTypeTest0, (Expression[]) null);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(12, step0.getAxis());
      assertNotNull(step0);
      
      CoreFunction coreFunction1 = new CoreFunction(25, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodeTypeTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction2 = new CoreFunction(25, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(25, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2060), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-2060), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[10];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(boolean0);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[2]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("x,!N90Hb9#XKch2I", "aXA`");
      assertEquals("x,!N90Hb9#XKch2I", qName0.getPrefix());
      assertEquals("aXA`", qName0.getName());
      assertEquals("x,!N90Hb9#XKch2I:aXA`", qName0.toString());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, "x,!N90Hb9#XKch2I");
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("x,!N90Hb9#XKch2I", qName0.getPrefix());
      assertEquals("aXA`", qName0.getName());
      assertEquals("x,!N90Hb9#XKch2I:aXA`", qName0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[0], beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("x,!N90Hb9#XKch2I", qName0.getPrefix());
      assertEquals("aXA`", qName0.getName());
      assertEquals("x,!N90Hb9#XKch2I:aXA`", qName0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("x,!N90Hb9#XKch2I", qName0.getPrefix());
      assertEquals("aXA`", qName0.getName());
      assertEquals("x,!N90Hb9#XKch2I:aXA`", qName0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("x,!N90Hb9#XKch2I", qName0.getPrefix());
      assertEquals("aXA`", qName0.getName());
      assertEquals("x,!N90Hb9#XKch2I:aXA`", qName0.toString());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute(initialContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed pattern \"7A'k{je/#\" NLN\"
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("8GZP");
      assertEquals("8GZP", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("8GZP", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("8GZP", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("8GZP", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("8GZP");
      assertEquals("8GZP", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-21), processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("8GZP", processingInstructionTest0.getTarget());
      assertEquals((-21), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-21), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals("8GZP", processingInstructionTest0.getTarget());
      assertEquals((-21), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-21), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertEquals("8GZP", processingInstructionTest0.getTarget());
      assertEquals((-21), step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-21), processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals("8GZP", processingInstructionTest0.getTarget());
      assertEquals((-21), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(4, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertEquals("8GZP", processingInstructionTest0.getTarget());
      assertEquals(4, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(4, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertEquals(4, step5.getAxis());
      assertEquals("8GZP", processingInstructionTest0.getTarget());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(30, processingInstructionTest0, expressionArray0);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertEquals(3, expressionArray0.length);
      assertEquals(30, step6.getAxis());
      assertEquals("8GZP", processingInstructionTest0.getTarget());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertEquals("8GZP", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("8GZP", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-21), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-21), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(12, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1969), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-1969), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      int int0 = 8;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("rp%pe");
      assertEquals("rp%pe", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertEquals("rp%pe", processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) parentContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(parentContext0, evalContextArray0);
      assertEquals(3, evalContextArray0.length);
      assertEquals("rp%pe", processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "normalize-space");
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationMod0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationSubtract0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1969), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionRound((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, (NodeTest) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      SelfContext selfContext0 = new SelfContext(ancestorContext0, nodeTypeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      evalContextArray0[0] = (EvalContext) selfContext0;
      evalContextArray0[1] = (EvalContext) ancestorContext0;
      evalContextArray0[2] = (EvalContext) predicateContext0;
      evalContextArray0[3] = (EvalContext) namespaceContext0;
      evalContextArray0[4] = (EvalContext) ancestorContext0;
      evalContextArray0[5] = (EvalContext) namespaceContext0;
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, nodeTypeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertNotNull(descendantContext0);
      
      evalContextArray0[6] = (EvalContext) descendantContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      assertEquals(7, evalContextArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(unionContext0);
      
      Object object0 = coreFunction1.functionCount(unionContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1.0, object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(7, evalContextArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.compute(ancestorContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNull(object1);
      
      Object object2 = coreFunction0.functionFloor(ancestorContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object2.equals((Object)object0));
      assertEquals(0.0, object2);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(22, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(22, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1969), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-1969), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(8, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(8, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(8, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction3));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction1, coreFunction3);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-1969), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1969()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("6hC&_(NrA(>jCF<)cM");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number('6hC&_(NrA(>jCF<)cM', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | org.apache.commons.jxpath.ri.compiler.Constant@0000000003 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004), 97, org.apache.commons.jxpath.ri.compiler.Constant@0000000003 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, (NodeTest) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      Object object0 = coreFunction2.functionBoolean(namespaceContext0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(false, object0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionName((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object1);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("6hC&_(NrA(>jCF<)cM");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang('6hC&_(NrA(>jCF<)cM', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | org.apache.commons.jxpath.ri.compiler.Constant@0000000003 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000004), 97, org.apache.commons.jxpath.ri.compiler.Constant@0000000003 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-682), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-682), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertNotNull(evalContext0);
      
      int int0 = (-1969);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7OP.z");
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      NodePointer nodePointer0 = namespaceContext0.getCurrentNodePointer();
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNull(nodePointer0);
      
      int int0 = new Integer(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, int0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("processing-instruction('7OP.z')", string0);
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertNotNull(string0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertEquals(0.0, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 7;
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName(">");
      assertEquals(">", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(">", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(">", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(">", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      int int0 = 3;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, (NodeTest) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      assertEquals(3, evalContextArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertNotNull(unionContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, (NodeTest) null, true);
      assertEquals(3, evalContextArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.functionNamespaceURI(precedingOrFollowingContext0);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, evalContextArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionLocalName(evalContextArray0[1]);
      assertEquals("", object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, evalContextArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(9, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(9, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, (NodeTest) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      assertEquals(3, evalContextArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, (NodeTest) null, true);
      assertEquals(3, evalContextArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.functionNamespaceURI(precedingOrFollowingContext0);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, evalContextArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1969()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      assertEquals(7, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[1]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round('7A'k{je/#\" NLN', '7A'k{je/#\" NLN', '7A'k{je/#\" NLN')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationUnion", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      int int0 = 6;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-771), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-771), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("%", "&B(Ss|c");
      assertEquals("%:&B(Ss|c", qName0.toString());
      assertEquals("%", qName0.getPrefix());
      assertEquals("&B(Ss|c", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat("%");
      assertEquals("-%", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertNotNull(decimalFormat0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormat0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("-%", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName1 = new QName("&(Ss|c", "&(Ss|c");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("&(Ss|c:&(Ss|c", qName1.toString());
      assertEquals("&(Ss|c", qName1.getPrefix());
      assertEquals("&(Ss|c", qName1.getName());
      assertNotNull(qName1);
      
      Locale locale1 = Locale.KOREA;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertNotNull(locale1);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName1, qName1, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(qName1.equals((Object)qName0));
      assertNotSame(locale0, locale1);
      assertNotSame(qName1, qName0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("&(Ss|c:&(Ss|c", qName1.toString());
      assertEquals("&(Ss|c", qName1.getPrefix());
      assertEquals("&(Ss|c", qName1.getName());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName1, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("-%", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&(Ss|c:&(Ss|c", qName1.toString());
      assertEquals("&(Ss|c", qName1.getPrefix());
      assertEquals("&(Ss|c", qName1.getName());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      VariablePointer variablePointer0 = new VariablePointer(qName1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("&(Ss|c:&(Ss|c", qName1.toString());
      assertEquals("&(Ss|c", qName1.getPrefix());
      assertEquals("&(Ss|c", qName1.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("-%", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&(Ss|c:&(Ss|c", qName1.toString());
      assertEquals("&(Ss|c", qName1.getPrefix());
      assertEquals("&(Ss|c", qName1.getName());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(locale0, locale1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(qName1, qName0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("-%", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&(Ss|c:&(Ss|c", qName1.toString());
      assertEquals("&(Ss|c", qName1.getPrefix());
      assertEquals("&(Ss|c", qName1.getName());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotNull(initialContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(initialContext0, true, (NodeTest) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("-%", decimalFormat0.getNegativePrefix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("%#", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("%", decimalFormat0.getPositivePrefix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("%#", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("&(Ss|c:&(Ss|c", qName1.toString());
      assertEquals("&(Ss|c", qName1.getPrefix());
      assertEquals("&(Ss|c", qName1.getName());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: &(Ss|c:&(Ss|c
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 3;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("\"YJH.Yu1g[/JW&wkhX", "2('>0+dduV^i3+.HX#-");
      assertEquals("\"YJH.Yu1g[/JW&wkhX", qName0.getPrefix());
      assertEquals("\"YJH.Yu1g[/JW&wkhX:2('>0+dduV^i3+.HX#-", qName0.toString());
      assertEquals("2('>0+dduV^i3+.HX#-", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("\"YJH.Yu1g[/JW&wkhX", qName0.getPrefix());
      assertEquals("\"YJH.Yu1g[/JW&wkhX:2('>0+dduV^i3+.HX#-", qName0.toString());
      assertEquals("2('>0+dduV^i3+.HX#-", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      expressionArray1[6] = (Expression) extensionFunction0;
      expressionArray1[7] = (Expression) extensionFunction0;
      expressionArray1[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-952), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-952), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(expression0, extensionFunction0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(9, expressionArray1.length);
      assertTrue(expression0.computeContextDependent());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-952), coreFunction0.getFunctionCode());
      assertNotNull(expression0);
      
      expressionArray0[1] = expression0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("\"YJH.Yu1g[/JW&wkhX", qName0.getPrefix());
      assertEquals("\"YJH.Yu1g[/JW&wkhX:2('>0+dduV^i3+.HX#-", qName0.toString());
      assertEquals("2('>0+dduV^i3+.HX#-", qName0.getName());
      assertNotNull(variableReference0);
      
      expressionArray0[2] = (Expression) variableReference0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(extensionFunction1.equals((Object)expression0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertEquals("\"YJH.Yu1g[/JW&wkhX", qName0.getPrefix());
      assertEquals("\"YJH.Yu1g[/JW&wkhX:2('>0+dduV^i3+.HX#-", qName0.toString());
      assertEquals("2('>0+dduV^i3+.HX#-", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      
      expressionArray0[3] = (Expression) extensionFunction1;
      Expression expression1 = coreFunction0.getArg1();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expression1.equals((Object)extensionFunction1));
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(expression1, extensionFunction0);
      assertSame(expression1, expression0);
      assertNotSame(expression1, extensionFunction1);
      assertEquals(9, expressionArray1.length);
      assertTrue(expression1.computeContextDependent());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-952), coreFunction0.getFunctionCode());
      assertNotNull(expression1);
      
      expressionArray0[4] = expression1;
      Expression expression2 = coreFunction0.getArg2();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expression2.equals((Object)extensionFunction1));
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(expression2, expression0);
      assertSame(expression2, extensionFunction0);
      assertNotSame(expression2, extensionFunction1);
      assertSame(expression2, expression1);
      assertEquals(9, expressionArray1.length);
      assertTrue(expression2.computeContextDependent());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-952), coreFunction0.getFunctionCode());
      assertNotNull(expression2);
      
      expressionArray0[5] = expression2;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      expressionArray0[6] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(28, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(28, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(9, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction3.getArgumentCount());
      assertEquals(9, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction3));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertTrue(boolean0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction3);
      assertNotSame(coreFunction0, coreFunction2);
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-952), coreFunction0.getFunctionCode());
      
      int int0 = coreFunction3.getArgumentCount();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(9, int0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction1);
      assertEquals(9, expressionArray1.length);
      assertEquals(9, coreFunction3.getArgumentCount());
      assertEquals(9, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float((double) 91);
      assertEquals(91.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[16];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(16, expressionArray0.length);
      assertEquals(16, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(30, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(30, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("substring-after", string0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(string0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[5] = (Expression) extensionFunction0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2257), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-2257), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-2257()", string0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-2257), coreFunction0.getFunctionCode());
      assertNotNull(string0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-2257), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-2257), coreFunction0.getFunctionCode());
      assertNull(object1);
      
      CoreFunction coreFunction1 = new CoreFunction(488, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(488, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-2257), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals((-2257), coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      coreFunction2.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("Index: ");
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(1093, nodeNameTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1093, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1307), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1307), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1049, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1049, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-1307), nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1307), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(1049, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1049, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(3, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(3, step5.getAxis());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-1307), nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertEquals(2, expressionArray0.length);
      assertEquals((-1307), step6.getAxis());
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertNotNull(coreOperationAnd1);
      
      expressionArray0[1] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction((-1307), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1307), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertSame(expression0, expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1307), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(expression0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertNotSame(step1, step6);
      assertNotSame(step1, step0);
      assertNotSame(step1, step4);
      assertNotSame(step1, step3);
      assertNotSame(step1, step2);
      assertNotSame(step1, step5);
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1307), step1.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) expressionArray0[1]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(step1, step6);
      assertNotSame(step1, step0);
      assertNotSame(step1, step4);
      assertNotSame(step1, step3);
      assertNotSame(step1, step2);
      assertNotSame(step1, step5);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1307), step1.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step2, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step4));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step3));
      assertNotSame(step2, step6);
      assertNotSame(step2, step0);
      assertNotSame(step2, step4);
      assertNotSame(step2, step1);
      assertNotSame(step2, step5);
      assertNotSame(step2, step3);
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1049, step2.getAxis());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, expression0, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step4));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1307), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1307), step1.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1049, step2.getAxis());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step4));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1307), step1.getAxis());
      assertEquals(1049, step2.getAxis());
      assertEquals((-1307), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(step1.equals((Object)step6));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step2.equals((Object)step6));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step4));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step5));
      assertFalse(step2.equals((Object)step3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(step1, step6);
      assertNotSame(step1, step0);
      assertNotSame(step1, step4);
      assertNotSame(step1, step3);
      assertNotSame(step1, step2);
      assertNotSame(step1, step5);
      assertNotSame(step2, step6);
      assertNotSame(step2, step0);
      assertNotSame(step2, step4);
      assertNotSame(step2, step1);
      assertNotSame(step2, step5);
      assertNotSame(step2, step3);
      assertSame(expression0, expressionPath0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals(2, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Index", qName0.getPrefix());
      assertEquals("Index: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Index: ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1307), step1.getAxis());
      assertEquals(1049, step2.getAxis());
      assertEquals((-1307), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(initialContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)63;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)13, (byte)40, (byte)9, (byte)10, (byte)79, (byte)0, (byte)63}, byteArray0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('7A'k{je/#\" NLN', '7A'k{je/#\" NLN', '7A'k{je/#\" NLN')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(40, nodeTypeTest0, (Expression[]) null);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(40, step0.getAxis());
      assertNotNull(step0);
      
      String string0 = step0.toString();
      assertEquals("UNKNOWN::UNKNOWN()", string0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(40, step0.getAxis());
      assertNotNull(string0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(2430, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(2430, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      String string1 = nodeTypeTest0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("UNKNOWN()", string1);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertNotNull(string1);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) predicateContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      
      Double double0 = (Double)coreFunction2.functionLast(attributeContext0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(2430, coreFunction2.getFunctionCode());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(1, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLast(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("-4OX1VW*cRC&Nm?Anf*");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray0[0]);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, expressionArray0[0]);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationOr0, expressionArray0[1]);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertNotNull(coreOperationDivide1);
      
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertNotNull(coreOperationUnion1);
      
      expressionArray0[6] = (Expression) coreOperationUnion1;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("-4OX1VW*cRC&Nm?Anf*");
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.toString());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-4OX1VW*cRC&Nm?Anf*");
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.toString());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.getNamespaceURI());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(909, nodeNameTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.toString());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.getNamespaceURI());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(909, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(909, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.toString());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.getNamespaceURI());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(909, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "@/}9-h&S>U5'sg$puH");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.toString());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest1.toString());
      assertEquals("@/}9-h&S>U5'sg$puH", nodeNameTest1.getNamespaceURI());
      assertNotNull(nodeNameTest1);
      
      Step step2 = new Step(22, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.toString());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest1.toString());
      assertEquals("@/}9-h&S>U5'sg$puH", nodeNameTest1.getNamespaceURI());
      assertEquals(22, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-1217), nodeNameTest0, expressionArray0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.toString());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.getNamespaceURI());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1217), step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationDivide1;
      Step step4 = new Step(23, nodeNameTest0, expressionArray1);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertEquals(2, expressionArray1.length);
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.toString());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.getNamespaceURI());
      assertEquals("-4OX1VW*cRC&Nm?Anf*", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(23, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationLessThanOrEqual0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationUnion0.equals((Object)coreOperationUnion1));
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationDivide coreOperationDivide2 = new CoreOperationDivide(coreOperationLessThan0, coreOperationLessThanOrEqual0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationDivide2.equals((Object)coreOperationDivide0));
      assertFalse(coreOperationDivide2.equals((Object)coreOperationDivide1));
      assertFalse(coreOperationUnion0.equals((Object)coreOperationUnion1));
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide2.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationDivide2);
      
      expressionArray0[8] = (Expression) coreOperationDivide2;
      CoreFunction coreFunction0 = new CoreFunction(909, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(9, expressionArray0.length);
      assertEquals(909, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      Float float0 = new Float((-2312.8238334314174));
      assertEquals((-2312.8237F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-63), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, expressionArray0.length);
      assertEquals((-63), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) coreFunction2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals((-63), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertEquals((-63), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-63), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotNull(initialContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      assertEquals(30, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, false, nodeTypeTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertEquals((-63), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(30, nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      Float float0 = new Float((-2312.8238334314174));
      assertEquals((-2312.8237F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationMod0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3CpdT|2T:L,4TY7's<");
      assertEquals("3CpdT|2T:L,4TY7's<", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertEquals("3CpdT|2T:L,4TY7's<", processingInstructionTest0.getTarget());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(40, nodeTypeTest0, (Expression[]) null);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(40, step0.getAxis());
      assertNotNull(step0);
      
      boolean boolean0 = step0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(40, step0.getAxis());
      
      CoreFunction coreFunction1 = new CoreFunction((-325), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-325), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      int int0 = (-1311);
      CoreFunction coreFunction2 = new CoreFunction((-1311), (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-1311), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean1 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-1311), coreFunction2.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) stepArray0[0]);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, stepArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction3 = new CoreFunction(10, (Expression[]) null);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(10, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      boolean boolean2 = coreFunction3.computeContextDependent();
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction1);
      assertEquals(10, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      
      NamespaceResolver namespaceResolver0 = beanPointer0.getNamespaceResolver();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(namespaceResolver0);
      
      NamespaceResolver namespaceResolver1 = new NamespaceResolver((NamespaceResolver) null);
      assertFalse(namespaceResolver1.isSealed());
      assertNotNull(namespaceResolver1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(namespaceResolver1).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(namespaceResolver1.isSealed());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(namespaceResolver1.isSealed());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContext0.isLenient());
      assertNotNull(jXPathContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ParentContext parentContext0 = new ParentContext(rootContext0, processingInstructionTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(namespaceResolver1.isSealed());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      Step step0 = new Step((-2227), processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2227), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2227), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals((-2227), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(14, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, evalContextArray0.length);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      assertEquals(2, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "~xY;");
      assertEquals("~xY;", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1969), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1969), coreFunction0.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1969()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1244), (Expression[]) null);
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(0, stepArray0.length);
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(expressionPath0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7OP.z");
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, (-1244), processingInstructionTest0);
      assertEquals(0, stepArray0.length);
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertNull(evalContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      NodePointer nodePointer0 = namespaceContext0.getCurrentNodePointer();
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNull(nodePointer0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      boolean boolean0 = nodeSetContext0.setPosition(41);
      assertFalse(boolean0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(41, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionLast(nodeSetContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(41, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1244()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1946), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1946), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1946), coreFunction0.getFunctionCode());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = null;
      Float float0 = new Float((-2312.8238334314174));
      assertEquals((-2312.8237F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = null;
      int int0 = 14;
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-714), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-714), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-714), coreFunction0.getFunctionCode());
      assertNull(expression0);
      
      expressionArray0[0] = null;
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expression0, variableReference0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-714), coreFunction0.getFunctionCode());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      expressionArray0[3] = (Expression) locationPath1;
      CoreFunction coreFunction1 = new CoreFunction(1502, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(1502, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction2 = new CoreFunction((-714), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, expressionArray1.length);
      assertEquals((-714), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction((-870), expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction3.getArgumentCount());
      assertEquals((-870), coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      CoreFunction coreFunction4 = new CoreFunction(874, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertEquals(0, expressionArray1.length);
      assertEquals(874, coreFunction4.getFunctionCode());
      assertEquals(0, coreFunction4.getArgumentCount());
      assertNotNull(coreFunction4);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(512, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(512, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Iterator iterator0 = coreFunction1.iteratePointers(precedingOrFollowingContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(512, coreFunction1.getFunctionCode());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(91, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(91, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(91, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction2.functionLast(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1.0, (double)double0, 0.01);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(double0);
      
      boolean boolean1 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationUnion0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreFunction coreFunction0 = new CoreFunction((-4101), (Expression[]) null);
      assertEquals((-4101), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-4101), int0);
      assertEquals((-4101), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      Float float0 = new Float((-2312.8238334314174));
      assertEquals((-2312.8237F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      QName qName0 = new QName("name", "");
      assertEquals("name", qName0.getPrefix());
      assertEquals("name:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("name", qName0.getPrefix());
      assertEquals("name:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("name:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/#\" NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, (NodeTest) null);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      Object object0 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertEquals(0, object0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      Step step0 = new Step((-2227), processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2227), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNegate0, coreOperationNotEqual0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationNegate1);
      
      boolean boolean1 = coreOperationNegate1.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertFalse(boolean1);
      assertNotSame(constant0, constant1);
      assertNotSame(coreOperationNegate0, coreOperationNegate1);
      assertNotSame(coreOperationNegate1, coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationNegate1);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertEquals(3, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationMod0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNegate1;
      expressionArray1[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(-(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004), UNKNOWN::processing-instruction('')[org.apache.commons.jxpath.ri.compiler.Constant@0000000002 != org.apache.commons.jxpath.ri.compiler.Constant@0000000002][-org.apache.commons.jxpath.ri.compiler.Constant@0000000002][''])
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(20, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      int int0 = (-2398);
      CoreFunction coreFunction0 = new CoreFunction((-2398), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2398), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-2398), coreFunction0.getFunctionCode());
      assertNull(expression0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction1 = new CoreFunction(1741, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(1741, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray1);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(5, coreFunction2.getArgumentCount());
      assertEquals(0, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(1741, expressionArray1);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertEquals(1741, coreFunction3.getFunctionCode());
      assertEquals(5, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      // Undeclared exception!
      try { 
        coreFunction3.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      Step step0 = new Step((-2227), processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2227), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNegate0, coreOperationNotEqual0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      QName qName0 = new QName("EgPLx3$bf(4b<", "}U\"l@E");
      assertEquals("}U\"l@E", qName0.getName());
      assertEquals("EgPLx3$bf(4b<", qName0.getPrefix());
      assertEquals("EgPLx3$bf(4b<:}U\"l@E", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("EgPLx3$bf(4b<:}U\"l@E", nodeNameTest0.toString());
      assertEquals("}U\"l@E", qName0.getName());
      assertEquals("EgPLx3$bf(4b<", qName0.getPrefix());
      assertEquals("EgPLx3$bf(4b<:}U\"l@E", qName0.toString());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[0];
      CoreFunction coreFunction0 = new CoreFunction((-4071), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-4071), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-4071), coreFunction0.getFunctionCode());
      assertNull(expression0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-4071), coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-4071), coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      String string0 = "ys$2\"lAXN RDwSsg:&";
      Constant constant0 = new Constant("ys$2\"lAXN RDwSsg:&");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      int int0 = 14;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(14);
      assertEquals(14, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(14, nodeTypeTest0, (Expression[]) null);
      assertEquals(14, nodeTypeTest0.getNodeType());
      assertEquals(14, step0.getAxis());
      assertNotNull(step0);
      
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(0, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      Expression expression1 = null;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, locationPath0);
      assertEquals(0, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(nameAttributeTest0);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertEquals(0, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationNegate1);
      
      // Undeclared exception!
      try { 
        coreOperationNegate0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{j/#\"]NLN");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, (NodeTest) null);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, (NodeTest) null);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      SelfContext selfContext0 = new SelfContext(namespaceContext0, (NodeTest) null);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(2, (NodeTest) null, (Expression[]) null);
      assertEquals(2, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(1, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps(selfContext0);
      assertEquals(1, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(1, evalContext0.getDocumentOrder());
      assertNotNull(evalContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionLast(selfContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0.0, object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Expression[] expressionArray1 = new Expression[3];
      Step[] stepArray0 = new Step[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray1);
      assertEquals(3, expressionArray1.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(900, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(900, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = null;
      int int0 = (-1244);
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("lang");
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)15;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-68), (byte)12, (byte)15}, byteArray0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("lang", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("lang", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[4] = (Expression) locationPath0;
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-444), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals((-444), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.Operation");
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      Iterator iterator0 = coreFunction0.iteratePointers(precedingOrFollowingContext0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(iterator0);
      
      Object object0 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Step[] stepArray0 = new Step[1];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(15, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1883), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1883), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Step step0 = new Step(91, (NodeTest) null, (Expression[]) null);
      assertEquals(91, step0.getAxis());
      assertNotNull(step0);
      
      Step step1 = new Step(442, (NodeTest) null, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertEquals(442, step1.getAxis());
      assertNotNull(step1);
      
      boolean boolean0 = step1.isContextDependent();
      assertFalse(step1.equals((Object)step0));
      assertFalse(boolean0);
      assertNotSame(step1, step0);
      assertEquals(442, step1.getAxis());
      
      Step step2 = new Step(15, (NodeTest) null, (Expression[]) null);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(15, step2.getAxis());
      assertNotNull(step2);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotSame(step2, step1);
      assertNotSame(step2, step0);
      assertEquals(15, step2.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction2 = new CoreFunction(4, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(4, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationUnion0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationUnion0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      QName qName0 = new QName("name", "");
      assertEquals("name", qName0.getPrefix());
      assertEquals("name:", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("name", qName0.getPrefix());
      assertEquals("name:", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("name:", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      EvalContext evalContext0 = null;
      String string0 = "org.apache.commons.jxpath.ri.compiler.Operation";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.Operation");
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.Operation");
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      Iterator iterator0 = coreFunction0.iteratePointers(precedingOrFollowingContext0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(iterator0);
      
      Object object0 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.Operation", processingInstructionTest0.getTarget());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-39));
      assertEquals((-39), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals((-39), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction1 = new CoreFunction((-39), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-39), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(false, object0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationUnion0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationUnion0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      QName qName0 = new QName("name", "");
      assertEquals("name:", qName0.toString());
      assertEquals("name", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("name:", qName0.toString());
      assertEquals("name", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("name:", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction((-7), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(9, expressionArray0.length);
      assertEquals(25, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-7()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1244), (Expression[]) null);
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(0, stepArray0.length);
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(expressionPath0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7OP.z");
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, (-1244), processingInstructionTest0);
      assertEquals(0, stepArray0.length);
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertNull(evalContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      NodePointer nodePointer0 = namespaceContext0.getCurrentNodePointer();
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNull(nodePointer0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(7, expressionArray0.length);
      assertEquals(25, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(6, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationAdd0, expressionArray0, (Step[]) null);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath1);
      
      expressionArray0[2] = (Expression) expressionPath1;
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[3] = (Expression) constant0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, expressionArray0[3]);
      assertEquals(6, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd((Expression[]) null);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertNotNull(coreOperationAdd1);
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      Constant constant1 = new Constant(float0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      LocationPath locationPath1 = new LocationPath(true, (Step[]) null);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertTrue(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      expressionArray0[6] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(88, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(88, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3481));
      assertEquals((-3481), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals((-3481), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(749, (Expression[]) null);
      assertEquals(749, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray1.length);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(749, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1244), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(0, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertNotNull(expressionPath0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7OP.z");
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, (-1244), processingInstructionTest0);
      assertEquals(0, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertNull(evalContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      NodePointer nodePointer0 = namespaceContext0.getCurrentNodePointer();
      assertEquals("7OP.z", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNull(nodePointer0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, nodeSetContext0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      EvalContext evalContext1 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertNotNull(evalContext1);
      
      Object object0 = coreFunction0.functionName(evalContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1244), coreFunction0.getFunctionCode());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      assertEquals("org.apache.commons.jxpath.ri.axes.AttributeContext", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("processing-instruction('org.apache.commons.jxpath.ri.axes.AttributeContext')", string0);
      assertEquals("org.apache.commons.jxpath.ri.axes.AttributeContext", processingInstructionTest0.getTarget());
      assertNotNull(string0);
      
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "org.apache.commons.jxpath.ri.axes.AttributeContext");
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction1 = new CoreFunction(32, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-39));
      assertEquals((-39), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals((-39), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction1 = new CoreFunction((-4126), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-4126), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.compute(attributeContext0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-39), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction((-17), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-17), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(25, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-17()(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(91, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(91, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(25, (Expression[]) null);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(25, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      boolean boolean0 = coreFunction3.computeContextDependent();
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertEquals(25, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction4 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction4.getArgumentCount());
      assertEquals(9, coreFunction4.getFunctionCode());
      assertNotNull(coreFunction4);
      
      boolean boolean1 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction4));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction4);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction3.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(25, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      String string0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-1), processingInstructionTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-1), step0.getAxis());
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[6];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      int int0 = 17;
      CoreFunction coreFunction1 = new CoreFunction((-3061), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertEquals((-3061), coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-39));
      assertEquals((-39), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals((-39), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      CoreFunction coreFunction1 = new CoreFunction((-39), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-39), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, (Step[]) null);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1468, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1468, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nameAttributeTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertNotNull(decimalFormat0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, decimalFormat0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1468);
      assertEquals(1468, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeTypeTest0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(1468, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(3, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(1468, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      // Undeclared exception!
      coreFunction0.functionCeiling(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Step[] stepArray0 = new Step[0];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      assertEquals("org.apache.commons.jxpath.ri.axes.AttributeContext", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[0];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      assertEquals("org.apache.commons.jxpath.ri.axes.AttributeContext", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("processing-instruction('org.apache.commons.jxpath.ri.axes.AttributeContext')", string0);
      assertEquals("org.apache.commons.jxpath.ri.axes.AttributeContext", processingInstructionTest0.getTarget());
      assertNotNull(string0);
      
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string1 = processingInstructionTest0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("processing-instruction('org.apache.commons.jxpath.ri.axes.AttributeContext')", string1);
      assertEquals("org.apache.commons.jxpath.ri.axes.AttributeContext", processingInstructionTest0.getTarget());
      assertNotNull(string1);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-21);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)56, (byte)57, (byte)7, (byte)23, (byte) (-21)}, byteArray0);
      
      QName qName0 = new QName((String) null, "");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(2, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNotNull(nodeNameTest1);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      Step step1 = new Step(3, nodeNameTest1, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(1, expressionArray1.length);
      assertEquals(3, step1.getAxis());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(126, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertEquals(126, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(1, expressionArray1.length);
      assertEquals(126, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationUnion", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string0 = "/.[";
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/.[");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/.[");
      assertEquals("/.[", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Step step0 = new Step((-849), processingInstructionTest0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals("/.[", processingInstructionTest0.getTarget());
      assertEquals((-849), step0.getAxis());
      assertNotNull(step0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-3609), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3609), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertEquals("/.[", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals("/.[", processingInstructionTest0.getTarget());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      
      Object object0 = coreFunction0.compute(predicateContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals("/.[", processingInstructionTest0.getTarget());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3609), coreFunction0.getFunctionCode());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction((-767), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-767), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(40, nodeTypeTest0, (Expression[]) null);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(40, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(3, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertEquals(3, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertNull(evalContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationEqual0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("boolean", string0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(91, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, expressionArray0[2]);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(91, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(25, (Expression[]) null);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(25, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      boolean boolean0 = coreFunction3.computeContextDependent();
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(boolean0);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertEquals(25, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction4 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertEquals(3, expressionArray0.length);
      assertEquals(9, coreFunction4.getFunctionCode());
      assertEquals(3, coreFunction4.getArgumentCount());
      assertNotNull(coreFunction4);
      
      boolean boolean1 = coreFunction4.computeContextDependent();
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction4, coreFunction3);
      assertNotSame(coreFunction4, coreFunction0);
      assertNotSame(coreFunction4, coreFunction2);
      assertNotSame(coreFunction4, coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, coreFunction4.getFunctionCode());
      assertEquals(3, coreFunction4.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(parentContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(parentContext0, true, processingInstructionTest0);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(expressionPath0);
      
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction91()()", string0);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(string0);
      
      EvalContext evalContext0 = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(91, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(91, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(91, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1247);
      assertEquals(1247, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals(1247, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      Object object0 = coreFunction1.functionString(attributeContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(91, coreFunction1.getFunctionCode());
      assertEquals(1247, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(91, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      String string0 = "I{z\"D@g 5Z-DKT";
      QName qName0 = new QName("I{z\"D@g 5Z-DKT");
      assertNull(qName0.getPrefix());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.toString());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.toString());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      int int0 = (-1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.toString());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("I{z\"D@g 5Z-DKT", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(1804, nodeNameTest0, (Expression[]) null);
      assertNull(qName0.getPrefix());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.toString());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("I{z\"D@g 5Z-DKT", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1804, step0.getAxis());
      assertNotNull(step0);
      
      Step[] stepArray0 = new Step[9];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      Step step1 = new Step((-2173), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals((-2173), step1.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.toString());
      assertEquals("I{z\"D@g 5Z-DKT", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("I{z\"D@g 5Z-DKT", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step1);
      
      stepArray0[7] = step1;
      stepArray0[8] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], (Expression[]) null, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      assertEquals("org.apache.commons.jxpath.ri.axes.AttributeContext", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 91, processingInstructionTest0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("org.apache.commons.jxpath.ri.axes.AttributeContext", processingInstructionTest0.getTarget());
      assertNull(evalContext1);
      
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(unknownFunction91()(), null, unknownFunction91()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      QName qName0 = new QName((String) null, "concat");
      assertEquals("concat", qName0.toString());
      assertEquals("concat", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("concat", qName0.toString());
      assertEquals("concat", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("concat", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertEquals("concat", qName0.toString());
      assertEquals("concat", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("concat", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = (-2227);
      String string0 = "";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-1), processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-1), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      int int0 = 91;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(890, variablePointerFactory0.getOrder());
      assertNotNull(variablePointerFactory0);
      
      QName qName0 = new QName("", (String) null);
      assertNull(qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":null", qName0.toString());
      assertNotNull(qName0);
      
      NodePointer nodePointer0 = variablePointerFactory0.createNodePointer((NodePointer) null, qName0, (Object) jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(890, variablePointerFactory0.getOrder());
      assertNull(qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":null", qName0.toString());
      assertNull(nodePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertNotNull(rootContext1);
      
      Double double0 = (Double)coreFunction0.functionStringLength(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0.0, (double)double0, 0.01);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertNotNull(double0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreOperationUnion0);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(91, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(7, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(707, (Expression[]) null);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(707, coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      
      CoreFunction coreFunction4 = new CoreFunction(2262, (Expression[]) null);
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertEquals(0, coreFunction4.getArgumentCount());
      assertEquals(2262, coreFunction4.getFunctionCode());
      assertNotNull(coreFunction4);
      
      boolean boolean0 = coreFunction4.isContextDependent();
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction4, coreFunction3);
      assertNotSame(coreFunction4, coreFunction2);
      assertNotSame(coreFunction4, coreFunction0);
      assertNotSame(coreFunction4, coreFunction1);
      assertEquals(0, coreFunction4.getArgumentCount());
      assertEquals(2262, coreFunction4.getFunctionCode());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction2, coreOperationUnion0);
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction4));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(nameAttributeTest0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, nameAttributeTest0);
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction4));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        predicateContext0.getContextNodeList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(91, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction1 = new CoreFunction((-299), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals((-299), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-299), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertEquals((-299), coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-299));
      assertEquals((-299), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeTypeTest0, false, false);
      assertEquals(3, expressionArray0.length);
      assertEquals((-299), nodeTypeTest0.getNodeType());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionFalse(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-299()(unknownFunction91()(), unknownFunction91()(), null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      Step[] stepArray0 = new Step[1];
      int int0 = 7;
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(7, nodeNameTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(7, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("ye(H>[<by'7@A7", "id(");
      assertEquals("ye(H>[<by'7@A7", qName0.getPrefix());
      assertEquals("id(", qName0.getName());
      assertEquals("ye(H>[<by'7@A7:id(", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("ye(H>[<by'7@A7", qName0.getPrefix());
      assertEquals("id(", qName0.getName());
      assertEquals("ye(H>[<by'7@A7:id(", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("ye(H>[<by'7@A7:id(", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(16, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertEquals("ye(H>[<by'7@A7", qName0.getPrefix());
      assertEquals("id(", qName0.getName());
      assertEquals("ye(H>[<by'7@A7:id(", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("ye(H>[<by'7@A7:id(", nodeNameTest0.toString());
      assertEquals(16, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1009), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertEquals("ye(H>[<by'7@A7", qName0.getPrefix());
      assertEquals("id(", qName0.getName());
      assertEquals("ye(H>[<by'7@A7:id(", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("ye(H>[<by'7@A7:id(", nodeNameTest0.toString());
      assertEquals((-1009), step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(23, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3, expressionArray1.length);
      assertEquals("ye(H>[<by'7@A7", qName0.getPrefix());
      assertEquals("id(", qName0.getName());
      assertEquals("ye(H>[<by'7@A7:id(", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("ye(H>[<by'7@A7:id(", nodeNameTest0.toString());
      assertEquals(23, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ye(H>[<by'7@A7");
      assertEquals("ye(H>[<by'7@A7", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step3 = new Step(16, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(7, expressionArray0.length);
      assertEquals("ye(H>[<by'7@A7", processingInstructionTest0.getTarget());
      assertEquals(16, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(23, processingInstructionTest0, expressionArray1);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals(23, step4.getAxis());
      assertEquals("ye(H>[<by'7@A7", processingInstructionTest0.getTarget());
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-458), processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertEquals(3, expressionArray1.length);
      assertEquals((-458), step5.getAxis());
      assertEquals("ye(H>[<by'7@A7", processingInstructionTest0.getTarget());
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-1009), processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertEquals(3, expressionArray1.length);
      assertEquals((-1009), step6.getAxis());
      assertEquals("ye(H>[<by'7@A7", processingInstructionTest0.getTarget());
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(16, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertEquals(7, expressionArray0.length);
      assertEquals(16, step7.getAxis());
      assertEquals("ye(H>[<by'7@A7", processingInstructionTest0.getTarget());
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(8, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray1[1] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationAnd0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, coreOperationLessThanOrEqual0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals(8, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray1[2] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, nameAttributeTest0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals(8, stepArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertEquals(3, expressionArray1.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationNegate1);
      
      expressionArray0[3] = (Expression) coreOperationNegate1;
      QName qName1 = new QName("id(", "ye(H>[<by'7@A7");
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("id(:ye(H>[<by'7@A7", qName1.toString());
      assertEquals("ye(H>[<by'7@A7", qName1.getName());
      assertEquals("id(", qName1.getPrefix());
      assertNotNull(qName1);
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("id(:ye(H>[<by'7@A7", qName1.toString());
      assertEquals("ye(H>[<by'7@A7", qName1.getName());
      assertEquals("id(", qName1.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[4], coreOperationMultiply0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray0.length);
      assertEquals(3, expressionArray1.length);
      assertEquals(8, stepArray0.length);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(8, stepArray0.length);
      assertTrue(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      expressionArray0[6] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction((-1009), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-1009), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals("ye(H>[<by'7@A7", qName0.getPrefix());
      assertEquals("id(", qName0.getName());
      assertEquals("ye(H>[<by'7@A7:id(", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("ye(H>[<by'7@A7:id(", nodeNameTest0.toString());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      coreFunction0.functionLang(selfContext0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      Step step0 = new Step((-2227), processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-2227), step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNegate0, coreOperationNotEqual0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationNegate1);
      
      boolean boolean1 = coreOperationNegate1.computeContextDependent();
      assertFalse(boolean1 == boolean0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertFalse(boolean1);
      assertNotSame(constant0, constant1);
      assertNotSame(coreOperationNegate0, coreOperationNegate1);
      assertNotSame(coreOperationNegate1, coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationNegate1);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(coreOperationNegate0.equals((Object)coreOperationNegate1));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertEquals(3, expressionArray0.length);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertEquals(1, stepArray0.length);
      assertEquals(3, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionPath0, expressionArray0[1]);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals(1, stepArray0.length);
      assertEquals(3, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertNotNull(coreOperationNotEqual1);
      
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      
      CoreFunction coreFunction0 = new CoreFunction((-2227), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-2227), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertNotNull(nodeNameTest1);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(descendantContext0, (-2227), processingInstructionTest0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(1, stepArray0.length);
      assertEquals(3, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNull(evalContext0);
      
      Object object0 = coreFunction0.functionConcat(descendantContext0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("false0", object0);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-2227), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("", nodeNameTest1.getNamespaceURI());
      assertEquals("", nodeNameTest1.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2227()(org.apache.commons.jxpath.ri.compiler.Constant@0000000002 != org.apache.commons.jxpath.ri.compiler.Constant@0000000002, -org.apache.commons.jxpath.ri.compiler.Constant@0000000002, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      QName qName0 = new QName("boolean", "CgcWY*}J/4{-T");
      assertEquals("boolean:CgcWY*}J/4{-T", qName0.toString());
      assertEquals("boolean", qName0.getPrefix());
      assertEquals("CgcWY*}J/4{-T", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(2, expressionArray0.length);
      assertEquals("boolean:CgcWY*}J/4{-T", qName0.toString());
      assertEquals("boolean", qName0.getPrefix());
      assertEquals("CgcWY*}J/4{-T", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray2[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(1, expressionArray2.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      expressionArray1[0] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray1[1] = (Expression) coreOperationAdd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("boolean:CgcWY*}J/4{-T", qName0.toString());
      assertEquals("boolean", qName0.getPrefix());
      assertEquals("CgcWY*}J/4{-T", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray1[2] = (Expression) variableReference0;
      Float float0 = new Float((-484.018023));
      assertEquals((-484.01804F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[3] = (Expression) constant0;
      Constant constant1 = new Constant("CgcWY*}J/4{-T");
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      
      expressionArray1[4] = (Expression) constant1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[5], expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(constant0, coreOperationGreaterThanOrEqual0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertFalse(constant0.equals((Object)constant1));
      assertEquals(2, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction((-1324), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1324), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(23);
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertEquals(23, nodeTypeTest0.getNodeType());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionArray0[0]);
      assertEquals(5, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], (Expression) null);
      assertEquals(5, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1433), expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-1433), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1433));
      assertEquals((-1433), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(91, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationDivide0);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, expressionArray0[2]);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(91, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      
      CoreFunction coreFunction3 = new CoreFunction(25, (Expression[]) null);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals(0, coreFunction3.getArgumentCount());
      assertEquals(25, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction3));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction3);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertEquals(91, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction3);
      assertEquals(7, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, coreOperationNegate0);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals(3, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertNotNull(coreOperationNotEqual1);
      
      CoreFunction coreFunction4 = new CoreFunction(19, (Expression[]) null);
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertEquals(0, coreFunction4.getArgumentCount());
      assertEquals(19, coreFunction4.getFunctionCode());
      assertNotNull(coreFunction4);
      
      String string0 = coreFunction4.getFunctionName();
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertEquals("not", string0);
      assertNotSame(coreFunction4, coreFunction3);
      assertNotSame(coreFunction4, coreFunction2);
      assertNotSame(coreFunction4, coreFunction0);
      assertNotSame(coreFunction4, coreFunction1);
      assertEquals(0, coreFunction4.getArgumentCount());
      assertEquals(19, coreFunction4.getFunctionCode());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      int int0 = 3;
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      QName qName0 = new QName(", ", "namespace-uri");
      assertEquals("namespace-uri", qName0.getName());
      assertEquals(", :namespace-uri", qName0.toString());
      assertEquals(", ", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "namespace-uri");
      assertEquals("namespace-uri", qName0.getName());
      assertEquals(", :namespace-uri", qName0.toString());
      assertEquals(", ", qName0.getPrefix());
      assertEquals("namespace-uri", nodeNameTest0.getNamespaceURI());
      assertEquals(", :namespace-uri", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertEquals("namespace-uri", qName0.getName());
      assertEquals(", :namespace-uri", qName0.toString());
      assertEquals(", ", qName0.getPrefix());
      assertEquals("namespace-uri", nodeNameTest0.getNamespaceURI());
      assertEquals(", :namespace-uri", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("", "OkKS8Ri& TJh");
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(557, nodeNameTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(557, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3, step1.getAxis());
      assertNotNull(step1);
      
      stepArray0[2] = step1;
      Step step2 = new Step(557, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(557, step2.getAxis());
      assertNotNull(step2);
      
      stepArray0[3] = step2;
      Step step3 = new Step(982, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(982, step3.getAxis());
      assertNotNull(step3);
      
      stepArray0[4] = step3;
      Step step4 = new Step(8, nodeNameTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(8, step4.getAxis());
      assertNotNull(step4);
      
      stepArray0[5] = step4;
      Step step5 = new Step(974, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertEquals(3, expressionArray0.length);
      assertEquals(974, step5.getAxis());
      assertEquals("OkKS8Ri& TJh", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":OkKS8Ri& TJh", qName0.toString());
      assertEquals(":OkKS8Ri& TJh", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(step5);
      
      stepArray0[6] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      assertEquals(890, VariablePointerFactory.VARIABLE_POINTER_FACTORY_ORDER);
      assertEquals(890, variablePointerFactory0.getOrder());
      assertNotNull(variablePointerFactory0);
      
      QName qName0 = new QName("I8=>X-6;!3$s}kWJC");
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "d?PKx_dG!Ar[5C]");
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("I8=>X-6;!3$s}kWJC", nodeNameTest0.toString());
      assertEquals("d?PKx_dG!Ar[5C]", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(2645, nodeNameTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(2645, step0.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("I8=>X-6;!3$s}kWJC", nodeNameTest0.toString());
      assertEquals("d?PKx_dG!Ar[5C]", nodeNameTest0.getNamespaceURI());
      assertNotNull(step0);
      
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      assertEquals(5, expressionArray0.length);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, nameAttributeTest0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, qName0, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertNotNull(jXPathContextReferenceImpl0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertNotNull(initialContext0);
      
      ParentContext parentContext0 = new ParentContext(initialContext0, nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("I8=>X-6;!3$s}kWJC", nodeNameTest0.toString());
      assertEquals("d?PKx_dG!Ar[5C]", nodeNameTest0.getNamespaceURI());
      assertNotNull(parentContext0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(parentContext0, 1262, nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertNotSame(expressionPath0, expressionPath1);
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("I8=>X-6;!3$s}kWJC", nodeNameTest0.toString());
      assertEquals("d?PKx_dG!Ar[5C]", nodeNameTest0.getNamespaceURI());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertNull(evalContext0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.getName());
      assertEquals("I8=>X-6;!3$s}kWJC", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("I8=>X-6;!3$s}kWJC", nodeNameTest0.toString());
      assertEquals("d?PKx_dG!Ar[5C]", nodeNameTest0.getNamespaceURI());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/.[");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationMod0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-2695), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2695), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationMod coreOperationMod1 = (CoreOperationMod)coreFunction0.getArg1();
      assertSame(coreOperationMod1, coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2695), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertNotNull(coreOperationMod1);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod1, coreOperationMod1);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2695), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2695), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-2695), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-2695), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionContains(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2695()((org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000006))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, (Expression) null);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionArray0[0]);
      assertEquals(5, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], (Expression) null);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1433), expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName(".IA<#4*7\\!eQ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1433), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(363, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(evalContextArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-771), expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, (Expression) null);
      CoreFunction coreFunction1 = new CoreFunction((-771), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationMultiply0);
      QName qName0 = new QName("", "&(Ss|c");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationMultiply0, locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("] ");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, decimalFormat0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      Object object0 = coreFunction1.functionNamespaceURI(rootContext0);
      assertEquals((-771), coreFunction1.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("key", "key");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationEqual0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3192));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/.[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationMod0);
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "|sK`,QA%<pCDt#o{");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, false, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, variableReference0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) selfContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) precedingOrFollowingContext0;
      evalContextArray0[3] = (EvalContext) predicateContext0;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreOperationUnion0);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      QName qName0 = new QName("39*+|<Z9PF8<*ApA");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      CoreFunction coreFunction2 = new CoreFunction(2645, (Expression[]) null);
      coreFunction0.functionPosition(ancestorContext0);
      assertEquals(91, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      coreFunction1.functionTrue((EvalContext) null);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Integer integer0 = new Integer(91);
      Constant constant0 = new Constant(integer0);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2179), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2179()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, expressionArray0[2]);
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction(25, (Expression[]) null);
      coreFunction3.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction2);
      Integer integer0 = new Integer(550);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) integer0);
      DecimalFormat decimalFormat0 = new DecimalFormat("yV?");
      QName qName0 = new QName("|&q%:'^NYEv;", "|&q%:'^NYEv;");
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, decimalFormat0, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, expressionArray0[2]);
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(7, (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction(25, (Expression[]) null);
      coreFunction3.computeContextDependent();
      JXPathContext.newContext((Object) coreFunction2);
      CoreFunction coreFunction4 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) expressionPath0;
      expressionArray1[2] = (Expression) expressionPath0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) expressionPath0;
      expressionArray1[7] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2187));
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(unknownFunction91()()[unknownFunction91()()][unknownFunction91()()][unknownFunction91()()], unknownFunction91()()[unknownFunction91()()][unknownFunction91()()][unknownFunction91()()], unknownFunction91()()[unknownFunction91()()][unknownFunction91()()][unknownFunction91()()], unknownFunction91()(), unknownFunction91()(), unknownFunction91()(), unknownFunction91()()[unknownFunction91()()][unknownFunction91()()][unknownFunction91()()], unknownFunction91()()[unknownFunction91()()][unknownFunction91()()][unknownFunction91()()])
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2160), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "Cannot convert ");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionFalse(selfContext0);
      assertEquals((-2160), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Constant constant0 = new Constant("7A'k{je/# NLN");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7A'k{je/# NLN");
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      String string0 = "H,e?!*";
      QName qName0 = new QName("H,e?!*", "H,e?!*");
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, locationPath0);
      coreOperationNotEqual0.toString();
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd1);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/.[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationMod0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[1] = (Expression) variableReference0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/.[");
      Step step0 = new Step(12, processingInstructionTest0, expressionArray0);
      Step step1 = new Step(1873, processingInstructionTest0, (Expression[]) null);
      Step step2 = new Step(10, processingInstructionTest0, expressionArray0);
      Step step3 = new Step(337, processingInstructionTest0, expressionArray1);
      Step step4 = new Step(10, processingInstructionTest0, expressionArray1);
      Step step5 = new Step(6, processingInstructionTest0, expressionArray1);
      Step step6 = new Step(6, processingInstructionTest0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[1], coreOperationMod0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(500);
      Step step0 = new Step((-619), nodeTypeTest0, (Expression[]) null);
      int int0 = 16;
      Step step1 = new Step(16, nodeTypeTest0, (Expression[]) null);
      Step step2 = new Step(16, nodeTypeTest0, (Expression[]) null);
      Step step3 = new Step(160, nodeTypeTest0, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreOperationOr0;
      expressionArray0[1] = (Expression) coreOperationOr0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      Step step4 = new Step((-227), nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationDivide0);
      Constant constant0 = new Constant("7A'k{je/# NLN");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7A'k{je/# NLN");
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      EvalContext evalContext0 = null;
      int int0 = 24;
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, (Expression[]) null, (Step[]) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      coreFunction0.args = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationUnion0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, nameAttributeTest0);
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("true", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], (Expression) null);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1433), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1433));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(500, (Expression[]) null);
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step(500, (NodeTest) null, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(500, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-4694), (NodeTest) null, (Expression[]) null);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step3 = new Step((-4694), processingInstructionTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(25, (NodeTest) null, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-4382), (NodeTest) null, (Expression[]) null);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      ParentContext parentContext0 = new ParentContext(predicateContext0, (NodeTest) null);
      expressionPath0.createContextForStep(parentContext0, 25, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction500()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      String string0 = "key";
      QName qName0 = new QName("key", "key");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], extensionFunction1);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      coreOperationNotEqual0.toString();
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, coreOperationAnd0);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(91);
      Step step0 = new Step((-619), nodeTypeTest0, (Expression[]) null);
      Step step1 = new Step((-227), nodeTypeTest0, (Expression[]) null);
      Step step2 = new Step(557, nodeTypeTest0, (Expression[]) null);
      Step step3 = new Step((-833), nodeTypeTest0, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Step step4 = new Step(5, nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(evalContext1, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      Step step0 = new Step((-676), nodeTypeTest0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      expressionPath1.createContextForStep((EvalContext) null, 41, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      coreOperationAnd0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction((-771), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = 91;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      QName qName0 = new QName("namespace-uri", "namespace-uri");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "namespace-uri");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ParentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreOperationUnion0);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      QName qName0 = new QName("39*+|<Z9PF8<*ApA");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      AncestorContext ancestorContext1 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext1, coreOperationDivide0);
      evalContextArray0[0] = (EvalContext) predicateContext0;
      evalContextArray0[1] = (EvalContext) ancestorContext0;
      evalContextArray0[2] = (EvalContext) ancestorContext1;
      UnionContext unionContext0 = new UnionContext(ancestorContext1, evalContextArray0);
      coreFunction0.functionNumber(ancestorContext1);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContextArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer");
      Step step0 = new Step((-363), processingInstructionTest0, expressionArray0);
      Step step1 = new Step(1, processingInstructionTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1402));
      Step step2 = new Step(1873, nodeTypeTest0, expressionArray0);
      Step step3 = new Step(337, nodeTypeTest0, (Expression[]) null);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer", "org.apache.commons.jxpath.ri.model.beans.BeanPropertyPointer");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step4 = new Step(2039, nodeNameTest0, (Expression[]) null);
      Step step5 = new Step(30, processingInstructionTest0, (Expression[]) null);
      Step step6 = new Step(1, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, expressionPath0);
      CoreFunction coreFunction0 = new CoreFunction(6238, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[1]);
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      JXPathContext jXPathContext0 = null;
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("X-#%k}`lUCY<i9l", "X-#%k}`lUCY<i9l");
      Locale locale0 = Locale.KOREA;
      variablePointerFactory0.createNodePointer(qName0, (Object) expressionArray0[1], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[0], (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1912));
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationDivide0);
      Constant constant0 = new Constant("7A'k{je/# NLN");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7A'k{je/# NLN");
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      Byte byte0 = new Byte((byte)0);
      Constant constant1 = new Constant(byte0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, (Expression) null);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationSubtract0, coreOperationDivide0);
      CoreFunction coreFunction0 = new CoreFunction((byte)9, (Expression[]) null);
      coreFunction0.getArgumentCount();
      CoreFunction coreFunction1 = new CoreFunction((-1603), (Expression[]) null);
      coreFunction1.getArgumentCount();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) decimalFormat0);
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, decimalFormat0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      expressionPath0.createContextForStep((EvalContext) null, 91, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      coreFunction1.functionTrue((EvalContext) null);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreOperationUnion0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      QName qName0 = new QName((String) null, "<vL5([Lr`uZE,Iy-[");
      Locale locale0 = Locale.KOREA;
      QName qName1 = new QName("&(Ss|c");
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreOperationUnion0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      
      QName qName0 = new QName("39*+|<Z9PF8<*ApA");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      AncestorContext ancestorContext1 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction1.functionNull(ancestorContext1);
      String string0 = coreFunction1.getFunctionName();
      assertEquals("normalize-space", string0);
      
      coreFunction1.functionString(ancestorContext0);
      assertEquals(16, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(91);
      Step step0 = new Step((-619), nodeTypeTest0, (Expression[]) null);
      Step step1 = new Step((-227), nodeTypeTest0, (Expression[]) null);
      Step step2 = new Step(557, nodeTypeTest0, (Expression[]) null);
      Step step3 = new Step((-833), nodeTypeTest0, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Step step4 = new Step(5, nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(evalContext1, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      Step[] stepArray1 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray1);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      nameAttributeTest0.args = expressionArray0;
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("X-#%k}`lUCY<i9l", "X-#%k}`lUCY<i9l");
      Locale locale0 = Locale.KOREA;
      variablePointerFactory0.createNodePointer(qName0, (Object) nameAttributeTest0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[0], (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      rootContext0.getVariableContext(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(890);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      // Undeclared exception!
      coreFunction0.functionNot(rootContext1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      Step[] stepArray0 = new Step[8];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(459);
      Step step0 = new Step(20, (NodeTest) null, expressionArray0);
      Step step1 = new Step(3677, nodeTypeTest0, expressionArray0);
      Step step2 = new Step(20, nodeTypeTest0, expressionArray0);
      Step step3 = new Step((-845), (NodeTest) null, expressionArray0);
      Step step4 = new Step(459, (NodeTest) null, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, false, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, coreOperationLessThanOrEqual0);
      ParentContext parentContext0 = new ParentContext(selfContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      QName qName0 = new QName((String) null, "x8'a4=wvvJ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2248), nodeNameTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-2248), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-676));
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, coreOperationEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationEqual0, coreOperationNotEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationNotEqual0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      expressionPath0.createContextForStep((EvalContext) null, (-676), nodeTypeTest0);
      processingInstructionTest0.toString();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray1[3] = (Expression) locationPath1;
      expressionArray1[4] = (Expression) coreOperationEqual0;
      expressionArray1[5] = (Expression) expressionPath0;
      expressionArray1[6] = (Expression) coreOperationNotEqual0;
      expressionArray1[7] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreOperationUnion0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      QName qName0 = new QName("39*+|<Z9PF8<*ApA");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      AncestorContext ancestorContext1 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction1.functionNull(ancestorContext1);
      coreFunction1.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationDivide0);
      Constant constant0 = new Constant("7A'k{je/# NLN");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationNotEqual0);
      coreOperationMod0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationMod0);
      QName qName0 = new QName("7A'k{je/# NLN");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, variableReference0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationGreaterThan0);
      CoreFunction coreFunction0 = new CoreFunction((-1912), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1912));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeTypeTest0);
      coreFunction0.computeValue(parentContext0);
      coreFunction0.toString();
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-771), expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      Step[] stepArray0 = new Step[2];
      String string0 = "";
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(557, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(131, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-771()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationDivide0);
      Constant constant0 = new Constant("7A'k{je/# NLN");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7A'k{je/# NLN");
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(2039, expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-676));
      Step step0 = new Step(1789, nodeTypeTest0, expressionArray1);
      Step step1 = new Step(26, nodeTypeTest0, expressionArray0);
      Step step2 = new Step((-794), nodeTypeTest0, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("round");
      Step step3 = new Step(26, processingInstructionTest0, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      Step step4 = new Step(40, nodeTypeTest0, expressionArray1);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step0;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      stepArray0[3] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[0], expressionArray1, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2039()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      expressionPath0.createContextForStep((EvalContext) null, 91, processingInstructionTest0);
      expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      CoreFunction coreFunction1 = new CoreFunction(91, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationDivide0);
      Constant constant0 = new Constant("7A'k{je/# NLN");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationNotEqual0);
      coreOperationMod0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationMod0);
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, variableReference0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationGreaterThan0);
      CoreFunction coreFunction0 = new CoreFunction((-1912), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1912));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeTypeTest0, true, true);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(4238, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction4238()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      CoreFunction coreFunction0 = new CoreFunction(91, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationDivide0);
      Constant constant0 = new Constant("7A'k{je/# NLN");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationNotEqual0);
      coreOperationMod0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationMod0);
      QName qName0 = new QName("7A'k{je/# NLN");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, variableReference0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationGreaterThan0);
      CoreFunction coreFunction0 = new CoreFunction((-1912), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1912));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeTypeTest0);
      coreFunction0.computeValue(parentContext0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionID(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1912()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-676));
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-227), expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-227()(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 <= org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004) + (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000005) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      Step[] stepArray1 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray1);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      nameAttributeTest0.args = expressionArray0;
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      JXPathContext jXPathContext0 = null;
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("X-#%k}`lUCY<i9l", "X-#%k}`lUCY<i9l");
      Locale locale0 = Locale.KOREA;
      variablePointerFactory0.createNodePointer(qName0, (Object) nameAttributeTest0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[0], (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(890);
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionKey(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-120);
      QName qName0 = new QName("R]");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      Step step0 = new Step((byte)45, nodeNameTest0, expressionArray0);
      Step step1 = new Step((byte) (-120), nodeNameTest0, expressionArray0);
      Step step2 = new Step((byte)45, nodeNameTest0, expressionArray0);
      Step step3 = new Step((byte)18, nodeNameTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(557, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[2]);
      QName qName0 = new QName("&(Ss|c", "");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[0], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      coreFunction0.getArg3();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationLessThanOrEqual0);
      QName qName0 = new QName("+jF^reD", "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationDivide1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, qName0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(2039, expressionArray0);
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-676));
      Step step0 = new Step(2039, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-676), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      Step step2 = new Step(16, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step2;
      Step step3 = new Step(16, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step3;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2039()(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      expressionPath0.createContextForStep((EvalContext) null, 91, processingInstructionTest0);
      processingInstructionTest0.toString();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction91()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      int int0 = 91;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      String string0 = "org.apache.commons.jxpath.ri.axes.AttributeContext";
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName((String) null, "x8'a4=wvvJ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2248), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Byte byte0 = new Byte((byte)9);
      Constant constant0 = new Constant(byte0);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step1 = new Step((-2248), nodeNameTest1, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = evalContext0;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte)9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContextArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) locationPath0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) nameAttributeTest0;
      Step step0 = new Step(557, (NodeTest) null, expressionArray1);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      Step step1 = new Step(3, nodeTypeTest0, expressionArray0);
      Step step2 = new Step(1250, (NodeTest) null, expressionArray0);
      Step step3 = new Step(1, nodeTypeTest0, expressionArray1);
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray1[2]);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, true);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1412, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step1 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("dM'V`LPJfo1_c1=UdWL", " ");
      Locale locale0 = Locale.KOREA;
      VariablePointerFactory variablePointerFactory1 = new VariablePointerFactory();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("X-#%k}`lUCY<i9l", decimalFormatSymbols0);
      variablePointerFactory1.createNodePointer(qName0, (Object) decimalFormat0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, step0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationDivide0);
      Constant constant0 = new Constant("7A'k{je/# NLN");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationNotEqual0);
      coreOperationMod0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationMod0);
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, variableReference0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationGreaterThan0);
      CoreFunction coreFunction0 = new CoreFunction((-1912), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1912));
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeTypeTest0, true, true);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1912()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreFunction coreFunction0 = new CoreFunction((-2094), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1653), expressionArray0);
      coreFunction0.toString();
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("unknownFunction-1653()()", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Cannot add null object");
      Step step0 = new Step((-2855), nodeNameTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step1 = new Step(2012, nodeNameTest0, expressionArray0);
      Step step2 = new Step((-1653), nodeNameTest0, expressionArray0);
      Step step3 = new Step(27, nodeNameTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, false);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2067);
      Step step0 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step1 = new Step(32, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = null;
      Step step2 = new Step(3, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, locationPath0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, locationPath0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2347, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(2347, int0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      Step[] stepArray0 = new Step[8];
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(704, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step4 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, processingInstructionTest0, expressionArray0);
      processingInstructionTest0.toString();
      stepArray0[5] = step5;
      Step step6 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(0, processingInstructionTest0, expressionArray0);
      Step[] stepArray1 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray1);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 5, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(704, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(evalContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction704()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      int int0 = 91;
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      CoreFunction coreFunction0 = new CoreFunction(91, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      int int0 = 91;
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      String string0 = "org.apache.commons.jxpath.ri.axes.AttributeContext";
      // Undeclared exception!
      try { 
        expressionPath0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-234), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-234()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step((-1), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      Step step1 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1250, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, locationPath0);
      ChildContext childContext0 = new ChildContext(predicateContext0, (NodeTest) null, true, false);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(91, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.axes.AttributeContext");
      expressionPath0.createContextForStep((EvalContext) null, 91, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1049, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("X-#%k}`lUCY<i9l", "X-#%k}`lUCY<i9l");
      Locale locale0 = Locale.KOREA;
      variablePointerFactory0.createNodePointer(qName0, (Object) nameAttributeTest0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
      coreFunction0.functionRound(rootContext0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("self");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationMod0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("[]L'NQ{I");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[3], coreOperationNotEqual0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, expressionArray0[3]);
      expressionArray0[8] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(374, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(374);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(selfContext0, nodeTypeTest0, false, true);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.getFunctionCode();
      JXPathContext jXPathContext0 = null;
      coreFunction0.getFunctionName();
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-234), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-234()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(557, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[2]);
      QName qName0 = new QName("&(Ss|c", "");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[0], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3559, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1653), expressionArray0);
      coreFunction0.toString();
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step((-2855), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1653), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1653));
      Step step2 = new Step((-1653), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(609, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath0.evalSteps((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1000), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName((String) null, "x8'a4=wvvJ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2248), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Byte byte0 = new Byte((byte)9);
      Constant constant0 = new Constant(byte0);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationAnd0);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[4], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-726), expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.getArgumentCount();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[5], variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: x8'a4=wvvJ
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }
}
